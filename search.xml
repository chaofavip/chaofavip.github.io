<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP程序员的技术成长规划</title>
      <link href="/2021/04/02/php/study/fazhanguihua/"/>
      <url>/2021/04/02/php/study/fazhanguihua/</url>
      
        <content type="html"><![CDATA[<h2 id="第一阶段：基础阶段（基础-PHP-程序员）"><a href="#第一阶段：基础阶段（基础-PHP-程序员）" class="headerlink" title="第一阶段：基础阶段（基础 PHP 程序员）"></a>第一阶段：基础阶段（基础 PHP 程序员）</h2><p>重点：把 LNMP 搞熟练（核心是安装配置基本操作）</p><p>目标：能够完成基本的 LNMP 系统安装，简单配置维护；能够做基本的简单系统的 PHP 开发；能够在 PHP 中型系统中支持某个 PHP 功能模块的开发。</p><p>时间：完成本阶段的时间因人而异，有的成长快半年一年就过了，成长慢的两三年也有。</p><p>1.Linux：</p><p>基本命令、操作、启动、基本服务配置（包括 rpm 安装文件，各种服务配置等）；会写简单的 shell 脚本和 awk/sed 脚本命令等。</p><p>2.Nginx：</p><p>做到能够安装配置 nginx+php，知道基本的 nginx 核心配置选项，知道 server/fastcgi_pass/access_log 等基础配置，目标是能够让 nginx+php_fpm 顺利工作。</p><p>3.MySQL：</p><p>会自己搭建 mysql，知道基本的 mysql 配置选项；知道 innodb 和 myisam 的区别，知道针对 InnoDB 和 MyISAM 两个引擎的不同 配置选项；知道基本的两个引擎的差异和选择上面的区别；能够纯手工编译搭建一个 MySQL 数据库并且配置好编码等正常稳定运行；核心主旨是能够搭建一个可 运行的 MySQL 数据库。</p><p>4.PHP：</p><p>基本语法数组、字符串、数据库、XML、Socket、GD/ImageMgk 图片处理等等；熟悉各种跟 MySQL 操作链接的 api（mysql /mysqli/PDO)，知道各种编码问题的解决；知道常规熟练使用的 PHP 框架（ThinkPHP、Zendframework、Yii、Yaf 等）；了解基本 MVC 的运行机制和为什么这么做，稍微知道不同的 PHP 框架之间的区别；能够快速学习一个 MVC 框架。能够知道开发工程中的文件目录组织，有基本的良好的代码结构和风格，能够完成小系统的开发和中型系统中某个模块的开发工作。</p><ol start="5"><li>前端：</li></ol><p>如果条件时间允许，可以适当学习下 HTML/CSS/JS 等相关知识，知道什么 web 标准，div+css 的 web/wap 页面模式，知道 HTML5 和 HTML4 的区别；了解一些基本的前端只是和 JS 框架（jQuery 之类的）；了解一些基本的 JavaScript 编程知识；（本项不是必须 项，如果有时间，稍微了解一下是可以的，不过不建议作为重点，除非个人有强烈兴趣）</p><ol start="6"><li>系统设计：</li></ol><p>能够完成小型系统的基本设计，包括简单的数据库设计，能够完成基本的：浏览器 -&gt; Nginx+PHP -&gt; 数据库 架构的设计开发工作；能够支撑每天几十万到数百万流量网站的开发维护工作；</p><h2 id="第二阶段：提高阶段-（中级-PHP-程序员）"><a href="#第二阶段：提高阶段-（中级-PHP-程序员）" class="headerlink" title="第二阶段：提高阶段 （中级 PHP 程序员）"></a>第二阶段：提高阶段 （中级 PHP 程序员）</h2><p>重点：提高针对 LNMP 的技能，能够更全面的对 LNMP 有熟练的应用。</p><p>目标：能够随时随地搭建好 LNMP 环境，快速完成常规配置；能够追查解决大部分遇到的开发和线上环境的问题；能够独立承担中型系统的构架和开发工作；能够在大型系统中承担某个中型模块的开发工作；</p><ol><li>Linux:</li></ol><p>在第一阶段的基础上面，能够流畅的使用 Shell 脚本来完成很多自动化的工作；awk/sed/perl 也操作的不错，能够完成很多文本处理和数 据统计等工作；基本能够安装大部分非特殊的 Linux 程序（包括各种库、包、第三方依赖等等，比如 MongoDB/Redis/Sphinx/Luncene/SVN 之类的）；了解基本的 Linux 服务，知道如何查看 Linux 的性能指标数据，知道基本的 Linux 下面的问题跟踪等。</p><ol start="2"><li>Nginx:</li></ol><p>在第一阶段的基础上面，了解复杂一些的 Nginx 配置；包括 多核配置、events、proxy_pass，sendfile/tcp_* 配置， 知道超时等相关配置和性能影响；知道 nginx 除了 web server，还能够承担代理服务器、反向静态服务器等配置；知道基本的 nginx 配置调优； 知道如何配置权限、编译一个 nginx 扩展到 nginx；知道基本的 nginx 运行原理（master/worker 机制，epoll），知道为什么 nginx 性能比 apache 性能好等知识；</p><ol start="3"><li>MySQL/MongoDB：</li></ol><p>在第一阶段的基础上面，在 MySQL 开发方面，掌握很多小技巧，包括常规 SQL 优化（group by/order by/rand 优化等）；除了 能够搭建 MySQL，还能够冷热备份 MySQL 数据，还知道影响 innodb/myisam 性能的配置选项（比如 key_buffer /query_cache/sort_buffer/innodb_buffer_pool_size/innodb_flush_log_at_trx_commit 等），也知道这些选项配置成为多少值合适；另外也了解一些特殊的配置选项，比如 知道 如何搭建 mysql 主从同步的环境，知道各个 binlog_format 的区别；知道 MySQL 的性能追查，包括 slow_log/explain 等，还 能够知道基本的索引建立处理等知识；原理方面了解基本的 MySQL 的架构（Server + 存储引擎），知道基本的 InnoDB/MyISAM 索引存储结构 和不同（聚簇索引，B 树）；知道基本的 InnoDB 事务处理机制；了解大部分 MySQL 异常情况的处理方案（或者知道哪儿找到处理方案）。条件允许的情 况，建议了解一下 NoSQL 的代表 MongoDB 数据库，顺便对比跟 MySQL 的差别，同事能够在合适的应用场景安全谨慎的使用 MongoDB，知道基本 的 PHP 与 MongoDB 的结合开发。</p><ol start="4"><li>Redis/Memcached：</li></ol><p>在大部分中型系统里面一定会涉及到缓存处理，所以一定要了解基本的缓存；知道 Memcached 和 Redis 的异同和应用场景，能够独立安 装 Redis/Memcached，了解 Memcahed 的一些基本特性和限制，比如最大的 value 值，知道 PHP 跟他们的使用结合；Redis 了解 基本工作原理和使用，了解常规的数据类型，知道什么场景应用什么类型，了解 Redis 的事务等等。原理部分，能够大概了解 Memcached 的内存结构 （slab 机制），redis 就了解常用数据类型底层实现存储结构（SDS / 链表 / SkipList/HashTable）等等，顺便了解一下 Redis 的事务、RDB、AOF 等机制更好</p><ol start="5"><li>PHP：</li></ol><p>除了第一阶段的能力，安装配置方面能够随意安装 PHP 和各种第三方扩展的编译安装配置；了解 php-fpm 的大部分配置选项和含义（如 max_requests/max_children/request_terminate_timeout 之类的影响性能的配置），知道 mod_php /fastcgi 的区别；在 PHP 方面已经能够熟练各种基础技术，还包括各种深入些的 PHP，包括对 PHP 面向对象的深入理解 / SPL / 语法层面的特殊特 性比如反射之类的；在框架方面已经阅读过最少一个以上常规 PHP MVC 框架的代码了，知道基本 PHP 框架内部实现机制和设计思想；在 PHP 开发中已经能 够熟练使用常规的设计模式来应用开发（抽象工厂 / 单例 / 观察者 / 命令链 / 策略 / 适配器 等模式）；建议开发自己的 PHP MVC 框架来充分让开发自由化， 让自己深入理解 MVC 模式，也让自己能够在业务项目开发里快速升级；熟悉 PHP 的各种代码优化方法，熟悉大部分 PHP 安全方面问题的解决处理；熟悉基本的 PHP 执行的机制原理（Zend 引擎 / 扩展基本工作机制）；</p><ol start="6"><li>C/C++：</li></ol><p>开始涉猎一定的 C/C++ 语言，能够写基本的 C/C++ 代码，对基本的 C/C++ 语法熟悉（指针、数组操作、字符串、常规标准 API）和数据结构 （链表、树、哈希、队列）有一定的熟悉下；对 Linux 下面的 C 语言开发有基本的了解概念，会简单的 makefile 文件编写，能够使用简单的 GCC/GDB 的程序编译简单调试工作；对基本的网络编程有大概了解。（本项是为了向更高层次打下基础）</p><ol start="7"><li>前端：</li></ol><p>在第一阶段的基础上面，熟悉基本的 HTTP 协议（协议代码 200/300/400/500，基本的 HTTP 交互头）；条件允许，可以在深入写出稍微 优雅的 HTML+CSS+JavaScript，或者能够大致简单使用某些前端框架（jQuery/YUI/ExtJS/RequireJS/BootStrap 之类）；如果条件允许，可以深入学习 JavaScript 编程，比如闭包机制、DOM 处理；再深入些可以读读 jQuery 源码做深入 学习。（本项不做重点学习，除非对前端有兴趣）</p><ol start="8"><li>系统设计：</li></ol><p>能够设计大部分中型系统的网站架构、数据库、基本 PHP 框架选型；性能测试排查处理等；能够完成类似：浏览 器 -&gt; CDN (Squid) -&gt; Nginx+PHP -&gt; 缓存 -&gt; 数据库 结构网站的基本设计开发维护；能够支撑 每天数百万到千万流量基本网站的开发维护工作；</p><h2 id="第三阶段：高级阶段-（高级-PHP-程序员）"><a href="#第三阶段：高级阶段-（高级-PHP-程序员）" class="headerlink" title="第三阶段：高级阶段 （高级 PHP 程序员）"></a>第三阶段：高级阶段 （高级 PHP 程序员）</h2><p>重点：除了基本的 LNMP 程序，还能够在某个方向或领域有深入学习。（纵深维度发展）</p><p>目标：除了能够完成基本的 PHP 业务开发，还能够解决大部分深入复杂的技术问题，并且可以独立设计完成中大型的系统设计和开发工作；自己能够独立 hold 深入某个技术方向，在这块比较专业。（比如在 MySQL、Nginx、PHP、Redis 等等任一方向深入研究）</p><ol><li>Linux：</li></ol><p>除了第二阶段的能力，在 Linux 下面除了常规的操作和性能监控跟踪，还能够使用很多高级复杂的命令完成工作（watch/tcpdump/starce/ldd/ar 等)；在 shell 脚本方面，已经能够编写比较复杂的 shell 脚本（超过 500 行）来协助完成很多包括备份、自动化处理、 监控等工作的 shell；对 awk/sed/perl 等应用已经如火纯青，能够随意操作控制处理文本统计分析各种复杂格式的数据；对 Linux 内部机制 有一些了解，对内核模块加载，启动错误处理等等有个基本的处理；同时对一些其他相关的东西也了解，比如 NFS、磁盘管理等等；</p><ol start="2"><li>Nginx:</li></ol><p>在第二阶段的基础上面，已经能够把 Nginx 操作的很熟练，能够对 Nginx 进行更深入的运维工作，比如监控、性能优化，复杂问题处理等等；看个人 兴趣，更多方面可以考虑侧重在关于 Nginx 工作原理部分的深入学习，主要表现在阅读源码开始，比如具体的 master/worker 工作机 制，Nginx 内部的事件处理，内存管理等等；同时可以学习 Nginx 扩展的开发，可以定制一些自己私有的扩展；同时可以对 Nginx+Lua 有一定程度 的了解，看看是否可以结合应用出更好模式；这个阶段的要求是对 Nginx 原理的深入理解，可以考虑成为 Nginx 方向的深入专业者。</p><ol start="3"><li>MySQL/MongoDB：</li></ol><p>在第二阶段的基础上面，在 MySQL 应用方面，除了之前的基本 SQL 优化，还能够在完成一些复杂操作，比如大批量数据的导入导出，线上大批量数据的 更改表结构或者增删索引字段等等高危操作；除了安装配置，已经能够处理更多复杂的 MySQL 的问题，比如各种问题的追查，主从同步延迟问题的解决、跨机房 同步数据方案、MySQL 高可用架构等都有涉及了解；对 MySQL 应用层面，对 MySQL 的核心关键技术比较熟悉，比如事务机制（隔离级别、锁等）、对触 发器、分区等技术有一定了解和应用；对 MySQL 性能方面，有包括磁盘优化（SAS 迁移到 SSD）、服务器优化（内存、服务器本身配置）、除了二阶段的其 他核心性能优化选项（innodb_log_buffer_size/back_log/table_open_cache/thread_cache_size/innodb_lock_wait_timeout 等）、连接池软件选择应用，对 show * （show status/show profile）类的操作语句有深入了解，能够完成大部分的性能问题追查；MySQL 备份技术的深入熟悉，包括灾备 还原、对 Binlog 的深入理解，冷热备份，多 IDC 备份等；在 MySQL 原理方面，有更多了解，比如对 MySQL 的工作机制开始阅读部分源码，比如对主 从同步（复制）技术的源码学习，或者对某个存储引擎（MyISAM/Innodb/TokuDB）等等的源码学习理解，如果条件允许，可以参考 CSV 引擎 开发自己简单的存储引擎来保存一些数据，增强对 MySQL 的理解；在这个过程，如果自己有兴趣，也可以考虑往 DBA 方向发展。MongoDB 层面，可以考 虑比如说在写少读多的情况开始在线上应用 MongoDB，或者是做一些线上的数据分析处理的操作，具体场景可以按照工作来，不过核心是要更好的深入理解 RMDBS 和 NoSQL 的不同场景下面的应用，如果条件或者兴趣允许，可以开始深入学习一下 MongoDB 的工作机制。</p><ol start="4"><li>Redis/Memcached：</li></ol><p>在第二阶段的基础上面，能够更深入的应用和学习。因为 Memcached 不是特别复杂，建议可以把源码进行阅读，特别是内存管理部分，方便深入理 解；Redis 部分，可以多做一些复杂的数据结构的应用（zset 来做排行榜排序操作 / 事务处理用来保证原子性在秒杀类场景应用之类的使用操作）；多涉及 aof 等同步机制的学习应用，设计一个高可用的 Redis 应用架构和集群；建议可以深入的学习一下 Redis 的源码，把在第二阶段积累的知识都可以应用 上，特别可以阅读一下包括核心事件管理、内存管理、内部核心数据结构等充分学习了解一下。如果兴趣允许，可以成为一个 Redis 方面非常专业的使用者。</p><ol start="5"><li>PHP：</li></ol><p>作为基础核心技能，我们在第二阶段的基础上面，需要有更深入的学习和应用。从基本代码应用上面来说，能够解决在 PHP 开发中遇到 95% 的问题，了解 大部分 PHP 的技巧；对大部分的 PHP 框架能够迅速在一天内上手使用，并且了解各个主流 PHP 框架的优缺点，能够迅速方便项目开发中做技术选型；在配置方 面，除了常规第二阶段会的知识，会了解一些比较偏门的配置选项（php auto_prepend_file/auto_append_file），包括 扩展中的一些复杂高级配置和原理（比如 memcached 扩展配置中的 memcache.hash_strategy、apc 扩展配置中的 apc.mmap_file_mask/apc.slam_defense/apc.file_update_protection 之类的）；对 php 的 工作机制比较了解，包括 php-fpm 工作机制（比如 php-fpm 在不同配置机器下面开启进程数量计算以及原理），对 zend 引擎有基本熟悉 （vm/gc/stream 处理），阅读过基本的 PHP 内核源码（或者阅读过相关文章），对 PHP 内部机制的大部分核心数据结构（基础类型 / Array /Object）实现有了解，对于核心基础结构（zval/hashtable/gc）有深入学习了解；能够进行基本的 PHP 扩展开发，了解一些扩展开发 的中高级知识（minit/rinit 等），熟悉 php 跟 apache/nginx 不同的通信交互方式细节（mod_php/fastcgi）；除了开发 PHP 扩展，可以考虑学习开发 Zend 扩展，从更底层去了解 PHP。</p><ol start="6"><li>C/C++：</li></ol><p>在第二阶段基础上面，能够在 C/C++ 语言方面有更深入的学习了解，能够完成中小型 C/C++ 系统的开发工作；除了基本第二阶段的基础 C/C++ 语 法和数据结构，也能够学习一些特殊数据结构（b-tree/rb-tree/skiplist/lsm-tree/trie-tree 等）方便在特殊工作 中需求；在系统编程方面，熟悉多进程、多线程编程；多进程情况下面了解大部分多进程之间的通信方式，能够灵活选择通信方式（共享内存 / 信号量 / 管道等）； 多线程编程能够良好的解决锁冲突问题，并且能够进行多线程程序的开发调试工作；同时对网络编程比较熟悉，了解多进程模型 / 多线程模型 / 异步网络 IO 模型的 差别和选型，熟悉不同异步网络 IO 模型的原理和差异（select/poll/epoll/iocp 等），并且熟悉常见的异步框架（ACE/ICE/libev/libevent/libuv/Boost.ASIO 等）和使用，如果闲暇也可以看看一些国产自己开发的库（比如 muduo）；同时能够设 计好的高并发程序架构（leader-follow/master-worker 等）；了解大部分 C/C++ 后端 Server 开发中的问题（内存管理、日 志打印、高并发、前后端通信协议、服务监控），知道各个后端服务 RPC 通信问题（struct/http/thirft/protobuf 等）；能够更熟 络的使用 GCC 和 GDB 来开发编译调试程序，在线上程序 core 掉后能够迅速追查跟踪解决问题；通用模块开发方面，可以积累或者开发一些通用的工具或库 （比如异步网络框架、日志库、内存池、线程池等），不过开发后是否应用要谨慎，省的埋坑去追 bug；</p><ol start="7"><li>前端：</li></ol><p>深入了解 HTTP 协议（包括各个细致协议特殊协议代码和背后原因，比如 302 静态文件缓存了，502 是 nginx 后面 php 挂了之类的）；除了之前 的前端方面的各种框架应用整合能力，前端方面的学习如果有兴趣可以更深入，表现形式是，可以自己开发一些类似 jQuery 的前端框架，或者开发一个富文本 编辑器之类的比较琐碎考验 JavaScript 功力；</p><ol start="8"><li>其他领域语言学习：</li></ol><p>在基础的 PHP/C/C++ 语言方面有基本积累，建议在当前阶段可以尝试学习不同的编程语言，看个人兴趣爱好，脚本类语言可以学学 Python /Ruby 之类的，函数式编程语言可以试试 Lisp/Haskell/Scala/Erlang 之类的，静态语言可以试试 Java /Golang，数据统计分析可以了解了解 R 语言，如果想换个视角做后端业务，可以试试 Node.js 还有前面提到的跟 Nginx 结合的 Nginx_Lua 等。学习不同的语言主要是提升自己的视野和解决问题手段的差异，比如会了解除了进程 / 线程，还有轻量级协程；比如在跨机器通信场景下 面，Erlang 的解决方案简单的惊人；比如在不想选择 C/C++ 的情况下，还有类似高效的 Erlang/Golang 可用等等；主要是提升视野。</p><ol start="9"><li>其他专业方向学习：</li></ol><p>在本阶段里面，会除了基本的 LNMP 技能之外，会考虑一些其他领域知识的学习，这些都是可以的，看个人兴趣和长期的目标方向。目前情况能够选择的领 域比较多，比如、云计算（分布式存储、分布式计算、虚拟机等），机器学习（数据挖掘、模式识别等，应用到统计、个性化推荐），自然语言处理（中文分词 等），搜索引擎技术、图形图像、语音识别等等。除了这些高大上的，也有很多偏工程方面可以学习的地方，比如高性能系统、移动开发 （Android/IOS）、计算机安全、嵌入式系统、硬件等方向。</p><ol start="10"><li>系统设计：</li></ol><p>系统设计在第二阶段的基础之上，能够应用掌握的经验技能，设计出比较复杂的中大型系统，能够解决大部分线上的各种复杂系统的问题，完成类似 浏览 器 -&gt; CDN -&gt; 负载均衡 -&gt; 接入层 -&gt; Nginx+PHP -&gt; 业务缓存 -&gt; 数据 库 -&gt; 各路复杂后端 RPC 交互（存储后端、逻辑后端、反作弊后端、外部服务） -&gt; 更多后端 酱紫的复杂业务；能够支撑每天数千万到数 亿流量网站的正常开发维护工作。</p><p>————————————————<br>原文作者：wangchunbo<br>转自链接：<a href="https://learnku.com/docs/shxdledu/technical-growth-plan-of-php-programmer/9296#8ad5d3" target="_blank" rel="noopener">https://learnku.com/docs/shxdledu/technical-growth-plan-of-php-programmer/9296#8ad5d3</a><br>版权声明：著作权归作者所有。商业转载请联系作者获得授权，非商业转载请保留以上作者信息和原文链接。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL不香吗，为啥还要Elasticsearch？</title>
      <link href="/2021/04/01/mysql/es/"/>
      <url>/2021/04/01/mysql/es/</url>
      
        <content type="html"><![CDATA[<p>近年来公司业务迅猛发展，数据量爆炸式增长，随之而来的的是海量数据查询等带来的挑战，我们需要数据量在十亿，甚至百亿级别的规模时依然能以秒级甚至毫秒级的速度返回。</p><p>这样的话显然离不开搜索引擎的帮助，在搜索引擎中，ES（ElasticSearch）毫无疑问是其中的佼佼者，连续多年在 DBRanking 的搜索引擎中评测中排名第一，也是绝大多数大公司的首选。</p><p>那么它与传统的 DB 如 MySQL 相比有啥优势呢，ES 的数据又是如何生成的，数据达到 PB 时又是如何保证 ES 索引数据的实时性以更好地满足业务的需求的呢。</p><p>本文会结合我司在 ES 上的实践经验与大家谈谈如何构建准实时索引的一些思路，希望对大家有所启发。</p><h2 id="为什么要用搜索引擎，MySQL-不香吗"><a href="#为什么要用搜索引擎，MySQL-不香吗" class="headerlink" title="为什么要用搜索引擎，MySQL 不香吗"></a>为什么要用搜索引擎，MySQL 不香吗</h2><p>MySQL 架构天生不适合海量数据查询，它只适合海量数据存储，但无法应对海量数据下各种复杂条件的查询。</p><p>有人说加索引不是可以避免全表扫描，提升查询速度吗，为啥说它不适合海量数据查询呢？</p><p>有两个原因：</p><p>①加索引确实可以提升查询速度，但在 MySQL 中加多个索引最终在执行 SQL 的时候它只会选择成本最低的那个索引如。</p><p>果没有索引满足搜索条件，就会触发全表扫描，而且即便你使用了组合索引，也要符合最左前缀原则才能命中索引。</p><p>但在海量数据多种查询条件下很有可能不符合最左前缀原则而导致索引失效，而且我们知道存储都是需要成本的。</p><p>如果你针对每一种情况都加索引，以 innoDB 为例，每加一个索引，就会创建一颗 B+ 树。</p><p>如果是海量数据，将会增加很大的存储成本，之前就有人反馈说他们公司的某个表实际内容的大小才 10G, 而索引大小却有 30G！这是多么巨大的成本！所以千万不要觉得索引建得越多越好。</p><p>②有些查询条件是 MySQL 加索引都解决不了的，比如我要查询商品中所有 title 带有「格力空调」的关键词，如果你用 MySQL 写，会写出如下代码：<br>SELECT * FROM product WHERE title like ‘%格力空调%’</p><p>这样的话无法命中任何索引，会触发全表扫描，而且你不能指望所有人都能输对他想要的商品，是人就会犯错误，我们经常会犯类似把「格力空调」记成「格空间」的错误。</p><p>那么 SQL 语句就会变成：<br>SELECT * FROM product WHERE title like ‘%格空调%’</p><p>这种情况下就算你触发了全表扫描也无法查询到任何商品，综上所述，MySQL 的查询确实能力有限。</p><p>与其说上面列的这些点是 MySQL 的不足，倒不如说 MySQL 本身就不是为海量数据查询而设计的。</p><p>术业有专攻，海量数据查询还得用专门的搜索引擎，这其中 ES 是其中当之无愧的王者。</p><p>它是基于 Lucene 引擎构建的开源分布式搜索分析引擎，可以提供针对 PB 数据的近实时查询，广泛用在全文检索、日志分析、监控分析等场景。</p><p>它主要有以下三个特点:<br>轻松支持各种复杂的查询条件：它是分布式实时文件存储，会把每一个字段都编入索引（倒排索引），利用高效的倒排索引，以及自定义打分、排序能力与丰富的分词插件等，能实现任意复杂查询条件下的全文检索需求。<br>可扩展性强：天然支持分布式存储，通过极其简单的配置实现几百上千台服务器的分布式横向扩容，轻松处理 PB 级别的结构化或非结构化数据。<br>高可用，容灾性能好：通过使用主备节点，以及故障的自动探测与恢复，有力地保障了高可用。</p><h2 id="如何构建-ES-索引"><a href="#如何构建-ES-索引" class="headerlink" title="如何构建 ES 索引"></a>如何构建 ES 索引</h2><p>要构建 ES 索引数据，首先得有数据源，一般我们会使用 MySQL 作为数据源，你可以直接从 MySQL 中取数据然后再写入 ES，但这种方式由于直接调用了线上的数据库查询，可能会对线上业务造成影响。</p><p>比如考虑这样的一个场景：在电商 APP 里用的最多的业务场景想必是用户输入关键词来查询相对应的商品了，那么商品会有哪些信息呢？</p><p>一个商品会有多个 sku（sku 即同一个商品下不同规格的品类，比如苹果手机有 iPhone 6，iPhone 6s 等），会有其基本属性如价格，标题等，商品会有分类（居家，服饰等），品牌，库存等。</p><p>为了保证表设计的合理性，我们会设计几张表来存储这些属性。</p><p>假设有 product_sku（sku 表），product_property（基本属性表），sku_stock（库存表），product_category（分类表）这几张表。</p><p>那么为了在商品展示列表中展示所有这些信息，就必须把这些表进行 join，然后再写入 ES，这样查询的时候就会在 ES 中获取所有的商品信息了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓包</title>
      <link href="/2021/03/24/tool/zhuabao/"/>
      <url>/2021/03/24/tool/zhuabao/</url>
      
        <content type="html"><![CDATA[<h3 id="主流抓包工具对比"><a href="#主流抓包工具对比" class="headerlink" title="主流抓包工具对比"></a>主流抓包工具对比</h3><p>先来简单看下有哪些常见的抓包工具，主要有下面几种：</p><p>Charles</p><p>Fiddler</p><p>WireShark</p><p>TcpDump</p><p>Chrome Network</p><p>其中目前主流的抓包工具有：TcpDump、WireShark、Fiddler，下面我们对这几个抓包工具的性能进行一些简单的对比。</p><ol><li>TcpDump</li></ol><p>Android 平台下的网络数据抓包工具，Android模拟器中自带 TcpDump 文件。</p><p>用 TcpDump 对网络数据抓包，手机不用走代理——将网络数据包添加到 WireShark 中分析即可。</p><p>缺点：</p><p>手机必须获取 root 权限；</p><p>不能查看实时通信数据——因为抓取的是 dump 出来的文件，而不能实时数据交互；</p><p>获取的数据很多，分析时需要过滤出真正有用的信息。</p><ol start="2"><li>WireShark</li></ol><p>PC 端截获、分析通过该网卡的所有网络通信的数据包（针对移动端时候，就要对移动端设置代理服务器）强大的工具，完整查看网络中的每层、每个协议、每个数据包的详细组成信息；TCP、UDP、HTTP、HTTPS 等协议的数据包均可获取；</p><p>缺点：</p><p>获取的信息太多，需要手动过滤、进行分析。</p><p>只能查看，不能修改、重发送网络数据包。</p><ol start="3"><li>Fiddler</li></ol><p>HTTP 协议的代理工具，抓取、分析电脑中所有进出该网卡、与网络进行数据交互的数据（针对移动端抓包时，需要设置代理服务器)，主要针对的是 HTTP/HTTPS 协议；能够清晰查看数据包中的内容——HTTPS中的数据包可以解密出来。</p><p>缺点：</p><p>只适用于一次请求，下次请求需要重新设定</p><p>手动修改需要花费时间，如果程序等待超时，本次设定的 Response 结果失效</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GatewayWorker</title>
      <link href="/2021/03/18/workerman/GatewayWorker/"/>
      <url>/2021/03/18/workerman/GatewayWorker/</url>
      
        <content type="html"><![CDATA[<h2 id="GatewayWorker特性"><a href="#GatewayWorker特性" class="headerlink" title="GatewayWorker特性"></a>GatewayWorker特性</h2><p>1、基于Workerman开发<br>GatewayWorker是基于Workerman开发的</p><p>2、基于Gateway、Worker进程模型<br>GatewayWorker使用经典的Gateway和Worker进程模型。Gateway进程负责维持客户端连接，并转发客户端的数据给Worker进程处理；Worker进程负责处理实际的业务逻辑，并将结果推送给对应的客户端。Gateway服务和Worker服务可以分开部署在不同的服务器上，实现分布式集群。</p><p>3、支持分布式部署<br>GatewayWorker可以非常方便实现分布式部署，Gateway服务和Worker服务都可以分开部署在不同的服务器集群上。并且操作简单、容易扩容、上下线用户无感知。</p><p>4、支持高并发<br>Gateway进程只负责网络IO，Worker进程负责业务逻辑。其中每个Gateway进程可以维持上万的并发连接，多个Gateway进程可以维持数十万甚至百万的并发连接，Gateway集群则可以维持千万级别的并发连接。</p><p>5、支持全局广播或者向任意客户端推送数据<br>GatewayWorker提供非常方便的API，可以全局广播数据、可以向某个群体广播数据、也可以向某个特定客户端推送数据。配合Workerman的定时器，也可以定时推送数据。</p><p>6、支持各种应用层协议<br>WorkerMan接口上支持各种应用层协议，包括自定义协议。同样GatewayWorker也支持各种应用层协议。</p><p>7、多协议支持<br>有时应用客户端所使用的协议不止一种，例如PC网页客户端使用的是WebSocket协议，而手机App使用的是其它协议。GatewayWorker可以非常方便的支持多协议，只需要以不同的协议开不同的端口即可，业务代码无需改动。</p><p>8、支持对象或者资源永久保持<br>WorkerMan在运行过程中只会载入解析一次PHP文件，然后便常驻内存，这使得类及函数声明、PHP执行环境、符号表等不会重复创建销毁，这与Web容器下运行的PHP机制是完全不同的。在WorkerMan中，一个进程生命周期内静态成员或者全局变量在不主动销毁的情况下是永久保持的，也就是将对象或者链接等资源放到全局变量或者类静态成员中则整个进程生命周期内的所有请求都可以复用。例如只要单个进程内初始化一次数据库连接，则以后这个进程的所有请求都可以复用这个数据库连接，避免了频繁连接数据库过程中TCP三次握手、 数据库权限验证、断开连接时TCP四次握手的过程，极大的提高了应用程序效率。</p><p>9、高性能<br>由于php文件从磁盘读取解析一次后便会常驻内存，下次使用时直接使用内存中的opcode， 极大的减少了磁盘IO及PHP中请求初始化、创建执行环境、词法解析、语法解析、编译opcode、请求关闭等诸多耗时过程， 并且不依赖nginx、apache等容器，少了nginx等容器与PHP通信的开销，最主要的是资源可以永久保持，不必每次初始化数据库连接等等， 所以使用WorkerMan开发应用程序，性能非常高。</p><p>10、支持HHVM<br>支持在HHVM虚拟机上运行，可成倍提升PHP性能。尤其是在cpu密集运算业务中，性能非常优异，是PHP Zend虚拟机8倍左右。通过实际压力测试对比，在没有负载业务的情况下，WorkerMan在HHVM下运行比在Zend PHP5.6运行网络吞吐量提高了30-80%左右</p><p>11、方便与其它项目集成<br>针对其它项目，GatewayWorker提供推送非常简单方便的API，可以在任何项目中使用这个API向所有客户端或者特定客户端推送数据，比如在普通Web项目中推送数据。</p><p>12、支持代码热更新<br>可以reload Worker进程实现业务代码更新升级，而不必担心客户端连接会断开，因为客户端连接都由Gateway进程维持。</p><p>13、支持长连接<br>GatewayWorker主要用于长连接即时通讯应用。如游戏服务器、物联网云服务、IM、移动应用等。</p>]]></content>
      
      
      <categories>
          
          <category> WorkerMan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker之安装amqp扩展</title>
      <link href="/2021/03/17/docker/amqp/"/>
      <url>/2021/03/17/docker/amqp/</url>
      
        <content type="html"><![CDATA[<h3 id="一、rabbitmq-c-0-8-0-tar-gz"><a href="#一、rabbitmq-c-0-8-0-tar-gz" class="headerlink" title="一、rabbitmq-c-0.8.0.tar.gz"></a>一、rabbitmq-c-0.8.0.tar.gz</h3><p>curl -L -o /tmp/rabbitmq.tar.gz  <a href="https://github.com/alanxz/rabbitmq-c/releases/download/v0.8.0/rabbitmq-c-0.8.0.tar.gz" target="_blank" rel="noopener">https://github.com/alanxz/rabbitmq-c/releases/download/v0.8.0/rabbitmq-c-0.8.0.tar.gz</a></p><p>tar -zxvf rabbitmq-c-0.8.0.tar.gz</p><p>cd rabbitmq-c-0.8.0</p><p>./configure –prefix=/usr/local/rabbitmq-c</p><p>make &amp;&amp; make install</p><h3 id="二、amqp"><a href="#二、amqp" class="headerlink" title="二、amqp"></a>二、amqp</h3><h4 id="检查自己系统"><a href="#检查自己系统" class="headerlink" title="检查自己系统"></a>检查自己系统</h4><p>在容器里查看镜像所使用的的Linux版本<br>cat /etc/issue</p><p>我这边下载的一个容器里面运行的是Welcome to Alpine Linux 3.10 的版本，</p><p>Alpine 软件管理器使用的是apk</p><p>Centos 软件管理器使用的是yum</p><p>ubuntu 软件管理器使用的是apt-get</p><h4 id="检查包"><a href="#检查包" class="headerlink" title="检查包"></a>检查包</h4><p>pecl search amqp</p><h4 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h4><p>pecl install 查询出来的版本</p><h4 id="要指定上面安装包的路径"><a href="#要指定上面安装包的路径" class="headerlink" title="要指定上面安装包的路径"></a>要指定上面安装包的路径</h4><p>Set the path to librabbitmq install prefix [autodetect] : /usr/local/rabbitmq-c</p><h4 id="坐等执行完成"><a href="#坐等执行完成" class="headerlink" title="坐等执行完成"></a>坐等执行完成</h4><h4 id="再到php-ini。添加"><a href="#再到php-ini。添加" class="headerlink" title="再到php.ini。添加"></a>再到php.ini。添加</h4><p>[AMQP]<br>extension= amqp.so</p><h4 id="最后重启php"><a href="#最后重启php" class="headerlink" title="最后重启php"></a>最后重启php</h4><p>done</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> amqp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>程序员应该知道的97件事</title>
      <link href="/2020/12/13/code_way/97/"/>
      <url>/2020/12/13/code_way/97/</url>
      
        <content type="html"><![CDATA[<p>1.谨慎行动<br>2.函数式编程原则的应用<br>3.试问自己“用户会怎么做”（你不能算是用户）<br>4.编码标准的自动化<br>5.美在于简单<br>6.在你重构之前<br>7.谨防共享<br>8.童子军规则<br>9.在责备别人之前先检查自己的代码<br>10.谨慎选择你的工具<br>11.领域语言里的代码<br>12.代码就是设计<br>13.关于代码布局的麻烦事<br>14.代码审查<br>15.编写代码的理由<br>16.对注释的一个注释<br>17.代码说不清，注释来补充<br>18.不断学习<br>19.易用不是一种能力<br>20.早部署，常部署<br>21.区分业务异常和技术异常<br>22.有针对性的勤加练习<br>23.领域特定语言<br>24.不要怕搞砸<br>25.不要在你的测试代码里装可爱<br>26.不要忽略那个错误<br>27.不要只学习语言，还要了解它的文化内涵<br>28.不要把程序钉死在老地方<br>29.不要指望“魔法会在此发生”<br>30.不要重复你自己<br>31.别碰那些代码！<br>32.封装行为，而不仅仅是状态<br>33.浮点数不是真正的数<br>34.开源助你实现雄心壮志<br>35.API设计的黄金法则<br>36.高手神话<br>37.加班加点，事倍功半<br>38.如何使用bug跟踪器<br>39.代码的去芜存菁<br>40.安装我吧<br>41.进程间通信对应用程序响应的影响<br>42.保持构建的整洁<br>43.知道如何使用命令行工具<br>44.通晓两门以上编程语言<br>45.了解你的IDE<br>46.了解你的局限性<br>47.知道你下次提交的内容<br>48.大型、相关性的数据属于数据库<br>49.学习外语<br>50.要学会估算<br>51.学着说“Hello, World”<br>52.让你的项目能表达它自己<br>53.链接器并不神秘<br>54.临时解决方案的寿命<br>55.使接口易于正确使用，难于错误使用<br>56.让不可见的更加显眼<br>57.在并行系统中使用消息传递可获得更好的伸缩性<br>58.带给未来的消息<br>59.错失采用多态的机会<br>60.奇闻轶事：测试人员是你的朋友<br>61.二进制文件仅此一份<br>62.有代码有真相<br>63.拥有（及重构）构建脚本<br>64.结对编程，感受流程<br>65.特定领域类型胜过原始类型<br>66.预防错误<br>67.专业程序员<br>68.把一切都置于版本控制之下<br>69.放下鼠标，远离键盘<br>70.阅读代码<br>71.读懂人性<br>72.经常重新发明轮子<br>73.抗拒单件模式的诱惑<br>74.通向高性能之路布满了脏代码炸弹<br>75.简单来自于删减<br>76.单一职责原则<br>77.从Yes开始<br>78.请转回去做自动化、自动化、自动化<br>79.充分利用代码分析工具<br>80.为必需行为测试，而不是偶发行为<br>81.测试要严密而具体<br>82.在睡觉的时候（或度周末的时候）进行测试<br>83.软件开发的工程严密性来自测试<br>84.关于状态的思想<br>85.一人技短，二人技长<br>86.错上加错就是貌似正确（并且难以纠正）<br>87.我写代码为人人，人人为我写代码<br>88.Unix工具是你的好朋友<br>89.使用正确的算法和数据结构<br>90.冗长的日志会让你睡不安枕<br>91.WET掩盖了性能瓶颈<br>92.当程序员和测试人员开始合作的时候<br>93.编写代码时要像余生都要给它提供支持一样<br>94.使用实例编写小函数<br>95.测试为人而写<br>96.你应该关心你的代码<br>97.心口不一的客户</p>]]></content>
      
      
      <categories>
          
          <category> 代码之道 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phper成长</title>
      <link href="/2020/12/02/php/study/fazhan/"/>
      <url>/2020/12/02/php/study/fazhan/</url>
      
        <content type="html"><![CDATA[<h2 id="phper发展之路遇到的情况"><a href="#phper发展之路遇到的情况" class="headerlink" title="phper发展之路遇到的情况"></a>phper发展之路遇到的情况</h2><p>找准定位：我是谁、我在哪里？<br>怎样做好架构师：我要做什么？<br>如何搭建架构师知识体系：我该怎么做？<br>如果你想要往架构师的方向发展的话，那或许你可以看一下我分享给你的这份进阶路线图，主要针对1到5年及以内的PHP开发人员，里面的技术包涵了PHP高并发、分布式、Swoole协程编程、微服务、框架内核、高性能等技术，这些也是目前中大型互联网企业比较常用的技术，那么来详细看看。</p><h3 id="一：常见模式与框架"><a href="#一：常见模式与框架" class="headerlink" title="一：常见模式与框架"></a>一：常见模式与框架</h3><p>学习PHP技术体系，设计模式，流行的框架</p><p>常见的设计模式，编码必备<br>Laravel、ThinkPHP开发必不可少的最新框架<br>YII、Symfony4.1核心源码剖析</p><h3 id="二：微服务架构与性能优化"><a href="#二：微服务架构与性能优化" class="headerlink" title="二：微服务架构与性能优化"></a>二：微服务架构与性能优化</h3><p>业务体系越来越复杂，协程编程，PHP并发编程、MySQL底层优化是架构升级的必经之路，PHP性能优化和微服务相关的技术有哪些呢？</p><p>Tars分布式RPC框架<br>Swoft微服务框架<br>服务器性能优化<br>算法与数据结构</p><h3 id="三：工程化与分布式架构"><a href="#三：工程化与分布式架构" class="headerlink" title="三：工程化与分布式架构"></a>三：工程化与分布式架构</h3><p>任何脱离细节的PPT架构师都是耍流氓，向上能运筹帷幄，向下能解决一线开发问题，PHP架构师需深入工程化、高并发，高可用，海量数据，没有分布式的架构知识肯定是玩不转的：</p><p>Linux操作/shell脚本编程<br>docker容器/自动化部署<br>分布式缓存/消息中间件<br>分布式架构原理/高并发分流</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yaf</title>
      <link href="/2020/12/02/php/yaf/yaf/"/>
      <url>/2020/12/02/php/yaf/yaf/</url>
      
        <content type="html"><![CDATA[<h2 id="YAf框架学习"><a href="#YAf框架学习" class="headerlink" title="YAf框架学习"></a>YAf框架学习</h2><p>文档：<a href="https://www.laruence.com/manual/" target="_blank" rel="noopener">https://www.laruence.com/manual/</a><br>中文文档：<a href="http://www.php.net/manual/zh/book.yaf.php" target="_blank" rel="noopener">http://www.php.net/manual/zh/book.yaf.php</a><br>YAF框架入门教程 - <a href="https://www.jianshu.com/p/1460d2296f19" target="_blank" rel="noopener">https://www.jianshu.com/p/1460d2296f19</a><br>下载地址 - <a href="http://pecl.php.net/package/yaf" target="_blank" rel="noopener">http://pecl.php.net/package/yaf</a><br>Yaf - Manual - <a href="http://php.net/manual/en/book.yaf.php" target="_blank" rel="noopener">http://php.net/manual/en/book.yaf.php</a><br>Yaf(Yet Another Framework)用户手册 - <a href="http://www.laruence.com/manual/index.html" target="_blank" rel="noopener">http://www.laruence.com/manual/index.html</a><br>yaf程序模板生成工具 <a href="https://github.com/laruence/yaf/tree/master/tools/cg" target="_blank" rel="noopener">https://github.com/laruence/yaf/tree/master/tools/cg</a><br>PHP-Yaf执行流程-源码分析 - <a href="https://www.jianshu.com/p/130389235abc" target="_blank" rel="noopener">https://www.jianshu.com/p/130389235abc</a><br>数据库外扩 Medoo Guidebook - <a href="https://medoo.in/api/new" target="_blank" rel="noopener">https://medoo.in/api/new</a><br>yaf-example | Larave - <a href="https://laravel-china.org/articles/4308/yaf-example" target="_blank" rel="noopener">https://laravel-china.org/articles/4308/yaf-example</a><br>Medoo 1.6.1 API 手册(HTML单文件版本示例代码包内包含) - <a href="https://www.aiirobo.com/yaf/install/medoo_1.6.1.html" target="_blank" rel="noopener">https://www.aiirobo.com/yaf/install/medoo_1.6.1.html</a><br>YAF手册CHM文件下载(示例代码包内含) - <a href="https://www.aiirobo.com/yaf/install/yaf_manual.chm" target="_blank" rel="noopener">https://www.aiirobo.com/yaf/install/yaf_manual.chm</a></p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>用C语言开发的PHP框架, 相比原生的PHP, 几乎不会带来额外的性能开销.<br>所有的框架类, 不需要编译, 在PHP启动的时候加载, 并常驻内存.<br>更短的内存周转周期, 提高内存利用率, 降低内存占用率.<br>灵巧的自动加载. 支持全局和局部两种加载规则, 方便类库共享.<br>高性能的视图引擎.<br>高度灵活可扩展的框架, 支持自定义视图引擎, 支持插件, 支持自定义路由等等.<br>内建多种路由, 可以兼容目前常见的各种路由协议.<br>强大而又高度灵活的配置文件支持. 并支持缓存配置文件, 避免复杂的配置结构带来的性能损失.<br>在框架本身,对危险的操作习惯做了禁止.<br>更快的执行速度, 更少的内存占用.</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>维护成本高，要维护PHP扩展，需要熟练C开发和Zend Api。<br>目标用户群小，现在国内很多中小型站都是使用虚拟主机，并不能随意的给PHP添加扩展。<br>不像其他框架一样提供各种丰富功能的类库和各种优雅的写法，它只提供一个MVC的基本骨架。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>linux 平台下安装上海步骤如，首先使用 wget 下载yaf源代码，再使用 phpize 去安装扩展。假如你的服务器上安装了多个版本php，那么需要告诉phpize要建立基于哪个版本的扩展。通过使用–with-php-config=指定你使用哪个php版本，whereis php-config 可以提供定位信息，安装扩展后根据extension_dir配置一下php.ini以加载yaf.so。php 7.0建议使用 yaf 3.0。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;pecl.php.net&#x2F;get&#x2F;yaf-2.2.9.tgz</span><br><span class="line">tar -zxf yaf-2.2.9.tgz</span><br><span class="line">apt install php7.0-dev</span><br><span class="line">phpize</span><br><span class="line">.&#x2F;configure --with-php-config&#x3D;&#x2F;usr&#x2F;bin&#x2F;php-config</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">使用 php 5.6 可以下载 yaf 2.3.3，windows平台有DLL库，下载后解压到php扩展目录下，并相应设置 php.ini 的 extension。</span><br></pre></td></tr></table></figure><h3 id="程序基本结构"><a href="#程序基本结构" class="headerlink" title="程序基本结构"></a>程序基本结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">+ public</span><br><span class="line">  |- index.php &#x2F;&#x2F;入口文件</span><br><span class="line">  |- .htaccess &#x2F;&#x2F;重写规则    </span><br><span class="line">  |+ css</span><br><span class="line">  |+ img</span><br><span class="line">  |+ js</span><br><span class="line">+ conf</span><br><span class="line">  |- application.ini &#x2F;&#x2F;配置文件   </span><br><span class="line">+ application</span><br><span class="line">  |+ controllers</span><br><span class="line">     |- Index.php &#x2F;&#x2F;默认控制器</span><br><span class="line">  |+ views    </span><br><span class="line">     |+ index    &#x2F;&#x2F;控制器</span><br><span class="line">        |- index.phtml &#x2F;&#x2F;默认视图</span><br><span class="line">  |+ modules &#x2F;&#x2F;其他模块</span><br><span class="line">  |+ library &#x2F;&#x2F;本地类库</span><br><span class="line">  |+ models  &#x2F;&#x2F;model目录</span><br><span class="line">  |+ plugins &#x2F;&#x2F;插件目录</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列</title>
      <link href="/2020/11/20/queue/xiaoxi/"/>
      <url>/2020/11/20/queue/xiaoxi/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是消息队列"><a href="#什么是消息队列" class="headerlink" title="什么是消息队列"></a>什么是消息队列</h2><p>首先，我们聚焦在队列上。我们都知道队列是一种数据结构，支持先进先出。所以，消息队列就是一种可以储存消息的容器，当我们需要使用消息的时候可以取出消息供自己使用。并且是有顺序的。当生产者按照A, B, C…这样的顺序存入消息队列中，消费者也按照A, B, C…这样的顺序取出来进行消费。<br>消息队列是分布式中的消息中间件。使用它，主要是为了通过异步处理提高系统性能和削峰、降低系统耦合性。 虽然我们引入消息队列存在这些优点，但当一个系统加入一个新东西时，必然会带来一些问题。例如消费的顺序性，如何保证消息不被重复消费？如何保证消息的可靠性传输（如何处理消息丢失的问题）？…等等问题。所以说使用消息队列也不是十全十美的，使用它也会让系统可用性降低、复杂度提高，另外还需要我们保障一致性等问题。<br>目前流行的MQ就有RabbitMQ, RocketMQ, Kafka, ActiveMQ。各种MQ都有其对应的使用场景，等下在后面也会一一对比这些消息队列。</p><h2 id="为什么要使用消息队列"><a href="#为什么要使用消息队列" class="headerlink" title="为什么要使用消息队列"></a>为什么要使用消息队列</h2><p>总体而言，使用消息队列有两点好处。</p><p>通过异步处理提高系统性能（削峰、减少响应所需时间);<br>降低系统耦合性。<br>(1) 通过异步处理提高系统性能（削峰、减少响应所需时间);<br>(2) 降低系统耦合性。</p>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>goland面试题</title>
      <link href="/2020/11/20/go/mianshi/sql/"/>
      <url>/2020/11/20/go/mianshi/sql/</url>
      
        <content type="html"><![CDATA[<p>golang面试题整理<br>１、go的调度<br>２、go struct能不能比较</p><p>因为是强类型语言，所以不同类型的结构不能作比较，但是同一类型的实例值是可以比较的，实例不可以比较，因为是指针类型<br>３、go defer（for defer），先进后出，后进先出</p><p>func b() {<br>    for i := 0; i &lt; 4; i++ {<br>        defer fmt.Print(i)<br>    }<br>}<br>４、select可以用于什么，常用语gorotine的完美退出</p><p>golang 的 select 就是监听 IO 操作，当 IO 操作发生时，触发相应的动作<br>每个case语句里必须是一个IO操作，确切的说，应该是一个面向channel的IO操作<br>５、context包的用途<br>Context通常被译作上下文，它是一个比较抽象的概念，其本质，是【上下上下】存在上下层的传递，上会把内容传递给下。在Go语言中，程序单元也就指的是Goroutine</p><p>６、client如何实现长连接</p><pre><code>server是设置超时时间，for循环遍历的</code></pre><p>７、主协程如何等其余协程完再操作</p><p>使用channel进行通信，context,select<br>８、slice，len，cap，共享，扩容</p><pre><code>append函数，因为slice底层数据结构是，由数组、len、cap组成，所以，在使用append扩容时，会查看数组后面有没有连续内存快，有就在后面添加，没有就重新生成一个大的素组</code></pre><p>９、map如何顺序读取</p><p>map不能顺序读取，是因为他是无序的，想要有序读取，首先的解决的问题就是，把ｋｅｙ变为有序，所以可以把key放入切片，对切片进行排序，遍历切片，通过key取值。<br>１０、实现set</p><p>type inter interface{}<br>type Set struct {<br>    m map[inter]bool<br>    sync.RWMutex<br>}</p><p>func New() *Set {<br>    return &amp;Set{<br>    m: map[inter]bool{},<br>    }<br>}<br>func (s *Set) Add(item inter) {<br>    s.Lock()<br>    defer s.Unlock()<br>    s.m[item] = true<br>}<br>１１、实现消息队列（多生产者，多消费者）</p><p>使用切片加锁可以实现<br>１２、大文件排序</p><p>归并排序，分而治之,拆分为小文件，在排序<br>１３、基本排序，哪些是稳定的<br>１４、http get跟head</p><p>HEAD和GET本质是一样的，区别在于HEAD不含有呈现数据，而仅仅是HTTP头信息。有的人可能觉得这个方法没什么用，其实不是这样的。想象一个业务情景：欲判断某个资源是否存在，我们通常使用GET，但这里用HEAD则意义更加明确。<br>１５、http 401,403<br>400 bad request，请求报文存在语法错误<br>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息<br>403 forbidden，表示对请求资源的访问被服务器拒绝<br>404 not found，表示在服务器上没有找到请求的资源<br>１６、http keep-alive<br>client发出的HTTP请求头需要增加Connection:keep-alive字段<br>Web-Server端要能识别Connection:keep-alive字段，并且在http的response里指定Connection:keep-alive字段，告诉client，我能提供keep-alive服务，并且”应允”client我暂时不会关闭socket连接<br>１７、http能不能一次连接多次请求，不等后端返回<br>http本质上市使用socket连接，因此发送请求，接写入tcp缓冲，是可以多次进行的，这也是http是无状态的原因<br>１８、tcp与udp区别，udp优点，适用场景<br>tcp传输的是数据流，而udp是数据包，tcp会进过三次握手，udp不需要<br>１９、time-wait的作用<br>２０、数据库如何建索引<br>２１、孤儿进程，僵尸进程<br>２２、死锁条件，如何避免<br>２３、linux命令，查看端口占用，cpu负载，内存占用，如何发送信号给一个进程<br>２４、git文件版本，使用顺序，merge跟rebase<br>２5、git文件版本常用操作命令<br>２６、Slice与数组区别，Slice底层结构<br>２７、项目里的微信支付这块，在支付完微信通知这里，收到两次微信相同的支付通知，怎么防止重复消费（类似接口的幂等性），说了借助Redis或者数据库的事务<br>２８、项目里的消息推送怎么做的（业务有关）<br>２９、Go的反射包怎么找到对应的方法（这里忘记怎么问的，直接说不会，只用了DeepEqual，简单讲了DeepEqual）<br>３０、Redis基本数据结构<br>３１、Redis的List用过吗？底层怎么实现的？知道但是没用过，不知道怎么实现<br>３２、Mysql的索引有几种，时间复杂度<br>３３、InnoDb是表锁还是行锁，为什么（这里答不出来为什么，只说了行锁）<br>３４、Go的channel（有缓冲和无缓冲）<br>３５、退出程序时怎么防止channel没有消费完，这里一开始有点没清楚面试官问的，然后说了监听中断信号，做退出前的处理，然后面试官说不是这个意思，然后说发送前先告知长度，长度要是不知道呢？close channel下游会受到0值，可以利用这点（这里也有点跟面试官说不明白）<br>３６、用过什么消息中间件之类吗？没有<br>３７、有什么问题吗？评价？后面还有面试，后面再问吧<br>３８、生产者消费者模式，手写代码（Go直接使用channel实现很简单，还想着面试官会不会不让用channel实现，不用channel的可以使用数组加条件变量），channel缓冲长度怎么决定，怎么控制上游生产速度过快，这里没说出解决方案，只是简单说了channel长度可以与上下游的速度比例成线性关系，面试官说这是一种解决方案<br>３９、手写循环队列<br>４０、写的循环队列是不是线程安全，不是，怎么保证线程安全，加锁，效率有点低啊，然后面试官就提醒Go推崇原子操作和channel<br>４１、写完代码面试官说后面问的问题回答就可以，不知道的话没关系<br>４２、Linux会不会，只会几个命令，面试官就说一共也就一百多个命令<br>４３、TimeWait和CloseWait原因<br>４４、线段树了解吗？不了解，字典树？了解<br>４５、看过啥源码，nsq（Go的消息中间件），简单问了我里面的waitgroup包证明我看过<br>４６、sync.Pool用过吗，为什么使用，对象池，避免频繁分配对象（GC有关），那里面的对象是固定的吗？不清楚，没看过这个的源码<br>４７、有什么问题吗？评价？基础不错，Linux尚缺，Go的理解不够深入，高级数据结构不了解，优点是看源码<br>４８、后面面试官讲了他们做的东西，主要是广告部分，说日均数据量至少百万以上，多达上亿，高并发使用Go支撑，有微服务，服务治理，说我需要学的东西挺多的<br>４９、证明二叉树的叶子节点跟度数为2的节点的关系<br>５０、唯一索引和主键索引<br>５１、智能指针<br>５２、字符串解析为数字（考虑浮点型）<br>５３、单点登录，tcp粘包<br>５４、手写洗牌<br>５５、处理粘包断包实现，面试官以为是negle算法有关，解释了下negle跟糊涂窗口综合征有关，然后面试官觉得其他项目是crud就没问了<br>５６、goroutine调度用了什么系统调用，这个不会，面试官想从go问到操作系统，然后以为**<em>作系统基础不好，就问了操作系统问题<br>５７、进程虚拟空间分布，全局变量放哪里？答上来了，操作系统就不问了<br>５８、有没有网络编程，有，怎么看连接状态？netstat，有哪些？ESTABLISHED，LISTEN等等，有异常情况吗？TIME_WAIT很多，为什么？大量短链接<br>５９、几种基本排序算法说一下，问了堆的时间复杂度，稳定性，为什么不稳定<br>６０、 topk问题，海量数据topk（回答成切分多次加载内存，然后用维持k长度的有序链表，然后被说时间复杂度不好，提示说还是用堆，然后哦哦哦对）<br>最长连续字串和，这里我说的解决方案没用dp（对dp不熟），面试官一直引导我dp，还是不会<br>６１、什么是主键<br>６２、联合索引和唯一索引<br>６２、越多的索引越好吗？<br>６３、建立索引要注意什么？<br>６４、进程和线程区别？<br>６５、死锁？<br>６６、tcp三次握手<br>６７、http，https<br>６８、状态码401,301,302,201<br>６９、项目我说只有一台机子，所以用的单机部署，面试官说单机也可以部署多个，有什么方法吗？我说docker，问docker有哪些网络，不熟，dockerfile关键字，只答几个。顺便扯了下nginx转发。<br>７０、数据库隔离级别，提交读会造成什么<br>７１、go调度<br>７２、 goroutine泄漏有没有处理，设置timeout，select加定时器<br>７３、mysql高可用的方案<br>７４、进程线程区别<br>７５、排序算法以及时间复杂度<br>７６、怎么学习go<br>７７、go的线程，给他讲了跟goroutine调度<br>７８、io模型，同步阻塞，同步非阻塞，异步<br>７９、cookie和session<br>８０、接口kps测试<br>８１、redis排行榜数据结构（跳跃表），查询时间复杂度<br>８２、redis分布式，如何减少同步延迟<br>８３、mysql能实现redis的功能吗<br>８４、平时怎么学习？<br>８５、看什么书？<br>８６、兴趣爱好<br>８７、看过google四篇分布式论文吗，没看过<br>８９、cap理论，举例<br>９０、LRU算法，LFU<br>９１、讲讲怎么理解网络编程<br>９２、go使用踩过什么坑（for range，数据库连接defer close）<br>９３、go优缺点<br>９５、go的值传递和引用<br>９６、慢查询<br>９７、为什么使用pg<br>９８、redis的数据类型<br>９９、所有左叶子节点的和<br>１００、m个n大小的有序数组求并集，一开始是2路归并，求时间复杂度，后来在面试官提醒直接m路归并，求时间复杂度<br>１０１、static关键字，还有其他关键字吗<br>１０２、hash表设计，线程安全？<br>１０３、 线程自己独享什么<br>１０４、网络编程过程<br>１０５、select、epoll<br>１０６、看什么书<br>１０７、排行榜怎么实现<br>１０８、go的锁如何实现，用了什么cpu指令<br>１０９、go的runtime如何实现<br>１１０、看过sql的连接池实现吗<br>１１１、ctx包了解吗？有什么用？<br>１１２、go什么情况下会发生内存泄漏？（他说ctx没有cancel的时候，这个真不知道）<br>１１３、怎么实现协程完美退出？<br>１１４、智力题：1000瓶酒中有1瓶毒酒，10只老鼠，7天后毒性才发作，第8天要卖了，怎么求那瓶毒酒？<br>１１５、简单dp题，n</em>n矩阵从左上角到右下角有多少种走法（只限往下和往右走）<br>１１６、用channel实现定时器？（实际上是两个协程同步）<br>１１７、go为什么高并发好？讲了go的调度模型<br>１１８、操作系统内存管理？进程通讯，为什么共享存储区效率最高<br>１１９、实现一个hashmap，解决hash冲突的方法，解决hash倾斜的方法<br>１２０、怎么理解go的interface<br>１２１、100亿个数选top5，小根堆<br>１２２、数组和为n的数组对<br>１２３、最大连续子数组和<br>１２４、redis容灾，备份，扩容<br>１２５、跳跃表，为什么使用跳跃表而不使用红黑树<br>１２６、输入url后涉及什么<br>１２７、tcp怎么找到哪个套接字<br>１２８、ipc方式，共享存储区原理<br>１３０、进程虚拟空间布局<br>１３１、进程状态转换<br>１３２、线程的栈在哪里分配<br>１３３、多个线程读，一个线程写一个int32会不会有问题，int64呢（这里面试官后来说了要看数据总线的位数，32位的话写int32没问题，int64就有问题）<br>１３４、判断二叉树是否为满二叉树<br>１３５、lru实现<br>１３６、一个大整数（字符串形式表示的），移动字符求比它大的数中最小的<br>１３７、点赞系统设计</p>]]></content>
      
      
      <categories>
          
          <category> goland </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 面对主从不同步时解决方案</title>
      <link href="/2020/11/13/php/change/zhucong/"/>
      <url>/2020/11/13/php/change/zhucong/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>实际工作中，我们 插入/更新/删除 链接的是 主库，查询 链接的是 从库。<br>有时会遇到插入的数据需要及时展示，而这时数据库主从同步发生了延迟。</p><h2 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h2><p>在可能发生主从延迟的地方，调整成查询主库。</p><h2 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h2><p>在可能发生主从延迟的地方，对插入的数据做缓存，当从库查询失败的时候查询缓存。<br>此方案需要每个开发者了解缓存的数据格式，以及数据变化时及时更新缓存。<br>缓存做超时限制。</p><h2 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h2><p>在可能发生主从延迟的地方，对插入的数据ID做缓存，当从库查询失败的时候，根据数据ID去主库查询数据。<br>缓存在超时限制。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php代码整洁之道</title>
      <link href="/2020/10/25/php/design/zhengjiezhidao/"/>
      <url>/2020/10/25/php/design/zhengjiezhidao/</url>
      
        <content type="html"><![CDATA[<h1 id="Clean-Code-PHP"><a href="#Clean-Code-PHP" class="headerlink" title="Clean Code PHP"></a>Clean Code PHP</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#介绍">介绍</a></li><li><a href="#变量">变量</a><ul><li><a href="#使用见字知意的变量名">使用见字知意的变量名</a></li><li><a href="#同一个实体要用相同的变量名">同一个实体要用相同的变量名</a></li><li><a href="#使用便于搜索的名称-part-1">使用便于搜索的名称 (part 1)</a></li><li><a href="#使用便于搜索的名称-part-2">使用便于搜索的名称 (part 2)</a></li><li><a href="#使用自解释型变量">使用自解释型变量</a></li><li><a href="#避免深层嵌套尽早返回-part-1">避免深层嵌套，尽早返回 (part 1)</a></li><li><a href="#避免深层嵌套尽早返回-part-2">避免深层嵌套，尽早返回 (part 2)</a></li><li><a href="#少用无意义的变量名">少用无意义的变量名</a></li><li><a href="#不要添加不必要上下文">不要添加不必要上下文</a></li><li><a href="#合理使用参数默认值没必要在方法里再做默认值检测">合理使用参数默认值，没必要在方法里再做默认值检测</a></li></ul></li><li><a href="#表达式">表达式</a><ul><li><a href="#使用恒等式">使用恒等式</a></li></ul></li><li><a href="#函数">函数</a><ul><li><a href="#函数参数-最好少于2个">函数参数（最好少于2个）</a></li><li><a href="#函数应该只做一件事">函数应该只做一件事</a></li><li><a href="#函数名应体现他做了什么事">函数名应体现他做了什么事</a></li><li><a href="#函数里应当只有一层抽象abstraction">函数里应当只有一层抽象abstraction</a></li><li><a href="#不要用flag作为函数的参数">不要用flag作为函数的参数</a></li><li><a href="#避免副作用">避免副作用</a></li><li><a href="#不要写全局函数">不要写全局函数</a></li><li><a href="#不要使用单例模式">不要使用单例模式</a></li><li><a href="#封装条件语句">封装条件语句</a></li><li><a href="#避免用反义条件判断">避免用反义条件判断</a></li><li><a href="#避免条件判断">避免条件判断</a></li><li><a href="#避免类型检查-part-1">避免类型检查 (part 1)</a></li><li><a href="#避免类型检查-part-2">避免类型检查 (part 2)</a></li><li><a href="#移除僵尸代码">移除僵尸代码</a></li></ul></li><li><a href="#对象和数据结构">对象和数据结构 Objects and Data Structures</a><ul><li><a href="#使用-getters-和-setters">使用 getters 和 setters Use object encapsulation</a></li><li><a href="#给对象使用私有或受保护的成员变量">给对象使用私有或受保护的成员变量</a></li></ul></li><li><a href="#类">类</a><ul><li><a href="#少用继承多用组合">少用继承多用组合</a></li><li><a href="#避免连贯接口">避免连贯接口</a></li><li><a href="#推荐使用-final-类">推荐使用 final 类</a></li></ul></li><li><a href="#solid">类的SOLID原则 SOLID</a><ul><li><a href="#单一职责原则">S: 单一职责原则 Single Responsibility Principle (SRP)</a></li><li><a href="#开闭原则">O: 开闭原则 Open/Closed Principle (OCP)</a></li><li><a href="#里氏替换原则">L: 里氏替换原则 Liskov Substitution Principle (LSP)</a></li><li><a href="#接口隔离原则">I: 接口隔离原则 Interface Segregation Principle (ISP)</a></li><li><a href="#依赖倒置原则">D: 依赖倒置原则 Dependency Inversion Principle (DIP)</a></li></ul></li><li><a href="#别写重复代码-dry">别写重复代码 (DRY)</a></li><li><a href="#翻译">翻译</a></li></ol><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文参考自 Robert C. Martin的<a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882" target="_blank" rel="noopener"><em>Clean Code</em></a>  书中的软件工程师的原则<br>,适用于PHP。 这不是风格指南。 这是一个关于开发可读、可复用并且可重构的PHP软件指南。</p><p>并不是这里所有的原则都得遵循，甚至很少的能被普遍接受。 这些虽然只是指导，但是都是<em>Clean Code</em>作者多年总结出来的。</p><p>本文受到 <a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank" rel="noopener">clean-code-javascript</a> 的启发</p><p>虽然很多开发者还在使用PHP5，但是本文中的大部分示例的运行环境需要PHP 7.1+。</p><h2 id="翻译说明"><a href="#翻译说明" class="headerlink" title="翻译说明"></a>翻译说明</h2><p>翻译完成度100%，最后更新时间2020-10-26。本文由 php-cpm 基于 <a href="https://github.com/yangweijie/clean-code-php" target="_blank" rel="noopener">yangweijie版本</a> 的<a href="https://github.com/jupeter/clean-code-php" target="_blank" rel="noopener">clean-code-php</a>翻译并同步大量原文内容。</p><p>原文更新频率较高，我的翻译方法是直接用文本比较工具逐行对比。优先保证文字内容是最新的，再逐步提升翻译质量。</p><p>阅读过程中如果遇到各种链接失效、内容老旧、术语使用错误和其他翻译错误等问题，欢迎大家积极提交PR。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h2><h3 id="使用见字知意的变量名"><a href="#使用见字知意的变量名" class="headerlink" title="使用见字知意的变量名"></a>使用见字知意的变量名</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ymdstr = $moment-&gt;format(<span class="string">'y-m-d'</span>);</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$currentDate = $moment-&gt;format(<span class="string">'y-m-d'</span>);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="同一个实体要用相同的变量名"><a href="#同一个实体要用相同的变量名" class="headerlink" title="同一个实体要用相同的变量名"></a>同一个实体要用相同的变量名</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getUserInfo();</span><br><span class="line">getUserData();</span><br><span class="line">getUserRecord();</span><br><span class="line">getUserProfile();</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getUser();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="使用便于搜索的名称-part-1"><a href="#使用便于搜索的名称-part-1" class="headerlink" title="使用便于搜索的名称 (part 1)"></a>使用便于搜索的名称 (part 1)</h3><p>写代码是用来读的。所以写出可读性高、便于搜索的代码至关重要。<br>命名变量时如果没有有意义、不好理解，那就是在伤害读者。<br>请让你的代码便于搜索。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 448 ™ 干啥的?</span></span><br><span class="line">$result = $serializer-&gt;serialize($data, <span class="number">448</span>);</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$json = $serializer-&gt;serialize($data, JSON_UNESCAPED_SLASHES | JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);</span><br></pre></td></tr></table></figure><h3 id="使用便于搜索的名称-part-2"><a href="#使用便于搜索的名称-part-2" class="headerlink" title="使用便于搜索的名称 (part 2)"></a>使用便于搜索的名称 (part 2)</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 7 ™ 干啥的?</span></span><br><span class="line">    <span class="keyword">public</span> $access = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 ™ 干啥的?</span></span><br><span class="line"><span class="keyword">if</span> ($user-&gt;access &amp; <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里会发生什么?</span></span><br><span class="line">$user-&gt;access ^= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> ACCESS_READ = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> ACCESS_CREATE = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> ACCESS_UPDATE = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> ACCESS_DELETE = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认情况下用户 具有读、写和更新权限</span></span><br><span class="line">    <span class="keyword">public</span> $access = <span class="keyword">self</span>::ACCESS_READ | <span class="keyword">self</span>::ACCESS_CREATE | <span class="keyword">self</span>::ACCESS_UPDATE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($user-&gt;access &amp; User::ACCESS_UPDATE) &#123;</span><br><span class="line">    <span class="comment">// do edit ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁用创建权限</span></span><br><span class="line">$user-&gt;access ^= User::ACCESS_CREATE;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="使用自解释型变量"><a href="#使用自解释型变量" class="headerlink" title="使用自解释型变量"></a>使用自解释型变量</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$address = <span class="string">'One Infinite Loop, Cupertino 95014'</span>;</span><br><span class="line">$cityZipCodeRegex = <span class="string">'/^[^,]+,\s*(.+?)\s*(\d&#123;5&#125;)$/'</span>;</span><br><span class="line">preg_match($cityZipCodeRegex, $address, $matches);</span><br><span class="line"></span><br><span class="line">saveCityZipCode($matches[<span class="number">1</span>], $matches[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p><strong>不错:</strong></p><p>好一些，但强依赖于正则表达式的熟悉程度</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$address = <span class="string">'One Infinite Loop, Cupertino 95014'</span>;</span><br><span class="line">$cityZipCodeRegex = <span class="string">'/^[^,]+,\s*(.+?)\s*(\d&#123;5&#125;)$/'</span>;</span><br><span class="line">preg_match($cityZipCodeRegex, $address, $matches);</span><br><span class="line"></span><br><span class="line">[, $city, $zipCode] = $matches;</span><br><span class="line">saveCityZipCode($city, $zipCode);</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><p>使用带名字的子规则，不用懂正则也能看的懂</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$address = <span class="string">'One Infinite Loop, Cupertino 95014'</span>;</span><br><span class="line">$cityZipCodeRegex = <span class="string">'/^[^,]+,\s*(?&lt;city&gt;.+?)\s*(?&lt;zipCode&gt;\d&#123;5&#125;)$/'</span>;</span><br><span class="line">preg_match($cityZipCodeRegex, $address, $matches);</span><br><span class="line"></span><br><span class="line">saveCityZipCode($matches[<span class="string">'city'</span>], $matches[<span class="string">'zipCode'</span>]);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免深层嵌套，尽早返回-part-1"><a href="#避免深层嵌套，尽早返回-part-1" class="headerlink" title="避免深层嵌套，尽早返回 (part 1)"></a>避免深层嵌套，尽早返回 (part 1)</h3><p>太多的if else语句通常会导致你的代码难以阅读，直白优于隐晦</p><p><strong>糟糕:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isShopOpen</span><span class="params">($day)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($day) &#123;</span><br><span class="line">        <span class="keyword">if</span> (is_string($day)) &#123;</span><br><span class="line">            $day = strtolower($day);</span><br><span class="line">            <span class="keyword">if</span> ($day === <span class="string">'friday'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ($day === <span class="string">'saturday'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">elseif</span> ($day === <span class="string">'sunday'</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isShopOpen</span><span class="params">(string $day)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($day)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $openingDays = [</span><br><span class="line">        <span class="string">'friday'</span>, <span class="string">'saturday'</span>, <span class="string">'sunday'</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> in_array(strtolower($day), $openingDays, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免深层嵌套，尽早返回-part-2"><a href="#避免深层嵌套，尽早返回-part-2" class="headerlink" title="避免深层嵌套，尽早返回 (part 2)"></a>避免深层嵌套，尽早返回 (part 2)</h3><p><strong>糟糕的:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">(int $n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($n &lt; <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($n !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($n !== <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> fibonacci($n - <span class="number">1</span>) + fibonacci($n - <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Not supported'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span><span class="params">(int $n)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($n === <span class="number">0</span> || $n === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> $n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($n &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Not supported'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fibonacci($n - <span class="number">1</span>) + fibonacci($n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="少用无意义的变量名"><a href="#少用无意义的变量名" class="headerlink" title="少用无意义的变量名"></a>少用无意义的变量名</h3><p>别让读你的代码的人猜你写的变量是什么意思。<br>写清楚好过模糊不清。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$l = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; count($l); $i++) &#123;</span><br><span class="line">    $li = $l[$i];</span><br><span class="line">    doStuff();</span><br><span class="line">    doSomeOtherStuff();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 等等, `$li` 又代表什么?</span></span><br><span class="line">    dispatch($li);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$locations = [<span class="string">'Austin'</span>, <span class="string">'New York'</span>, <span class="string">'San Francisco'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($locations <span class="keyword">as</span> $location) &#123;</span><br><span class="line">    doStuff();</span><br><span class="line">    doSomeOtherStuff();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    dispatch($location);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="不要添加不必要上下文"><a href="#不要添加不必要上下文" class="headerlink" title="不要添加不必要上下文"></a>不要添加不必要上下文</h3><p>如果从你的类名、对象名已经可以得知一些信息，就别再在变量名里重复。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $carMake;</span><br><span class="line">    <span class="keyword">public</span> $carModel;</span><br><span class="line">    <span class="keyword">public</span> $carColor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $make;</span><br><span class="line">    <span class="keyword">public</span> $model;</span><br><span class="line">    <span class="keyword">public</span> $color;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="合理使用参数默认值，没必要在方法里再做默认值检测"><a href="#合理使用参数默认值，没必要在方法里再做默认值检测" class="headerlink" title="合理使用参数默认值，没必要在方法里再做默认值检测"></a>合理使用参数默认值，没必要在方法里再做默认值检测</h3><p><strong>不好:</strong></p><p>不好，<code>$breweryName</code> 可能为 <code>NULL</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span><span class="params">($breweryName = <span class="string">'Hipster Brew Co.'</span>)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>还行:</strong></p><p>比上一个好理解一些，但最好能控制变量的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span><span class="params">($name = null)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $breweryName = $name ?: <span class="string">'Hipster Brew Co.'</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><p>如果你的程序只支持 PHP 7+, 那你可以用 <a href="http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration" target="_blank" rel="noopener">type hinting</a> 保证变量 <code>$breweryName</code> 不是 <code>NULL</code>.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMicrobrewery</span><span class="params">(string $breweryName = <span class="string">'Hipster Brew Co.'</span>)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><h3 id="使用恒等式"><a href="#使用恒等式" class="headerlink" title="使用恒等式"></a><a href="http://php.net/manual/en/language.operators.comparison.php" target="_blank" rel="noopener">使用恒等式</a></h3><p><strong>不好:</strong></p><p>简易对比会将字符串转为整形</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="string">'42'</span>;</span><br><span class="line">$b = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( $a != $b ) &#123;</span><br><span class="line">   <span class="comment">//这里始终执行不到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对比 $a != $b 返回了 <code>FALSE</code> 但应该返回 <code>TRUE</code> !<br>字符串 ‘42’ 跟整数 42 不相等</p><p><strong>好:</strong></p><p>使用恒等判断检查类型和数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$a = <span class="string">'42'</span>;</span><br><span class="line">$b = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($a !== $b) &#123;</span><br><span class="line">    <span class="comment">// The expression is verified</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The comparison <code>$a !== $b</code> returns <code>TRUE</code>.</p><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="Null-coalescing-operator"><a href="#Null-coalescing-operator" class="headerlink" title="Null coalescing operator"></a>Null coalescing operator</h3><p>Null coalescing is a new operator <a href="https://www.php.net/manual/en/migration70.new-features.php" target="_blank" rel="noopener">introduced in PHP 7</a>. The null coalescing operator <code>??</code> has been added as syntactic sugar for the common case of needing to use a ternary in conjunction with <code>isset()</code>. It returns its first operand if it exists and is not <code>null</code>; otherwise it returns its second operand.</p><p><strong>Bad:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_GET[<span class="string">'name'</span>])) &#123;</span><br><span class="line">    $name = $_GET[<span class="string">'name'</span>];</span><br><span class="line">&#125; <span class="keyword">elseif</span> (<span class="keyword">isset</span>($_POST[<span class="string">'name'</span>])) &#123;</span><br><span class="line">    $name = $_POST[<span class="string">'name'</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $name = <span class="string">'nobody'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$name = $_GET[<span class="string">'name'</span>] ?? $_POST[<span class="string">'name'</span>] ?? <span class="string">'nobody'</span>;</span><br></pre></td></tr></table></figure><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数参数（最好少于2个）"><a href="#函数参数（最好少于2个）" class="headerlink" title="函数参数（最好少于2个）"></a>函数参数（最好少于2个）</h3><p>限制函数参数个数极其重要，这样测试你的函数容易点。有超过3个可选参数参数导致一个爆炸式组合增长，你会有成吨独立参数情形要测试。</p><p>无参数是理想情况。1个或2个都可以，最好避免3个。再多就需要加固了。通常如果你的函数有超过两个参数，说明他要处理的事太多了。 如果必须要传入很多数据，建议封装一个高级别对象作为参数。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Questionnaire</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        string $firstname,</span></span></span><br><span class="line"><span class="function"><span class="params">        string $lastname,</span></span></span><br><span class="line"><span class="function"><span class="params">        string $patronymic,</span></span></span><br><span class="line"><span class="function"><span class="params">        string $region,</span></span></span><br><span class="line"><span class="function"><span class="params">        string $district,</span></span></span><br><span class="line"><span class="function"><span class="params">        string $city,</span></span></span><br><span class="line"><span class="function"><span class="params">        string $phone,</span></span></span><br><span class="line"><span class="function"><span class="params">        string $email</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $firstname;</span><br><span class="line">    <span class="keyword">private</span> $lastname;</span><br><span class="line">    <span class="keyword">private</span> $patronymic;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $firstname, string $lastname, string $patronymic)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;firstname = $firstname;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;lastname = $lastname;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;patronymic = $patronymic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">City</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $region;</span><br><span class="line">    <span class="keyword">private</span> $district;</span><br><span class="line">    <span class="keyword">private</span> $city;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $region, string $district, string $city)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;region = $region;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;district = $district;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;city = $city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Contact</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $phone;</span><br><span class="line">    <span class="keyword">private</span> $email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $phone, string $email)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;phone = $phone;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = $email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getters ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Questionnaire</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Name $name, City $city, Contact $contact)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="函数名应体现他做了什么事"><a href="#函数名应体现他做了什么事" class="headerlink" title="函数名应体现他做了什么事"></a>函数名应体现他做了什么事</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mail(<span class="keyword">$this</span>-&gt;to, <span class="keyword">$this</span>-&gt;subject, <span class="keyword">$this</span>-&gt;body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$message = <span class="keyword">new</span> Email(...);</span><br><span class="line"><span class="comment">// 啥？handle处理一个消息干嘛了？是往一个文件里写吗？</span></span><br><span class="line">$message-&gt;handle();</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">send</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mail(<span class="keyword">$this</span>-&gt;to, <span class="keyword">$this</span>-&gt;subject, <span class="keyword">$this</span>-&gt;body);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$message = <span class="keyword">new</span> Email(...);</span><br><span class="line"><span class="comment">// 简单明了</span></span><br><span class="line">$message-&gt;send();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="函数里应当只有一层抽象abstraction"><a href="#函数里应当只有一层抽象abstraction" class="headerlink" title="函数里应当只有一层抽象abstraction"></a>函数里应当只有一层抽象abstraction</h3><p>当你抽象层次过多时时，函数处理的事情太多了。需要拆分功能来提高可重用性和易用性，以便简化测试。<br>（译者注：这里从示例代码看应该是指嵌套过多）</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterPHPAlternative</span><span class="params">(string $code)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $regexes = [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $statements = explode(<span class="string">' '</span>, $code);</span><br><span class="line">    $tokens = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ast = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</span><br><span class="line">        <span class="comment">// lex...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</span><br><span class="line">        <span class="comment">// parse...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>坏:</strong></p><p>我们把一些方法从循环中提取出来，但是<code>parseBetterJSAlternative()</code>方法还是很复杂，而且不利于测试。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenize</span><span class="params">(string $code)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $regexes = [</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $statements = explode(<span class="string">' '</span>, $code);</span><br><span class="line">    $tokens = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</span><br><span class="line">            $tokens[] = <span class="comment">/* ... */</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $tokens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lexer</span><span class="params">(array $tokens)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $ast = [];</span><br><span class="line">    <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</span><br><span class="line">        $ast[] = <span class="comment">/* ... */</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $ast;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseBetterPHPAlternative</span><span class="params">(string $code)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tokens = tokenize($code);</span><br><span class="line">    $ast = lexer($tokens);</span><br><span class="line">    <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</span><br><span class="line">        <span class="comment">// 解析逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><p>最好的解决方案是把 <code>parseBetterPHPAlternative()</code>方法的依赖移除。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tokenizer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tokenize</span><span class="params">(string $code)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $regexes = [</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        $statements = explode(<span class="string">' '</span>, $code);</span><br><span class="line">        $tokens = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($regexes <span class="keyword">as</span> $regex) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($statements <span class="keyword">as</span> $statement) &#123;</span><br><span class="line">                $tokens[] = <span class="comment">/* ... */</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $tokens;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lexer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">lexify</span><span class="params">(array $tokens)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $ast = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($tokens <span class="keyword">as</span> $token) &#123;</span><br><span class="line">            $ast[] = <span class="comment">/* ... */</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $ast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BetterPHPAlternative</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $tokenizer;</span><br><span class="line">    <span class="keyword">private</span> $lexer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Tokenizer $tokenizer, Lexer $lexer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;tokenizer = $tokenizer;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;lexer = $lexer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span><span class="params">(string $code)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $tokens = <span class="keyword">$this</span>-&gt;tokenizer-&gt;tokenize($code);</span><br><span class="line">        $ast = <span class="keyword">$this</span>-&gt;lexer-&gt;lexify($tokens);</span><br><span class="line">        <span class="keyword">foreach</span> ($ast <span class="keyword">as</span> $node) &#123;</span><br><span class="line">            <span class="comment">// 解析逻辑...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="不要用flag作为函数的参数"><a href="#不要用flag作为函数的参数" class="headerlink" title="不要用flag作为函数的参数"></a>不要用flag作为函数的参数</h3><p>flag就是在告诉大家，这个方法里处理很多事。前面刚说过，一个函数应当只做一件事。 把不同flag的代码拆分到多个函数里。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span><span class="params">(string $name, bool $temp = false)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($temp) &#123;</span><br><span class="line">        touch(<span class="string">'./temp/'</span>.$name);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        touch($name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFile</span><span class="params">(string $name)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    touch($name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTempFile</span><span class="params">(string $name)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    touch(<span class="string">'./temp/'</span>.$name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免副作用"><a href="#避免副作用" class="headerlink" title="避免副作用"></a>避免副作用</h3><p>一个函数做了比获取一个值然后返回另外一个值或值们会产生副作用如果。副作用可能是写入一个文件，修改某些全局变量或者偶然的把你全部的钱给了陌生人。</p><p>现在，你的确需要在一个程序或者场合里要有副作用，像之前的例子，你也许需要写一个文件。你想要做的是把你做这些的地方集中起来。不要用几个函数和类来写入一个特定的文件。用一个服务来做它，一个只有一个。</p><p>重点是避免常见陷阱比如对象间共享无结构的数据，使用可以写入任何的可变数据类型，不集中处理副作用发生的地方。如果你做了这些你就会比大多数程序员快乐。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global variable referenced by following function.</span></span><br><span class="line"><span class="comment">// If we had another function that used this name, now it'd be an array and it could break it.</span></span><br><span class="line">$name = <span class="string">'Ryan McDermott'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $name;</span><br><span class="line"></span><br><span class="line">    $name = explode(<span class="string">' '</span>, $name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">splitIntoFirstAndLastName();</span><br><span class="line"></span><br><span class="line">var_dump($name); <span class="comment">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitIntoFirstAndLastName</span><span class="params">(string $name)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> explode(<span class="string">' '</span>, $name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$name = <span class="string">'Ryan McDermott'</span>;</span><br><span class="line">$newName = splitIntoFirstAndLastName($name);</span><br><span class="line"></span><br><span class="line">var_dump($name); <span class="comment">// 'Ryan McDermott';</span></span><br><span class="line">var_dump($newName); <span class="comment">// ['Ryan', 'McDermott'];</span></span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="不要写全局函数"><a href="#不要写全局函数" class="headerlink" title="不要写全局函数"></a>不要写全局函数</h3><p>在大多数语言中污染全局变量是一个坏的实践，因为你可能和其他类库冲突<br>并且调用你api的人直到他们捕获异常才知道踩坑了。让我们思考一种场景：<br>如果你想配置一个数组，你可能会写一个全局函数<code>config()</code>，但是他可能<br>和试着做同样事的其他类库冲突。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">config</span><span class="params">()</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  [</span><br><span class="line">        <span class="string">'foo'</span> =&gt; <span class="string">'bar'</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Configuration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $configuration = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(array $configuration)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;configuration = $configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">(string $key)</span>: ?<span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// null coalescing operator </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;configuration[$key] ?? <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加载配置并创建 <code>Configuration</code> 类的实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$configuration = <span class="keyword">new</span> Configuration([</span><br><span class="line">    <span class="string">'foo'</span> =&gt; <span class="string">'bar'</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>现在你必须在程序中用 <code>Configuration</code> 的实例了</p><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="不要使用单例模式"><a href="#不要使用单例模式" class="headerlink" title="不要使用单例模式"></a>不要使用单例模式</h3><p>单例是一种 <a href="https://en.wikipedia.org/wiki/Singleton_pattern" target="_blank" rel="noopener">反模式</a>.  以下是解释：Paraphrased from Brian Button:</p><ol><li>总是被用成全局实例。They are generally used as a <strong>global instance</strong>, why is that so bad? Because <strong>you hide the dependencies</strong> of your application in your code, instead of exposing them through the interfaces. Making something global to avoid passing it around is a <a href="https://en.wikipedia.org/wiki/Code_smell" target="_blank" rel="noopener">code smell</a>.</li><li>违反了<a href="">单一响应原则</a>They violate the <a href="#single-responsibility-principle-srp">single responsibility principle</a>: by virtue of the fact that <strong>they control their own creation and lifecycle</strong>.</li><li>导致代码强耦合They inherently cause code to be tightly <a href="https://en.wikipedia.org/wiki/Coupling_%28computer_programming%29" target="_blank" rel="noopener">coupled</a>. This makes faking them out under <strong>test rather difficult</strong> in many cases.</li><li>在整个程序的生命周期中始终携带状态。They carry state around for the lifetime of the application. Another hit to testing since <strong>you can end up with a situation where tests need to be ordered</strong> which is a big no for unit tests. Why? Because each unit test should be independent from the other.</li></ol><p>这里有一篇非常好的讨论单例模式的[根本问题((<a href="http://misko.hevery.com/2008/08/25/root-cause-of-singletons/)的文章，是[Misko" target="_blank" rel="noopener">http://misko.hevery.com/2008/08/25/root-cause-of-singletons/)的文章，是[Misko</a> Hevery](<a href="http://misko.hevery.com/about/" target="_blank" rel="noopener">http://misko.hevery.com/about/</a>) 写的。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $dsn)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span><span class="params">()</span>: <span class="title">DBConnection</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>::$instance === <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">self</span>::$instance = <span class="keyword">new</span> <span class="keyword">self</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>::$instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$singleton = DBConnection::getInstance();</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DBConnection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $dsn)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 <code>DBConnection</code> 类的实例并通过 <a href="http://php.net/manual/en/pdo.construct.php#refsect1-pdo.construct-parameters" target="_blank" rel="noopener">DSN</a> 配置.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$connection = <span class="keyword">new</span> DBConnection($dsn);</span><br></pre></td></tr></table></figure><p>现在你必须在程序中 使用 <code>DBConnection</code> 的实例了</p><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="封装条件语句"><a href="#封装条件语句" class="headerlink" title="封装条件语句"></a>封装条件语句</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($article-&gt;state === <span class="string">'published'</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ($article-&gt;isPublished()) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免用反义条件判断"><a href="#避免用反义条件判断" class="headerlink" title="避免用反义条件判断"></a>避免用反义条件判断</h3><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodeNotPresent</span><span class="params">(\DOMNode $node)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!isDOMNodeNotPresent($node))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDOMNodePresent</span><span class="params">(\DOMNode $node)</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDOMNodePresent($node)) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免条件判断"><a href="#避免条件判断" class="headerlink" title="避免条件判断"></a>避免条件判断</h3><p>这看起来像一个不可能任务。当人们第一次听到这句话是都会这么说。<br>“没有<code>if语句</code>我还能做啥？” 答案是你可以使用多态来实现多种场景<br>的相同任务。第二个问题很常见， “这么做可以，但为什么我要这么做？”<br> 答案是前面我们学过的一个Clean Code原则：一个函数应当只做一件事。<br> 当你有很多含有<code>if</code>语句的类和函数时,你的函数做了不止一件事。<br> 记住，只做一件事。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">$this</span>-&gt;type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'777'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getPassengerCount();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Air Force One'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Cessna'</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getFuelExpenditure();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span>: <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boeing777</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getPassengerCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirForceOne</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cessna</span> <span class="keyword">implements</span> <span class="title">Airplane</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getCruisingAltitude</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;getMaxAltitude() - <span class="keyword">$this</span>-&gt;getFuelExpenditure();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免类型检查-part-1"><a href="#避免类型检查-part-1" class="headerlink" title="避免类型检查 (part 1)"></a>避免类型检查 (part 1)</h3><p>PHP是弱类型的,这意味着你的函数可以接收任何类型的参数。<br>有时候你为这自由所痛苦并且在你的函数渐渐尝试类型检查。<br>有很多方法去避免这么做。第一种是统一API。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span><span class="params">($vehicle)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($vehicle <span class="keyword">instanceof</span> Bicycle) &#123;</span><br><span class="line">        $vehicle-&gt;pedalTo(<span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($vehicle <span class="keyword">instanceof</span> Car) &#123;</span><br><span class="line">        $vehicle-&gt;driveTo(<span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">travelToTexas</span><span class="params">(Vehicle $vehicle)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $vehicle-&gt;travelTo(<span class="keyword">new</span> Location(<span class="string">'texas'</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免类型检查-part-2"><a href="#避免类型检查-part-2" class="headerlink" title="避免类型检查 (part 2)"></a>避免类型检查 (part 2)</h3><p>如果你正使用基本原始值比如字符串、整形和数组，要求版本是PHP 7+，不用多态，需要类型检测，<br>那你应当考虑<a href="http://php.net/manual/en/functions.arguments.php#functions.arguments.type-declaration" target="_blank" rel="noopener">类型声明</a>或者严格模式。<br>提供了基于标准PHP语法的静态类型。 手动检查类型的问题是做好了需要好多的废话，好像为了安全就可以不顾损失可读性。<br>保持你的PHP 整洁，写好测试，做好代码回顾。做不到就用PHP严格类型声明和严格模式来确保安全。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span><span class="params">($val1, $val2)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!is_numeric($val1) || !is_numeric($val2)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Must be of type Number'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $val1 + $val2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span><span class="params">(int $val1, int $val2)</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $val1 + $val2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="移除僵尸代码"><a href="#移除僵尸代码" class="headerlink" title="移除僵尸代码"></a>移除僵尸代码</h3><p>僵尸代码和重复代码一样坏。没有理由保留在你的代码库中。如果从来没被调用过，就删掉！<br>因为还在代码版本库里，因此很安全。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldRequestModule</span><span class="params">(string $url)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newRequestModule</span><span class="params">(string $url)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$request = newRequestModule($requestUrl);</span><br><span class="line">inventoryTracker(<span class="string">'apples'</span>, $request, <span class="string">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestModule</span><span class="params">(string $url)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$request = requestModule($requestUrl);</span><br><span class="line">inventoryTracker(<span class="string">'apples'</span>, $request, <span class="string">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="对象和数据结构"><a href="#对象和数据结构" class="headerlink" title="对象和数据结构"></a>对象和数据结构</h2><h3 id="使用-getters-和-setters"><a href="#使用-getters-和-setters" class="headerlink" title="使用 getters 和 setters"></a>使用 getters 和 setters</h3><p>在PHP中你可以对方法使用<code>public</code>, <code>protected</code>, <code>private</code> 来控制对象属性的变更。</p><ul><li>当你想对对象属性做获取之外的操作时，你不需要在代码中去寻找并修改每一个该属性访问方法</li><li>当有<code>set</code>对应的属性方法时，易于增加参数的验证</li><li>封装内部的表示</li><li>使用set<em>和get</em>时，易于增加日志和错误控制</li><li>继承当前类时，可以复写默认的方法功能</li><li>当对象属性是从远端服务器获取时，get<em>，set</em>易于使用延迟加载</li></ul><p>此外，这样的方式也符合OOP开发中的<a href="#开闭原则">开闭原则</a></p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $balance = <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Buy shoes...</span></span><br><span class="line">$bankAccount-&gt;balance -= <span class="number">100</span>;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BankAccount</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $balance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int $balance = <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">$this</span>-&gt;balance = $balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span><span class="params">(int $amount)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($amount &gt; <span class="keyword">$this</span>-&gt;balance) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> \<span class="keyword">Exception</span>(<span class="string">'Amount greater than available balance.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;balance -= $amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">deposit</span><span class="params">(int $amount)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;balance += $amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBalance</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$bankAccount = <span class="keyword">new</span> BankAccount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Buy shoes...</span></span><br><span class="line">$bankAccount-&gt;withdraw($shoesPrice);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get balance</span></span><br><span class="line">$balance = $bankAccount-&gt;getBalance();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="给对象使用私有或受保护的成员变量"><a href="#给对象使用私有或受保护的成员变量" class="headerlink" title="给对象使用私有或受保护的成员变量"></a>给对象使用私有或受保护的成员变量</h3><ul><li>对<code>public</code>方法和属性进行修改非常危险，因为外部代码容易依赖他，而你没办法控制。<strong>对之修改影响所有这个类的使用者。</strong> <code>public</code> methods and properties are most dangerous for changes, because some outside code may easily rely on them and you can’t control what code relies on them. <strong>Modifications in class are dangerous for all users of class.</strong></li><li>对<code>protected</code>的修改跟对<code>public</code>修改差不多危险，因为他们对子类可用，他俩的唯一区别就是可调用的位置不一样，<strong>对之修改影响所有集成这个类的地方。</strong>  <code>protected</code> modifier are as dangerous as public, because they are available in scope of any child class. This effectively means that difference between public and protected is only in access mechanism, but encapsulation guarantee remains the same. <strong>Modifications in class are dangerous for all descendant classes.</strong></li><li>对<code>private</code>的修改保证了这部分代码<strong>只会影响当前类</strong><code>private</code> modifier guarantees that code is <strong>dangerous to modify only in boundaries of single class</strong> (you are safe for modifications and you won’t have <a href="http://www.urbandictionary.com/define.php?term=Jengaphobia&defid=2494196" target="_blank" rel="noopener">Jenga effect</a>).</li></ul><p>所以，当你需要控制类里的代码可以被访问时才用<code>public/protected</code>，其他时候都用<code>private</code>。</p><p>可以读一读这篇 <a href="http://fabien.potencier.org/pragmatism-over-theory-protected-vs-private.html" target="_blank" rel="noopener">博客文章</a> ，<a href="https://github.com/fabpot" target="_blank" rel="noopener">Fabien Potencier</a>写的.</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Employee name: '</span>.$employee-&gt;name; <span class="comment">// Employee name: John Doe</span></span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$employee = <span class="keyword">new</span> Employee(<span class="string">'John Doe'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Employee name: '</span>.$employee-&gt;getName(); <span class="comment">// Employee name: John Doe</span></span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="少用继承多用组合"><a href="#少用继承多用组合" class="headerlink" title="少用继承多用组合"></a>少用继承多用组合</h3><p>正如  the Gang of Four 所著的<a href="https://en.wikipedia.org/wiki/Design_Patterns" target="_blank" rel="noopener"><em>设计模式</em></a>之前所说，<br>我们应该尽量优先选择组合而不是继承的方式。使用继承和组合都有很多好处。<br>这个准则的主要意义在于当你本能的使用继承时，试着思考一下<code>组合</code>是否能更好对你的需求建模。<br>在一些情况下，是这样的。</p><p>接下来你或许会想，“那我应该在什么时候使用继承？”<br>答案依赖于你的问题，当然下面有一些何时继承比组合更好的说明：</p><ol><li>你的继承表达了“是一个”而不是“有一个”的关系（人类-》动物，用户-》用户详情）</li><li>你可以复用基类的代码（人类可以像动物一样移动）</li><li>你想通过修改基类对所有派生类做全局的修改（当动物移动时，修改她们的能量消耗）</li></ol><p><strong>糟糕的:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $name, string $email)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = $email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不好，因为 Employees "有" taxdata</span></span><br><span class="line"><span class="comment">// 而 EmployeeTaxData 不是 Employee 类型的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $ssn;</span><br><span class="line">    <span class="keyword">private</span> $salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $name, string $email, string $ssn, string $salary)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($name, $email);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;ssn = $ssn;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;salary = $salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeTaxData</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $ssn;</span><br><span class="line">    <span class="keyword">private</span> $salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $ssn, string $salary)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ssn = $ssn;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;salary = $salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line">    <span class="keyword">private</span> $email;</span><br><span class="line">    <span class="keyword">private</span> $taxData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(string $name, string $email)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;email = $email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setTaxData</span><span class="params">(EmployeeTaxData $taxData)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;taxData = $taxData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="避免连贯接口"><a href="#避免连贯接口" class="headerlink" title="避免连贯接口"></a>避免连贯接口</h3><p><a href="https://en.wikipedia.org/wiki/Fluent_interface" target="_blank" rel="noopener">连贯接口Fluent interface</a>是一种<br>旨在提高面向对象编程时代码可读性的API设计模式，他基于<a href="https://en.wikipedia.org/wiki/Method_chaining" target="_blank" rel="noopener">方法链Method chaining</a></p><p>有上下文的地方可以降低代码复杂度，例如<a href="https://phpunit.de/manual/current/en/test-doubles.html" target="_blank" rel="noopener">PHPUnit Mock Builder</a><br>和<a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/query-builder.html" target="_blank" rel="noopener">Doctrine Query Builder</a><br>，更多的情况会带来较大代价：</p><p>While there can be some contexts, frequently builder objects, where this<br>pattern reduces the verbosity of the code (for example the <a href="https://phpunit.de/manual/current/en/test-doubles.html" target="_blank" rel="noopener">PHPUnit Mock Builder</a><br>or the <a href="http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/query-builder.html" target="_blank" rel="noopener">Doctrine Query Builder</a>),<br>more often it comes at some costs:</p><ol><li>破坏了 <a href="https://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29" target="_blank" rel="noopener">对象封装</a></li><li>破坏了 <a href="https://en.wikipedia.org/wiki/Decorator_pattern" target="_blank" rel="noopener">装饰器模式</a></li><li>在测试组件中不好做<a href="https://en.wikipedia.org/wiki/Mock_object" target="_blank" rel="noopener">mock</a></li><li>导致提交的diff不好阅读</li></ol><p>了解更多请阅读 <a href="https://ocramius.github.io/blog/fluent-interfaces-are-evil/" target="_blank" rel="noopener">连贯接口为什么不好</a><br>，作者 <a href="https://github.com/Ocramius" target="_blank" rel="noopener">Marco Pivetta</a>.</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $make = <span class="string">'Honda'</span>;</span><br><span class="line">    <span class="keyword">private</span> $model = <span class="string">'Accord'</span>;</span><br><span class="line">    <span class="keyword">private</span> $color = <span class="string">'white'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMake</span><span class="params">(string $make)</span>: <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;make = $make;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setModel</span><span class="params">(string $model)</span>: <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model = $model;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColor</span><span class="params">(string $color)</span>: <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> Returning this for chaining</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dump</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="keyword">$this</span>-&gt;make, <span class="keyword">$this</span>-&gt;model, <span class="keyword">$this</span>-&gt;color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$car = (<span class="keyword">new</span> Car())</span><br><span class="line">  -&gt;setColor(<span class="string">'pink'</span>)</span><br><span class="line">  -&gt;setMake(<span class="string">'Ford'</span>)</span><br><span class="line">  -&gt;setModel(<span class="string">'F-150'</span>)</span><br><span class="line">  -&gt;dump();</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $make = <span class="string">'Honda'</span>;</span><br><span class="line">    <span class="keyword">private</span> $model = <span class="string">'Accord'</span>;</span><br><span class="line">    <span class="keyword">private</span> $color = <span class="string">'white'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setMake</span><span class="params">(string $make)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;make = $make;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setModel</span><span class="params">(string $model)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;model = $model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setColor</span><span class="params">(string $color)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dump</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        var_dump(<span class="keyword">$this</span>-&gt;make, <span class="keyword">$this</span>-&gt;model, <span class="keyword">$this</span>-&gt;color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$car = <span class="keyword">new</span> Car();</span><br><span class="line">$car-&gt;setColor(<span class="string">'pink'</span>);</span><br><span class="line">$car-&gt;setMake(<span class="string">'Ford'</span>);</span><br><span class="line">$car-&gt;setModel(<span class="string">'F-150'</span>);</span><br><span class="line">$car-&gt;dump();</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="推荐使用-final-类"><a href="#推荐使用-final-类" class="headerlink" title="推荐使用 final 类"></a>推荐使用 final 类</h3><p>能用时尽量使用 <code>final</code> 关键字:</p><ol><li>阻止不受控的继承链</li><li>鼓励 <a href="#少用继承多用组合">组合</a>.</li><li>鼓励 <a href="#单一职责模式">单一职责模式</a>.</li><li>鼓励开发者用你的公开方法而非通过继承类获取受保护方法的访问权限.</li><li>使得在不破坏使用你的类的应用的情况下修改代码成为可能.</li></ol><p>The only condition is that your class should implement an interface and no other public methods are defined.</p><p>For more informations you can read <a href="https://ocramius.github.io/blog/when-to-declare-classes-final/" target="_blank" rel="noopener">the blog post</a> on this topic written by <a href="https://ocramius.github.io/" target="_blank" rel="noopener">Marco Pivetta (Ocramius)</a>.</p><p><strong>Bad:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($color)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string The color of the vehicle</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getColor</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string The color of the vehicle</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Vehicle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($color)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;color = $color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritdoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getColor</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="SOLID"><a href="#SOLID" class="headerlink" title="SOLID"></a>SOLID</h2><p><strong>SOLID</strong> 是Michael Feathers推荐的便于记忆的首字母简写，它代表了Robert Martin命名的最重要的五个面对对象编码设计原则</p><ul><li><a href="#职责原则">S: 单一职责原则 (SRP)</a></li><li><a href="#开闭原则">O: 开闭原则 (OCP)</a></li><li><a href="#里氏替换原则">L: 里氏替换原则 (LSP)</a></li><li><a href="#接口隔离原则">I: 接口隔离原则 (ISP)</a></li><li><a href="#依赖倒置原则">D: 依赖倒置原则 (DIP)</a></li></ul><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>Single Responsibility Principle (SRP)</p><p>正如在Clean Code所述，”修改一个类应该只为一个理由”。<br>人们总是易于用一堆方法塞满一个类，如同我们只能在飞机上<br>只能携带一个行李箱（把所有的东西都塞到箱子里）。这样做<br>的问题是：从概念上这样的类不是高内聚的，并且留下了很多<br>理由去修改它。将你需要修改类的次数降低到最小很重要。<br>这是因为，当有很多方法在类中时，修改其中一处，你很难知<br>晓在代码库中哪些依赖的模块会被影响到。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeSettings</span><span class="params">(array $settings)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;verifyCredentials()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyCredentials</span><span class="params">()</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserAuth</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyCredentials</span><span class="params">()</span>: <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSettings</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $user;</span><br><span class="line">    <span class="keyword">private</span> $auth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(User $user)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;user = $user;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;auth = <span class="keyword">new</span> UserAuth($user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">changeSettings</span><span class="params">(array $settings)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;auth-&gt;verifyCredentials()) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><p>Open/Closed Principle (OCP)</p><p>正如Bertrand Meyer所述，”软件的工件（ classes, modules, functions 等）<br>应该对扩展开放，对修改关闭。” 然而这句话意味着什么呢？这个原则大体上表示你<br>应该允许在不改变已有代码的情况下增加新的功能</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span>: <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="string">'ajaxAdapter'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">extends</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = <span class="string">'nodeAdapter'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Adapter $adapter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;adapter = $adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $adapterName = <span class="keyword">$this</span>-&gt;adapter-&gt;getName();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($adapterName === <span class="string">'ajaxAdapter'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;makeAjaxCall($url);</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($adapterName === <span class="string">'httpNodeAdapter'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;makeHttpCall($url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">makeAjaxCall</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">makeHttpCall</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjaxAdapter</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeAdapter</span> <span class="keyword">implements</span> <span class="title">Adapter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// request and return promise</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HttpRequester</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Adapter $adapter)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;adapter = $adapter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">(string $url)</span>: <span class="title">Promise</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;adapter-&gt;request($url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p>Liskov Substitution Principle (LSP)</p><p>这是一个简单的原则，却用了一个不好理解的术语。它的正式定义是<br>“如果S是T的子类型，那么在不改变程序原有既定属性（检查、执行<br>任务等）的前提下，任何T类型的对象都可以使用S类型的对象替代<br>（例如，使用S的对象可以替代T的对象）” 这个定义更难理解:-)。</p><p>对这个概念最好的解释是：如果你有一个父类和一个子类，在不改变<br>原有结果正确性的前提下父类和子类可以互换。这个听起来依旧让人<br>有些迷惑，所以让我们来看一个经典的正方形-长方形的例子。从数学<br>上讲，正方形是一种长方形，但是当你的模型通过继承使用了”is-a”<br>的关系时，就不对了。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">protected</span> $height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWidth</span><span class="params">(int $width)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = $width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span><span class="params">(int $height)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;height = $height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;width * <span class="keyword">$this</span>-&gt;height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setWidth</span><span class="params">(int $width)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = <span class="keyword">$this</span>-&gt;height = $width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span><span class="params">(int $height)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = <span class="keyword">$this</span>-&gt;height = $height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printArea</span><span class="params">(Rectangle $rectangle)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $rectangle-&gt;setWidth(<span class="number">4</span>);</span><br><span class="line">    $rectangle-&gt;setHeight(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BAD: Will return 25 for Square. Should be 20.</span></span><br><span class="line">    <span class="keyword">echo</span> sprintf(<span class="string">'%s has area %d.'</span>, get_class($rectangle), $rectangle-&gt;getArea()).PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$rectangles = [<span class="keyword">new</span> Rectangle(), <span class="keyword">new</span> Square()];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($rectangles <span class="keyword">as</span> $rectangle) &#123;</span><br><span class="line">    printArea($rectangle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><p>最好是将这两种四边形分别对待，用一个适合两种类型的更通用子类型来代替。</p><p>尽管正方形和长方形看起来很相似，但他们是不同的。<br>正方形更接近菱形，而长方形更接近平行四边形。但他们不是子类型。<br>尽管相似，正方形、长方形、菱形、平行四边形都是有自己属性的不同形状。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span>: <span class="title">int</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> $height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int $width, int $height)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;width = $width;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;height = $height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;width * <span class="keyword">$this</span>-&gt;height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(int $length)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;length = $length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getArea</span><span class="params">()</span>: <span class="title">int</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;length ** <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printArea</span><span class="params">(Shape $shape)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> sprintf(<span class="string">'%s has area %d.'</span>, get_class($shape), $shape-&gt;getArea()).PHP_EOL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$shapes = [<span class="keyword">new</span> Rectangle(<span class="number">4</span>, <span class="number">5</span>), <span class="keyword">new</span> Square(<span class="number">5</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($shapes <span class="keyword">as</span> $shape) &#123;</span><br><span class="line">    printArea($shape);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><p>Interface Segregation Principle (ISP)</p><p>接口隔离原则表示：”调用方不应该被强制依赖于他不需要的接口”</p><p>有一个清晰的例子来说明示范这条原则。当一个类需要一个大量的设置项，<br>为了方便不会要求调用方去设置大量的选项，因为在通常他们不需要所有的<br>设置项。使设置项可选有助于我们避免产生”胖接口”</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span>: <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanEmployee</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ...... eating in lunch break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RobotEmployee</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... working much more</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... robot can't eat, but it must implement this method</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><p>不是每一个工人都是雇员，但是每一个雇员都是一个工人</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Workable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Feedable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span>: <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span> <span class="keyword">extends</span> <span class="title">Feedable</span>, <span class="title">Workable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HumanEmployee</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">eat</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... eating in lunch break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// robot can only work</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RobotEmployee</span> <span class="keyword">implements</span> <span class="title">Workable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>Dependency Inversion Principle (DIP)</p><p>这条原则说明两个基本的要点：</p><ol><li>高阶的模块不应该依赖低阶的模块，它们都应该依赖于抽象</li><li>抽象不应该依赖于实现，实现应该依赖于抽象</li></ol><p>这条起初看起来有点晦涩难懂，但是如果你使用过 PHP 框架（例如 Symfony），你应该见过<br>依赖注入（DI），它是对这个概念的实现。虽然它们不是完全相等的概念，依赖倒置原则使高阶模块<br>与低阶模块的实现细节和创建分离。可以使用依赖注入（DI）这种方式来实现它。最大的好处<br>是它使模块之间解耦。耦合会导致你难于重构，它是一种非常糟糕的的开发模式。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">extends</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... working much more</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $employee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Employee $employee)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee = $employee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manage</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee-&gt;work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// ....working</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Robot</span> <span class="keyword">implements</span> <span class="title">Employee</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">work</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//.... working much more</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $employee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(Employee $employee)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee = $employee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">manage</span><span class="params">()</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;employee-&gt;work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="别写重复代码-DRY"><a href="#别写重复代码-DRY" class="headerlink" title="别写重复代码 (DRY)"></a>别写重复代码 (DRY)</h2><p>试着去遵循<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY</a> 原则.</p><p>尽你最大的努力去避免复制代码，它是一种非常糟糕的行为，复制代码<br>通常意味着当你需要变更一些逻辑时，你需要修改不止一处。</p><p>试想一下，如果你在经营一家餐厅并且你在记录你仓库的进销记录：所有<br>的土豆，洋葱，大蒜，辣椒等。如果你有多个列表来管理进销记录，当你<br>用其中一些土豆做菜时你需要更新所有的列表。如果你只有一个列表的话<br>只有一个地方需要更新。</p><p>通常情况下你复制代码是应该有两个或者多个略微不同的逻辑，它们大多数<br>都是一样的，但是由于它们的区别致使你必须有两个或者多个隔离的但大部<br>分相同的方法，移除重复的代码意味着用一个function/module/class创<br>建一个能处理差异的抽象。</p><p>用对抽象非常关键，这正是为什么你必须学习遵守在<a href="#类">类</a>章节写<br>的SOLID原则，不合理的抽象比复制代码更糟糕，所以务必谨慎！说了这么多，<br>如果你能设计一个合理的抽象，那就这么干！别写重复代码，否则你会发现<br>任何时候当你想修改一个逻辑时你必须修改多个地方。</p><p><strong>坏:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDeveloperList</span><span class="params">(array $developers)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($developers <span class="keyword">as</span> $developer) &#123;</span><br><span class="line">        $expectedSalary = $developer-&gt;calculateExpectedSalary();</span><br><span class="line">        $experience = $developer-&gt;getExperience();</span><br><span class="line">        $githubLink = $developer-&gt;getGithubLink();</span><br><span class="line">        $data = [</span><br><span class="line">            $expectedSalary,</span><br><span class="line">            $experience,</span><br><span class="line">            $githubLink</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        render($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showManagerList</span><span class="params">(array $managers)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($managers <span class="keyword">as</span> $manager) &#123;</span><br><span class="line">        $expectedSalary = $manager-&gt;calculateExpectedSalary();</span><br><span class="line">        $experience = $manager-&gt;getExperience();</span><br><span class="line">        $githubLink = $manager-&gt;getGithubLink();</span><br><span class="line">        $data = [</span><br><span class="line">            $expectedSalary,</span><br><span class="line">            $experience,</span><br><span class="line">            $githubLink</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        render($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList</span><span class="params">(array $employees)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($employees <span class="keyword">as</span> $employee) &#123;</span><br><span class="line">        $expectedSalary = $employee-&gt;calculateExpectedSalary();</span><br><span class="line">        $experience = $employee-&gt;getExperience();</span><br><span class="line">        $githubLink = $employee-&gt;getGithubLink();</span><br><span class="line">        $data = [</span><br><span class="line">            $expectedSalary,</span><br><span class="line">            $experience,</span><br><span class="line">            $githubLink</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        render($data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>极好:</strong></p><p>最好让代码紧凑一点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showList</span><span class="params">(array $employees)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> ($employees <span class="keyword">as</span> $employee) &#123;</span><br><span class="line">        render([</span><br><span class="line">            $employee-&gt;calculateExpectedSalary(),</span><br><span class="line">            $employee-&gt;getExperience(),</span><br><span class="line">            $employee-&gt;getGithubLink()</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><p>其他语言的翻译:</p><ul><li>:cn: <strong>Chinese:</strong><ul><li><a href="https://github.com/php-cpm/clean-code-php" target="_blank" rel="noopener">php-cpm/clean-code-php</a></li></ul></li><li>:ru: <strong>Russian:</strong><ul><li><a href="https://github.com/peter-gribanov/clean-code-php" target="_blank" rel="noopener">peter-gribanov/clean-code-php</a></li></ul></li><li>:es: <strong>Spanish:</strong><ul><li><a href="https://github.com/fikoborquez/clean-code-php" target="_blank" rel="noopener">fikoborquez/clean-code-php</a></li></ul></li><li>:brazil: <strong>Portuguese:</strong><ul><li><a href="https://github.com/fabioars/clean-code-php" target="_blank" rel="noopener">fabioars/clean-code-php</a></li><li><a href="https://github.com/jeanjar/clean-code-php/tree/pt-br" target="_blank" rel="noopener">jeanjar/clean-code-php</a></li></ul></li><li>:thailand: <strong>Thai:</strong><ul><li><a href="https://github.com/panuwizzle/clean-code-php" target="_blank" rel="noopener">panuwizzle/clean-code-php</a></li></ul></li><li>:fr: <strong>French:</strong><ul><li><a href="https://github.com/errorname/clean-code-php" target="_blank" rel="noopener">errorname/clean-code-php</a></li></ul></li><li>:vietnam: <strong>Vietnamese</strong><ul><li><a href="https://github.com/viethuongdev/clean-code-php" target="_blank" rel="noopener">viethuongdev/clean-code-php</a></li></ul></li><li>:kr: <strong>Korean:</strong><ul><li><a href="https://github.com/yujineeee/clean-code-php" target="_blank" rel="noopener">yujineeee/clean-code-php</a></li></ul></li><li>:tr: <strong>Turkish:</strong><ul><li><a href="https://github.com/anilozmen/clean-code-php" target="_blank" rel="noopener">anilozmen/clean-code-php</a></li></ul></li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网址导航项目</title>
      <link href="/2020/10/23/item/wordpress/"/>
      <url>/2020/10/23/item/wordpress/</url>
      
        <content type="html"><![CDATA[<p>平时看到很多做网址导航的，在以往10年前很吃香，目前有些是面对当下各种各种产品，但是很多人不懂哪个才是真的好用，就出现专门针对某一领域打造网址导航，有些处于书签模式这样随便输入自己的网址方便随处可以看。<br>搭建过用wordpress+webstack模版，还是挺好用的。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-redis扩展安装</title>
      <link href="/2020/10/20/linux/rediskuozhan/"/>
      <url>/2020/10/20/linux/rediskuozhan/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@803cbcf702a4:&#x2F;# curl -L -o &#x2F;tmp&#x2F;reids.tar.gz https:&#x2F;&#x2F;codeload.github.com&#x2F;phpredis&#x2F;phpredis&#x2F;tar.gz&#x2F;5.2.2</span><br><span class="line">root@803cbcf702a4:&#x2F;# cd &#x2F;tmp</span><br><span class="line">root@517b9c67507a:&#x2F;tmp# tar -xzf reids.tar.gz</span><br><span class="line">root@517b9c67507a:&#x2F;tmp# ls</span><br><span class="line">phpredis-5.0.2    reids.tar.gz</span><br><span class="line">root@517b9c67507a:&#x2F;tmp# docker-php-source extract</span><br><span class="line">root@517b9c67507a:&#x2F;tmp# mv phpredis-5.0.2 &#x2F;usr&#x2F;src&#x2F;php&#x2F;ext&#x2F;phpredis</span><br></pre></td></tr></table></figure><h3 id="检查移过去的插件源码包是否存在"><a href="#检查移过去的插件源码包是否存在" class="headerlink" title="检查移过去的插件源码包是否存在"></a>检查移过去的插件源码包是否存在</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@517b9c67507a:&#x2F;tmp# ls -l &#x2F;usr&#x2F;src&#x2F;php&#x2F;ext | grep redis</span><br><span class="line">drwxrwxr-x  6 root root 4096 Jul 29 15:04 phpredis</span><br><span class="line">root@517b9c67507a:&#x2F;tmp# docker-php-ext-install phpredis</span><br></pre></td></tr></table></figure><h3 id="检查redis-扩展是否已经安装上"><a href="#检查redis-扩展是否已经安装上" class="headerlink" title="检查redis 扩展是否已经安装上"></a>检查redis 扩展是否已经安装上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@517b9c67507a:&#x2F;tmp# php -m | grep redis</span><br><span class="line">redis</span><br><span class="line">root@517b9c67507a:&#x2F;tmp#</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 二维数组根据某个字段排序</title>
      <link href="/2020/10/14/php/algorithm/paixu/"/>
      <url>/2020/10/14/php/algorithm/paixu/</url>
      
        <content type="html"><![CDATA[<p>二维数组根据某个字段排序有两种办法，一种是通过sort自己写代码，一种是直接用array_multisort排序函数</p><h3 id="一-手写arraysort"><a href="#一-手写arraysort" class="headerlink" title="一. 手写arraysort"></a>一. 手写arraysort</h3><p>PHP的一维数组排序函数：</p><p>sort  对数组的值按照升序排列(rsort降序)，不保留原始的键</p><p>ksort 对数组的键按照升序排列(krsort降序) 保留键值关系</p><p>asort 对数组的值按照升序排列(arsort降序)，保留键值关系</p><p>方法： 取出要排序的值组成值数组(为一维数组)，按要求对值进行排序(保持键值关系)，遍历值数组，按照键对应赋值给结果数组。</p><h3 id="二-通过array-multisort-进行数组字段排序"><a href="#二-通过array-multisort-进行数组字段排序" class="headerlink" title="二. 通过array_multisort 进行数组字段排序"></a>二. 通过array_multisort 进行数组字段排序</h3><p>这里也是本篇主要要说的。</p><p>官网对array_multisort函数的解释: 对多个数组或多维数组进行排序</p><p>bool array_multisort ( array $ar1 [, mixed $arg [, mixed $… [, array $… ]]] )</p><p>成功时返回 TRUE， 或者在失败时返回 FALSE.</p><p>array_multisort() 可以用来一次对多个数组进行排序，或者根据某一维或多维对多维数组进行排序。关联（string）键名保持不变，但数字键名会被重新索引。</p><p>输入数组被当成一个表的列并以行来排序——这类似于 SQL 的 ORDER BY 子句的功能。第一个数组是要排序的主要数组。数组中的行（值）比较为相同的话就按照下一个输入数组中相应值的大小来排序，依此类推。</p><p>本函数的参数结构有些不同寻常，但是非常灵活。第一个参数必须是一个数组。接下来的每个参数可以是数组或者是下面列出的排序标志。</p><p>排序顺序标志：</p><p>SORT_ASC - 按照上升顺序排序<br>SORT_DESC - 按照下降顺序排序</p><p>排序类型标志：</p><p>SORT_REGULAR - 将项目按照通常方法比较<br>SORT_NUMERIC - 将项目按照数值比较<br>SORT_STRING - 将项目按照字符串比较<br>每个数组之后不能指定两个同类的排序标志。每个数组后指定的排序标志仅对该数组有效 - 在此之前为默认值 SORT_ASC 和 SORT_REGULAR。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyperf  特点</title>
      <link href="/2020/09/30/php/hyperf/good/"/>
      <url>/2020/09/30/php/hyperf/good/</url>
      
        <content type="html"><![CDATA[<p>Hyperf 2.0</p><p>主要功能迭代</p><ul><li>AOP 和注解功能底层重构</li></ul><p>在 1.1 版本下，尽管提供了非常强大的 AOP 和注解功能，但也仍有一些限制和不足如下：</p><p>AOP 只能切入由 hyperf/di 组件管理的对象，无法切入其它方式创建的对象，如 new ；<br>通过 DI 获取的类实际上是由 AOP 生成的一个原始类的子类，在子类上完成了对方法的修改，以完成 AOP 的功能实现，而子类的类名与原始类是不一致的，也就导致了 get_class(), <strong>CLASS</strong> 之类的方法或常量获取的数据可能会不对；<br>同上，异常堆栈信息会充满了代理类的链路，不容易看清楚调用链路；<br>同上，由于是通过继承实现的代理类，故一个 final 类是无法被切入的；<br>同上，对一个父类进行 AOP 切入后，这个类的子类并不会被切入；<br>通过 new 实例化的一个对象 @Inject 和 @Value 注解无法生效；<br>您无法在一个类的构造函数内使用通过 @Inject 和 @Value 注解获取的值；<br>在 trait 内通过 @Inject 和 @Value 注解标注的属性无法正常运作；<br>在 PHP 8 下无法通过类成员属性的强类型声明替代 @var 声明来指定 @Inject 时的类声明；</p><ul><li>使用注解时必须声明对应注解的命名空间；</li></ul><p>定义 Aspect 类时无法在注解上一并定义要切入的目标；<br>以上列举了一些 1.1 下 AOP 的限制和不足，而在 2.0 版本下，我们对底层的逻辑进行了重构，上面这些问题全部都被解决掉了，其中最具想象空间的是通过新的 AOP 功能，你可以对几乎所有的类和注解进行动态的切入了，无论是通过 new 实例化出来的对象还是通过 DI 创建出来的对象，无论是切入了这个类的父类还是更深的继承层次，无论是 final 类还是一个普通类。</p><p>简而言之，在新的机制下，Hyperf 会在启动时扫描所有的扫描域，并扫描代码得到所有类的 AST 抽象语法树，并从中解析所有与 AOP 相关的元数据，根据这些元数据来对要被代理的类进行 AST 节点信息的修改，并注入 AOP 相关的逻辑，最终通过 PHP 的 Autoload 机制，在实例化一个类并进行自动加载时，ClassLoader 返回经过修改后的类文件。</p><p>那么用正向的角度来描述这个功能的变更如下：</p><p>AOP 可以作用于 new 关键词创建的对象；<br>AOP 可以作用于 Final 类；<br>您可以在构造函数中使用 @Inject 和 @Value 注解标记的属性值；<br>代理类的类名和继承关系与原类一致；<br>对父类进行 AOP 切入，子类同样生效；<br>AOP 代理类缓存和注解缓存可以自动识别是否需要重新生成；<br>通过 new 关键词创建的对象，@Inject 和 @Value 注解标记的属性值可以生效；<br>可在 trait 中使用 @Inject 和 @Value 注解，并作用于 use 的类；<br>PHP 8 下使用 @Inject 注解时可通过强类型声明替代 @var 注解声明；<br>提供了注解全局引入机制，以达到在使用注解时允许不引入对应的命名空间；<br>在定义 Aspect 时可直接在 @Aspect 注解上定义要切入的目标类和注解；<br>Aspect 增加了 priority 优先级属性，可定义多个 Aspect 类的优先级；<br>使用依赖懒加载功能时无需再注册 Hyperf\Di\Listener\LazyLoaderBootApplicationListener 监听器；<br>新增 annotations.scan.class_map 配置，通过该配置可以直接将任意类替换为你指定的类；<br>支持 Coroutine Server 协程服务<br>在 Swoole 4.4 版本时新增了 Coroutine Server，通过该功能可以通过协程的形式来运行 Server，也就意味着可以在一个进程下同时运行多个不同协议的 Server 来提供服务，这样的做法更加的协程，且单进程的模型对 Docker 和 Kubernetes 更加友好，通过调整 Pod 的数量即可对应到真实的进程数；<br>在 Hyperf 2.0 版本，我们也对 Coroutine Server 进行了支持，您可通过在 config/autoload/server.php 配置文件中添加一个 type =&gt; Hyperf\Server\CoroutineServer::class 配置即可切换到 Coroutine Server 的运行模式去。同时一些原本要使用自定义进程来实现功能的场景，如配置中心的配置拉取、服务监控的数据提供、消息队列消费者的消费等，我们的提供了对应的协程模式的运行模式，最终只需要启动一个进程即可完成所有之前需要多个进程才能完成的事情。</p><ul><li>增加 ResponseEmitter 机制</li></ul><p>在 1.1 版本下，我们只能在 HTTP Server 中返回由 hyperf/http-message 组件或 hyperf/http-server 组件提供的 Response 对象，但其它同样遵循了 PSR-7 标准的 Response 却无法正常响应，比如 Guzzle 客户端请求后获得的 Response 对象，在 1.1 下需要转换为 Hyperf 的 Response 对象才能正确响应客户端请求。而在 2.0 版本下，通过 ResponseEmitter 机制，您可以直接返回任意符合 PSR-7 标准的 Response 对象，以获得更强的兼容性。</p><ul><li>增加 Reactive-X 组件</li></ul><p>hyperf/reactive-x 组件提供了 Swoole/Hyperf 环境下的 ReactiveX 集成。关于 ReactiveX，微软给的定义是，Rx 是一个函数库，让开发者可以利用可观察序列和 LINQ 风格查询操作符来编写异步和基于事件的程序，使用 Rx，开发者可以用 Observables 表示异步数据流，用 LINQ 操作符查询异步数据流， 用 Schedulers 参数化异步数据流的并发处理，Rx 可以这样定义：Rx = Observables + LINQ + Schedulers。而 Reactivex.io 给的定义是，Rx 是一个使用可观察数据流进行异步编程的编程接口，ReactiveX 结合了观察者模式、迭代器模式和函数式编程的精华。</p><p>通过该组件，您可以在 Hyperf 中实现响应式编程的范式，为您的应用提供更多的可能性。</p><ul><li>统一 HTTP 异常</li></ul><p>在 1.1 版本下，HTTP Server 在处理如 路由未找到(404)、请求方法不允许(405) 等 HTTP 异常时，是在 Dispatcher 中提供对应的方法，并直接响应 Response 结果，如果需要自定义对应的响应结果，则需要通过 DI 来重写 Dispatcher 类的对应方法。而在 2.0 版本下，我们对异常的处理方式进行了统一，统一抛出 Hyperf\HttpMessage\Exception\HttpException 异常类的子类，并统一由默认提供的 Hyperf\HttpServer\Exception\Handler\HttpExceptionHandler 来处理响应的结果，这样一来用户便可以非常便捷的通过 ExceptionHandler 来对异常响应进行统一的处理了。</p><p>升级到 2.0 版本<br>从现在的 1.1 版本升级到 2.0 版本，也是一件非常轻松的事情，我们提供了一份详尽的 2.0 升级指南 来指引您完成对应的升级动作，具体可查阅该升级指南；</p><p>更多<br>以上只是笔者本人最为期待的功能迭代，只是冰山一角，2.0 版本还包含了大量的细节更新以及新功能，具体可以查阅 版本更新记录 获得更多的细节信息。</p><p>总的来说，2.0 是一个充满了想象空间的版本，它提供了远超原来的可能性，我们可以在 Hyperf 上、在 Swoole 上、在 PHP 上，去想、去做更多原来不曾深思过的事情。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hyperf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyperf  docker部署</title>
      <link href="/2020/09/28/php/hyperf/create/"/>
      <url>/2020/09/28/php/hyperf/create/</url>
      
        <content type="html"><![CDATA[<h1 id="下载并运行-hyperf-hyperf-镜像，并将镜像内的项目目录绑定到宿主机的-tmp-skeleton-目录"><a href="#下载并运行-hyperf-hyperf-镜像，并将镜像内的项目目录绑定到宿主机的-tmp-skeleton-目录" class="headerlink" title="下载并运行 hyperf/hyperf 镜像，并将镜像内的项目目录绑定到宿主机的 /tmp/skeleton 目录"></a>下载并运行 hyperf/hyperf 镜像，并将镜像内的项目目录绑定到宿主机的 /tmp/skeleton 目录</h1><p>docker run -v /tmp/skeleton:/hyperf-skeleton -p 9501:9501 -it –entrypoint /bin/sh hyperf/hyperf:latest</p><h1 id="镜像容器运行后，在容器内安装-Composer"><a href="#镜像容器运行后，在容器内安装-Composer" class="headerlink" title="镜像容器运行后，在容器内安装 Composer"></a>镜像容器运行后，在容器内安装 Composer</h1><p>cd /hyperf-skeleton<br>wget <a href="https://github.com/composer/composer/releases/download/1.8.6/composer.phar" target="_blank" rel="noopener">https://github.com/composer/composer/releases/download/1.8.6/composer.phar</a><br>chmod u+x composer.phar<br>mv composer.phar /usr/local/bin/composer</p><h1 id="将-Composer-镜像设置为阿里云镜像，加速国内下载速度"><a href="#将-Composer-镜像设置为阿里云镜像，加速国内下载速度" class="headerlink" title="将 Composer 镜像设置为阿里云镜像，加速国内下载速度"></a>将 Composer 镜像设置为阿里云镜像，加速国内下载速度</h1><p>composer config -g repo.packagist composer <a href="https://mirrors.aliyun.com/composer" target="_blank" rel="noopener">https://mirrors.aliyun.com/composer</a></p><h1 id="通过-Composer-安装-hyperf-hyperf-skeleton-项目"><a href="#通过-Composer-安装-hyperf-hyperf-skeleton-项目" class="headerlink" title="通过 Composer 安装 hyperf/hyperf-skeleton 项目"></a>通过 Composer 安装 hyperf/hyperf-skeleton 项目</h1><p>cd /hyperf-skeleton<br>composer create-project hyperf/hyperf-skeleton</p><h1 id="进入安装好的-Hyperf-项目目录"><a href="#进入安装好的-Hyperf-项目目录" class="headerlink" title="进入安装好的 Hyperf 项目目录"></a>进入安装好的 Hyperf 项目目录</h1><p>cd /hyperf-skeleton/hyperf-skeleton<br>cd hyperf-skeleton</p><h1 id="启动-Hyperf"><a href="#启动-Hyperf" class="headerlink" title="启动 Hyperf"></a>启动 Hyperf</h1><p>php bin/hyperf.php start</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hyperf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引的建立原则</title>
      <link href="/2020/09/27/mysql/suoyin/"/>
      <url>/2020/09/27/mysql/suoyin/</url>
      
        <content type="html"><![CDATA[<p>1.能创建唯一索引就创建唯一索引</p><p>2.为经常需要排序、分组和联合操作的字段建立索引</p><p>3.为常作为查询条件的字段建立索引<br>    如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。<br>    因此，为这样的字段建立索引，可以提高整个表的查询速度。</p><p>4.尽量使用前缀来索引<br>    如果索引字段的值很长，最好使用值的前缀来索引。<br>        例如，TEXT和BLOG类型的字段，进行全文检索，会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</p><p>5.限制索引的数目<br>    索引的数目不是越多越好。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。<br>    修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。</p><p>6.删除不再使用或者很少使用的索引<br>    表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p><pre><code>MySQL索引管理</code></pre><p>一 、功能</p><ol><li><p>索引的功能就是加速查找</p></li><li><p>mysql中的primary key，unique，联合唯一也都是索引，这些索引除了加速查找以外，还有约束的功能</p></li></ol><p>二 、MySQL常用的索引</p><p>普通索引INDEX：加速查找</p><p>唯一索引： -主键索引PRIMARY KEY：加速查找+约束（不为空、不能重复） -唯一索引UNIQUE:加速查找+约束（不能重复）</p><p>联合索引： -PRIMARY KEY(id,name):联合主键索引 -UNIQUE(id,name):联合唯一索引 -INDEX(id,name):联合普通索引</p><p>三 、索引的两大类型hash与btree</p><p>#我们可以在创建上述索引的时候，为其指定索引类型，分两类<br>hash类型的索引：查询单条快，范围查询慢<br>btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</p><p>#不同的存储引擎支持的索引类型也不一样<br>InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；<br>MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；<br>Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；<br>NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；<br>Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</p><p>四 、创建/删除索引的语法</p><p>#方法一：创建表时<br> 　　CREATE TABLE 表名 (<br> 字段名1 数据类型 [完整性约束条件…],<br> 字段名2 数据类型 [完整性约束条件…],<br> [UNIQUE | FULLTEXT | SPATIAL ] INDEX | KEY<br> [索引名] (字段名[(长度)] [ASC |DESC])<br> );</p><p>#方法二：CREATE在已存在的表上创建索引<br> CREATE [UNIQUE | FULLTEXT | SPATIAL ] INDEX 索引名<br> ON 表名 (字段名[(长度)] [ASC |DESC]) ;</p><p>#方法三：ALTER TABLE在已存在的表上创建索引<br> ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL ] INDEX<br> 索引名 (字段名[(长度)] [ASC |DESC]) ;</p><p>#删除索引：DROP INDEX 索引名 ON 表名字;</p><p>#方式一<br>create table t1(<br> id int,<br> name char,<br> age int,<br> sex enum(‘male’,’female’),<br> unique key uni_id(id),<br> index ix_name(name) #index没有key<br>);</p><p>#方式二<br>create index ix_age on t1(age);</p><p>#方式三<br>alter table t1 add index ix_sex(sex);</p><p>#查看<br>mysql&gt; show create table t1;<br>| t1 | CREATE TABLE <code>t1</code> (<br> <code>id</code> int(11) DEFAULT NULL,<br> <code>name</code> char(1) DEFAULT NULL,<br> <code>age</code> int(11) DEFAULT NULL,<br> <code>sex</code> enum(‘male’,’female’) DEFAULT NULL,<br> UNIQUE KEY <code>uni_id</code> (<code>id</code>),<br> KEY <code>ix_name</code> (<code>name</code>),<br> KEY <code>ix_age</code> (<code>age</code>),<br> KEY <code>ix_sex</code> (<code>sex</code>)<br>) ENGINE=InnoDB DEFAULT CHARSET=latin1</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引管理</title>
      <link href="/2020/09/20/mysql/suoyinyuanli/"/>
      <url>/2020/09/20/mysql/suoyinyuanli/</url>
      
        <content type="html"><![CDATA[<p>一 、功能</p><ol><li><p>索引的功能就是加速查找</p></li><li><p>mysql中的primary key，unique，联合唯一也都是索引，这些索引除了加速查找以外，还有约束的功能</p></li></ol><p>二 、MySQL常用的索引</p><p>普通索引INDEX：加速查找</p><p>唯一索引： -主键索引PRIMARY KEY：加速查找+约束（不为空、不能重复） -唯一索引UNIQUE:加速查找+约束（不能重复）</p><p>联合索引： -PRIMARY KEY(id,name):联合主键索引 -UNIQUE(id,name):联合唯一索引 -INDEX(id,name):联合普通索引</p><p>三 、索引的两大类型hash与btree</p><p>#我们可以在创建上述索引的时候，为其指定索引类型，分两类<br>hash类型的索引：查询单条快，范围查询慢<br>btree类型的索引：b+树，层数越多，数据量指数级增长（我们就用它，因为innodb默认支持它）</p><p>#不同的存储引擎支持的索引类型也不一样<br>InnoDB 支持事务，支持行级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；<br>MyISAM 不支持事务，支持表级别锁定，支持 B-tree、Full-text 等索引，不支持 Hash 索引；<br>Memory 不支持事务，支持表级别锁定，支持 B-tree、Hash 等索引，不支持 Full-text 索引；<br>NDB 支持事务，支持行级别锁定，支持 Hash 索引，不支持 B-tree、Full-text 等索引；<br>Archive 不支持事务，支持表级别锁定，不支持 B-tree、Hash、Full-text 等索引；</p><p>四 、创建/删除索引的语法</p><p>#方法一：创建表时<br> 　　CREATE TABLE 表名 (<br> 字段名1 数据类型 [完整性约束条件…],<br> 字段名2 数据类型 [完整性约束条件…],<br> [UNIQUE | FULLTEXT | SPATIAL ] INDEX | KEY<br> [索引名] (字段名[(长度)] [ASC |DESC])<br> );</p><p>#方法二：CREATE在已存在的表上创建索引<br> CREATE [UNIQUE | FULLTEXT | SPATIAL ] INDEX 索引名<br> ON 表名 (字段名[(长度)] [ASC |DESC]) ;</p><p>#方法三：ALTER TABLE在已存在的表上创建索引<br> ALTER TABLE 表名 ADD [UNIQUE | FULLTEXT | SPATIAL ] INDEX<br> 索引名 (字段名[(长度)] [ASC |DESC]) ;</p><p>#删除索引：DROP INDEX 索引名 ON 表名字;</p><p>#方式一<br>create table t1(<br> id int,<br> name char,<br> age int,<br> sex enum(‘male’,’female’),<br> unique key uni_id(id),<br> index ix_name(name) #index没有key<br>);</p><p>#方式二<br>create index ix_age on t1(age);</p><p>#方式三<br>alter table t1 add index ix_sex(sex);</p><p>#查看<br>mysql&gt; show create table t1;<br>| t1 | CREATE TABLE <code>t1</code> (<br> <code>id</code> int(11) DEFAULT NULL,<br> <code>name</code> char(1) DEFAULT NULL,<br> <code>age</code> int(11) DEFAULT NULL,<br> <code>sex</code> enum(‘male’,’female’) DEFAULT NULL,<br> UNIQUE KEY <code>uni_id</code> (<code>id</code>),<br> KEY <code>ix_name</code> (<code>name</code>),<br> KEY <code>ix_age</code> (<code>age</code>),<br> KEY <code>ix_sex</code> (<code>sex</code>)<br>) ENGINE=InnoDB DEFAULT CHARSET=latin1</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-高并发和大流量的解决方案</title>
      <link href="/2020/09/18/php/change/gaobingfa/"/>
      <url>/2020/09/18/php/change/gaobingfa/</url>
      
        <content type="html"><![CDATA[<p>一  高并发的概念<br>在互联网时代，并发，高并发通常是指并发访问。也就是在某个时间点，有多少个访问同时到来。</p><p>二  高并发架构相关概念<br>1、QPS (每秒查询率) : 每秒钟请求或者查询的数量，在互联网领域，指每秒响应请求数(指HTTP请求)</p><p>2、PV（Page View）：综合浏览量，即页面浏览量或者点击量，一个访客在24小时内访问的页面数量</p><p>–注：同一个人浏览你的网站的同一页面，只记做一次pv</p><p>3、吞吐量（fetches/sec） ：单位时间内处理的请求数量 （通常由QPS和并发数决定）</p><p>4、响应时间：从请求发出到收到响应花费的时间</p><p>5、独立访客（UV）：一定时间范围内，相同访客多次访问网站，只计算为1个独立访客</p><p>6、带宽：计算带宽需关注两个指标，峰值流量和页面的平均大小</p><p>7、日网站带宽： PV/统计时间（换算到秒） * 平均页面大小（kb）* 8</p><p>三 需要注意点：<br>1、QPS不等于并发连接数（QPS是每秒HTTP请求数量，并发连接数是系统同时处理的请求数量）</p><p>2、峰值每秒请求数（QPS）= （总PV数<em>80%）/ （六小时秒数</em>20%）【代表80%的访问量都集中在20%的时间内】</p><p>3、压力测试： 测试能承受的最大并发数 以及测试最大承受的QPS值</p><p>4、常用的性能测试工具【ab，wrk，httpload，Web Bench，Siege，Apache JMeter】</p><p>四 优化<br>1、当QPS小于50时</p><p>优化方案:为一般小型网站,不用考虑优化</p><p>2、当QPS达到100时,遇到数据查询瓶颈</p><p>优化方案: 数据库缓存层,数据库的负载均衡</p><p>3、当QPS达到800时, 遇到带宽瓶颈</p><p>优化方案:CDN加速,负载均衡</p><p>4、当QPS达到1000时</p><p>优化方案: 做html静态缓存</p><p>5、当QPS达到2000时</p><p>优化方案: 做业务分离,分布式存储</p><p>五、高并发解决方案案例:<br>1、流量优化  </p><p>防盗链处理(去除恶意请求)</p><p>2、前端优化</p><p>(1) 减少HTTP请求[将css,js等合并]</p><p>(2) 添加异步请求(先不将所有数据都展示给用户,用户触发某个事件,才会异步请求数据)</p><p>(3) 启用浏览器缓存和文件压缩</p><p>(4) CDN加速</p><p>(5) 建立独立的图片服务器(减少I/O)</p><p>3、服务端优化</p><p>(1) 页面静态化</p><p>(2) 并发处理</p><p>(3) 队列处理</p><p>4、数据库优化</p><p>(1) 数据库缓存</p><p>(2) 分库分表,分区</p><p>(3) 读写分离</p><p>(4) 负载均衡</p><p>5、web服务器优化</p><p>(1) nginx反向代理实现负载均衡</p><p>(2) lvs实现负载均衡</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN与Git优缺点比较</title>
      <link href="/2020/09/17/git/svngit/"/>
      <url>/2020/09/17/git/svngit/</url>
      
        <content type="html"><![CDATA[<p>SVN与Git优缺点比较(属面试常问提)<br>1．SVN优缺点<br>优点：<br>1、 管理方便，逻辑明确，符合一般人思维习惯。<br>2、 易于管理，集中式服务器更能保证安全性。<br>3、 代码一致性非常高。<br>4、 适合开发人数不多的项目开发。<br>缺点：<br>1、 服务器压力太大，数据库容量暴增。<br>2、 如果不能连接到服务器上，基本上不可以工作，看上面第二步，如果服务器不能连接上，就不能提交，还原，对比等等。<br>3、 不适合开源开发（开发人数非常非常多，但是Google app engine就是用svn的）。但是一般集中式管理的有非常明确的权限管理机制（例如分支访问限制），可以实现分层管理，从而很好的解决开发人数众多的问题。</p><p>2．Git优缺点<br>优点：<br>1、适合分布式开发，强调个体。<br>2、公共服务器压力和数据量都不会太大。<br>3、速度快、灵活。<br>4、任意两个开发者之间可以很容易的解决冲突。<br>5、离线工作。<br>缺点：<br>1、学习周期相对而言比较长。<br>2、不符合常规思维。<br>3、代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10亿级订单系统分库分表设计思路</title>
      <link href="/2020/09/11/mysql/fenbiao/"/>
      <url>/2020/09/11/mysql/fenbiao/</url>
      
        <content type="html"><![CDATA[<p>一、背景<br>随着公司业务增长，如果每天1000多万笔订单的话，3个月将有约10亿的订单量，之前数据库采用单库单表的形式已经不满足于业务需求，数据库改造迫在眉睫。</p><p>二、订单数据如何划分<br>我们可以将订单数据划分成两大类型：分别是热数据和冷数据。</p><p>热数据：3个月内的订单数据，查询实时性较高;</p><p>冷数据A：3个月 ~ 12个月前的订单数据，查询频率不高;</p><p>冷数据B：1年前的订单数据，几乎不会查询，只有偶尔的查询需求;</p><p>可能这里有个疑惑为什么要将冷数据分成两类，因为根据实际场景需求，用户基本不会去查看1年前的数据，如果将这部分数据还存储在db中，那么成本会非常高，而且也不便于维护。另外如果真遇到有个别用户需要查看1年前的订单信息，可以让用户走离线数据查看。</p><p>对于这三类数据的存储，目前规划如下：</p><p>热数据： 使用mysql进行存储，当然需要分库分表；</p><p>冷数据A: 对于这类数据可以存储在ES中，利用搜索引擎的特性基本上也可以做到比较快的查询；</p><p>冷数据B: 对于这类不经常查询的数据，可以存放到Hive中；</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀</title>
      <link href="/2020/09/10/jiagou/miaosha/"/>
      <url>/2020/09/10/jiagou/miaosha/</url>
      
        <content type="html"><![CDATA[<h2 id="秒杀"><a href="#秒杀" class="headerlink" title="秒杀"></a>秒杀</h2><p>一般商家在做活动的时候，经常会遇到各种不怀好意的DDOS攻击(利用无辜的吃瓜群众夺取资源)，导致真正的我们无法获得服务！所以说高防IP还是很有必要的。</p><p>搞活动就意味着人多，接入SLB，对多台云服务器进行流量分发，可以通过流量分发扩展应用系统对外的服务能力，通过消除单点故障提升应用系统的可用性。</p><p>基于SLB价格以及灵活性考虑后面我们接入Nginx做限流分发，来保障后端服务的正常运行。</p><p>后端秒杀业务逻辑，基于Redis 或者 Zookeeper 分布式锁，Kafka 或者 Redis 做消息队列，DRDS数据库中间件实现数据的读写分离。</p><p>优化思路<br>分流、分流、分流，重要的事情说三遍，再牛逼的机器也抵挡不住高级别的并发。</p><p>限流、限流、限流，毕竟秒杀商品有限，防刷的前提下没有绝对的公平，根据每个服务的负载能力，设定流量极限。</p><p>缓存、缓存、缓存、尽量不要让大量请求穿透到DB层，活动开始前商品信息可以推送至分布式缓存。</p><p>异步、异步、异步，分析并识别出可以异步处理的逻辑，比如日志，缩短系统响应时间。</p><p>主备、主备、主备，如果有条件做好主备容灾方案也是非常有必要的(参考某年锤子的活动被攻击)。</p><p>最后，为了支撑更高的并发，追求更好的性能，可以对服务器的部署模型进行优化，部分请求走正常的秒杀流程，部分请求直接返回秒杀失败，缺点是开发部署时需要维护两套逻辑。</p><p>分层优化<br>前端优化：活动开始前生成静态商品页面推送缓存和CDN，静态文件(JS/CSS)请求推送至文件服务器和CDN。<br>网络优化：如果是全国用户，最好是BGP多线机房，减少网络延迟。<br>应用服务优化：Nginx最佳配置、Tomcat连接池优化、数据库配置优化、数据库连接池优化。<br>全链路压测<br>分析需压测业务场景涉及系统<br>协调各个压测系统资源并搭建压测环境<br>压测数据隔离以及监控(响应时间、吞吐量、错误率等数据以图表形式实时显示)<br>压测结果统计(平均响应时间、平均吞吐量等数据以图表形式在测试结束后显示)<br>优化单个系统性能、关联流程以及整个业务流程<br>整个压测优化过程就是一个不断优化不断改进的过程，事先通过测试不断发现问题，优化系统，避免问题，指定应急方案，才能让系统的稳定性和性能都得到质的提升。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创业之路</title>
      <link href="/2020/09/04/company/chuangye/"/>
      <url>/2020/09/04/company/chuangye/</url>
      
        <content type="html"><![CDATA[<p>虽然今年的疫情如此情况下，4月来自朋友几个呼唤，毅然不容的出去创业了。本身是一个小白创业，很多东西都不懂，只懂技术这块并且还是不够深入。但是趁着一股热，出去创业。到目前为止项目是从0-1开发完成，并且已经上线。但是这次仍然是失败的，但是心不甘。如果有第二次创业机会还会继续。<br>心得，通过这次创业收获对技术管理并且学习不少整个公司组织架构需要哪些东西整合等等，也是给自己不少经验。同时也是从另一方面来说，切记勿要一股脑就搞创业，创业基本80%以上是失败的，只有很少数才能真正上岸成功。除非一方面有资金资源，有强大的背景。另一方面产品的确能够一下子拓展市场并得到市场很好的反馈，不然很难生存。</p>]]></content>
      
      
      <categories>
          
          <category> 创业 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 公司 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql优化</title>
      <link href="/2020/09/03/mysql/youhua/"/>
      <url>/2020/09/03/mysql/youhua/</url>
      
        <content type="html"><![CDATA[<h2 id="sql语句应该考虑哪些安全性？"><a href="#sql语句应该考虑哪些安全性？" class="headerlink" title="sql语句应该考虑哪些安全性？"></a>sql语句应该考虑哪些安全性？</h2><p>（1）防止sql注入，对特殊字符进行转义，过滤或者使用预编译sql语句绑定；<br>（2）使用最小权限原则，特别是不要使用root账户，微不同的动作或者操作建立不同的账户；<br>（3）当sql出错时，不要把数据库出错的信息暴露到客户端。</p><h2 id="sql查询时候怎么优化？"><a href="#sql查询时候怎么优化？" class="headerlink" title="sql查询时候怎么优化？"></a>sql查询时候怎么优化？</h2><p>1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by<br>涉及的列上建立索  </p><p>2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：引。</p><p>select id from t where num is null</p><p>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</p><p>select id from t where num=0</p><p>3.应尽量避免在 where<br>子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p><p>4.应尽量避免在 where 子句中使用 or<br>来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p><p>select id from t where num=10 or num=20</p><p>可以这样查询：</p><p>select id from t where num=10</p><p>union all</p><p>select id from t where num=20</p><p>5.in 和 not in 也要慎用，否则会导致全表扫描，如：</p><p>select id from t where num in(1,2,3)<br>对于连续的数值，能用 between 就不要用 in 了：</p><p>select id from t where num between 1 and 3</p><p>6.下面的查询也将导致全表扫描：</p><p>select id from t where name like ‘%abc%’</p><p>若要提高效率，可以考虑全文检索。</p><p>7.如果在 where<br>子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</p><p>select id from t where num=@num</p><p>可以改为强制查询使用索引：</p><p>select id from t with(index(索引名)) where num=@num</p><p>8.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><p>select id from t where num/2=100</p><p>应改为:</p><p>select id from t where num=100*2</p><p>9.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><p>select id from t where<br>substring(name,1,3)=’abc’–name以abc开头的id</p><p>select id from t where<br>datediff(day,createdate,’2005-11-30’)=0–‘2005-11-30’生成的id</p><p>应改为:</p><p>select id from t where name like ‘abc%’</p><p>select id from t where createdate&gt;=’2005-11-30’<br>and createdate&lt;’2005-12-1’</p><p>10.不要在 where<br>子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p><p>11.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p><p>12.不要写一些没有意义的查询，如需要生成一个空表结构：</p><p>select col1,col2 into #t from t where 1=0</p><p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：</p><p>create table #t(…)</p><p>13.很多时候用 exists 代替 in 是一个好的选择：</p><p>select num from a where num in(select num from b)</p><p>用下面的语句替换：</p><p>select num from a where exists(select 1 from b where<br>num=a.num)</p><p>14.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p><p>15.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及<br>update 的效率，因为 insert 或 update<br>时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p><p>16.应尽可能的避免更新 clustered 索引数据列，因为 clustered<br>索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered<br>索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p><p>17.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p><p>18.尽可能的使用 varchar/nvarchar 代替 char/nchar<br>，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><p>19.任何地方都不要使用 select * from t<br>，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p><p>20.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p><p>21.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p><p>22.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p><p>23.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create<br>table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p><p>24.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table<br>，然后 drop table ，这样可以避免系统表的较长时间锁定。</p><p>25.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p><p>26.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p><p>27.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD<br>游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p><p>28.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET<br>NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。</p><p>29.尽量避免大事务操作，提高系统并发能力。</p><p>30.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><h2 id="MySQL-Query-语句优化的基本思路和原则"><a href="#MySQL-Query-语句优化的基本思路和原则" class="headerlink" title="MySQL Query 语句优化的基本思路和原则"></a>MySQL Query 语句优化的基本思路和原则</h2><p>优化需要优化的 Query；<br>定位优化对象的性能瓶颈；<br>明确优化目标；<br>从 Explaing 入手；<br>多使用 Profile；<br>永远用小结果集推动大的结果集；<br>尽可能在索引中完成排序；<br>只取自己需要的 Columns；<br>仅仅使用最有效的过滤条件；<br>尽可能避免复杂的 Join 和子查询。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="/2020/07/13/web/websocket/"/>
      <url>/2020/07/13/web/websocket/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是websocket？"><a href="#什么是websocket？" class="headerlink" title="什么是websocket？"></a>什么是websocket？</h2><p>“WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。<br>WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。”</p><h2 id="为什么需要websocket？"><a href="#为什么需要websocket？" class="headerlink" title="为什么需要websocket？"></a>为什么需要websocket？</h2><p>​ 前端和后端的交互模式最常见的就是前端发数据请求，从后端拿到数据后展示到页面中。如果前端不做操作，后端不能主动向前端推送数据，这也是http协议的缺陷。因此，一种新的通信协议应运而生—websocket，他最大的特点就是服务端可以主动向客户端推送消息，客户端也可以主动向服务端发送消息，实现了真正的平等。</p><h2 id="WebSocket的优点"><a href="#WebSocket的优点" class="headerlink" title="WebSocket的优点"></a>WebSocket的优点</h2><p>• 实时性。个人认为这是最大的优点，因为这个特性，使得WebSocket在很多应用场景变得非常实用。如游戏、实时在线聊天、实时预警等。<br>• 较少的控制开销。由于只需要建立一次连接，所以服务器、浏览器开销都较小。并且WebSocket协议数据包头部数据比较小，服务器到浏览器只有2-10字节；而浏览器到服务器之间只需要再加4字节作为掩码。<br>• 连接状态一直保持。浏览器与服务器之间建立一次有状态连接，除了第一次连接需要携带一些状态数据外，之后的通讯都可以省略。<br>• 可支持扩展。用户能够根据WebSocket扩展子协议<br>• 更好的压缩效果。相对于HTTP压缩，Websocket在适当的扩展支持下，可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率。<br>• 与HTTP协议有这较好的兼容性。默认采用80和443端口，握手阶段采用HTTP协议；因此不容易屏蔽，能够通过这种HTTP代理服务器<br>• 更好的二进制支持<br>• 没有同源限制，麻麻再也不用担心我的跨域问题啦~</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础面试js</title>
      <link href="/2020/07/13/web/mianshi01/"/>
      <url>/2020/07/13/web/mianshi01/</url>
      
        <content type="html"><![CDATA[<h2 id="说说Js的数据类型都有哪些"><a href="#说说Js的数据类型都有哪些" class="headerlink" title="说说Js的数据类型都有哪些"></a>说说Js的数据类型都有哪些</h2><p>说说Js的数据类型都有哪些<br>基本类型</p><p>String<br>Number<br>Boolean<br>null<br>undefined<br>symbol</p><p>引用类型</p><p>object</p><h2 id="说说Http状态码"><a href="#说说Http状态码" class="headerlink" title="说说Http状态码"></a>说说Http状态码</h2><p>1** 信息，服务器收到请求，需要请求者继续执行操作(101，升级为websocket协议)<br>2** 成功，操作被成功接收并处理(206,部分内容，分段传输)<br>3** 重定向，需要进一步操作以完成请求(301,302重定向；304命中缓存)<br>4** 客户端错误，请求包含语法错误或无法完成请求(401,要求身份验证；403，服务器理解客服端需求，但是禁止访问)<br>5** 服务器错误，服务器在处理请求的过程中发生了错误</p><p>说说ajax状态码，ajax一定是异步的吗？<br>ajax不一定是异步的，可以通过open方法的第三个参数来配置(默认为true，异步)<br>状态码：</p><p>0 - (未初始化)还没有调用send()方法<br>1 - (载入)已调用send()方法，正在发送请求<br>2 - (载入完成)send()方法执行完成<br>3 - (交互)正在解析响应内容<br>4 - (完成)响应内容解析完成，可以在客户端调用了</p><h2 id="说说ajax是什么？优势？劣势？应该注意的问题？"><a href="#说说ajax是什么？优势？劣势？应该注意的问题？" class="headerlink" title="说说ajax是什么？优势？劣势？应该注意的问题？"></a>说说ajax是什么？优势？劣势？应该注意的问题？</h2><p>ajax是一种和后台通信的标准。全称是Asynchronous Javascript And XML(异步javascript和XML)。<br>优势：</p><p>无需刷新页面请求数据，可以使产品更快、更小、更友好<br>可以把以前服务端的任务转嫁到客户端来处理，减轻服务器负担，节省带宽<br>浏览器支持好，无需插件</p><p>劣势：</p><p>不支持浏览器的回退按钮<br>安全性存在问题，能够在用户不知情的情况下发送请求<br>暴露了http交互细节<br>对搜索引擎(网络爬虫)的支持比较弱<br>程序不容易调试</p><p>注意的问题：</p><p>浏览器兼容性问题，这个问题jQuery等库已经帮我们封装好了<br>跨域问题，不同域之间不允许通过ajax进行访问，可以参考阮一峰老师的跨域资源共享 CORS 详解<br>为了更快的速度和对搜索引擎友好，首页尽量不要用ajax而是服务端渲染(当然这看分场景)<br>ajax适合增删改查操作</p><p>你把下面的表达式的打印结果写出来<br>1.toString()  //Uncaught SyntaxError: Invalid or unexpected token<br>true.toString()  //“true”<br>[].toString()  //“”<br>{}.toString()  //Uncaught SyntaxError: Unexpected token .<br>null.toString()  //Uncaught TypeError: Cannot read property ‘toString’ of null<br>undefined.toString()  //Uncaught TypeError: Cannot read property ‘toString’ of undefined<br>NaN.toString()   //“NaN”<br>复制代码这些需要刻意背一下，其中1和{}是语法错误。null和undefined是因为没有toString方法,可以使用call来借用(想详细了解，可以到评论区看我如何被骂的)：<br>1..toString()   //“1”<br>(1).toString()  //“1”<br>Number(1).toString()  //“1”<br>({}).toString()  //[object Object]<br>Object.prototype.toString.call(null)   //[object Null]<br>Object.prototype.toString.call(undefined)   //[object Undefined]<br>复制代码</p><h2 id="前端性能优化你了解哪些"><a href="#前端性能优化你了解哪些" class="headerlink" title="前端性能优化你了解哪些"></a>前端性能优化你了解哪些</h2><p>内容层面</p><p>使用CDN<br>单域名、多域名，单域名可以减少DNS查找次数，多域名可以增加浏览器并行下载数量，这需要权衡，一般同一个域下不要超过四个资源。<br>避免重定向(分场景)<br>避免404</p><p>网络层面</p><p>利用缓存，可以参考另一篇文章手写文件服务器，说说前后端交互<br>文件压缩(通过响应头Accept-Encoding: gzip, deflate, br告诉服务器你支持的压缩类型)<br>按需加载，提取公共代码，tree-shaking等(都可以通过webpack来实现)<br>减少cookie大小<br>文件合并，通过css雪碧图合并图片<br>文件预加载、图片懒加载</p><p>渲染层间</p><p>js放底部，css放顶部<br>减少reflow(回流)和repaint(重绘)<br>减少dom节点</p><p>代码层面</p><p>缓存dom节点，减少节点查找，css选择器层级优化<br>减少dom节点操作<br>合理使用break、continue、return等，优化循环<br>像react用到的事件委托、对象池等手段</p><h2 id="说说浏览器的reflow和repaint"><a href="#说说浏览器的reflow和repaint" class="headerlink" title="说说浏览器的reflow和repaint"></a>说说浏览器的reflow和repaint</h2><p>浏览器解析过程</p><p>解析html生成dom树<br>解析css<br>把css应用于dom树，生成render树(这里记录这每一个节点和它的样式和所在的位置)<br>把render树渲染到页面</p><p>reflow(回流)<br>reflow翻译为回流，指的是页面再次构建render树。每个页面至少发生一次回流，就是第一次加载页面的时候<br>此外，当页面中有任何改变可能造成文档结构发生改变(即元素间的相对或绝对位置改变)，都会发生reflow，常见的有：</p><p>添加或删除元素(opacity:0除外，它不是删除)<br>改变某个元素的尺寸或位置<br>浏览器窗口改变(resize事件触发)</p><p>repaint(重绘)<br>repaint翻译为重绘，它可以类比为上面的第四步，根据render树绘制页面，它的性能损耗比回流要小。每次回流一定会发生重绘。此外，以下操作(不影响文档结构的操作，影响结构的会发生回流)也会发生重绘：</p><p>元素的颜色、透明度改变<br>text-align等</p><p>浏览器优化<br>我们不太容易精确知道哪些操作具体会造成哪些元素回流，不同的浏览器都有不同的实现。但是确定是他们的的耗时是比较长的，因为涉及到大量的计算。<br>浏览器为了提升性能也对这个问题进行了优化。方案就是维护一个队列,把所有需要回流和重绘的操作都缓存起来，一段时间之后再统一执行。但是，有的时候我们需要获取一些位置属性，当我们一旦调用这些api的时候，浏览器不得不立即计算队列以保证提供的数据是准确的。例如以下操作：</p><p>offsetTop, offsetLeft, offsetWidth, offsetHeight<br>scrollTop/Left/Width/Height<br>clientTop/Left/Width/Height<br>width,height<br>getComputedStyle或者IE的currentStyle</p><p>注意问题</p><p>批量处理</p><p>使用DocumentFragment进行缓存，这样只引发一次回流<br>把频繁操作的元素先display：null，只引发两次回流<br>cloneNode和replaceChild，只引发两次回流</p><p>不要频繁更改style，而是更改class<br>避免频繁调用offsetTop等属性，在循环前把它缓存起来<br>绝对定位具有复杂动画的元素，否则会引起父元素和后续大量元素的频繁回流</p><h2 id="如何去除字符串首位空格？"><a href="#如何去除字符串首位空格？" class="headerlink" title="如何去除字符串首位空格？"></a>如何去除字符串首位空格？</h2><p>//es6<br>‘ ab ‘.trim()      //“ab”<br>//正则<br>‘ ab ‘.replace(/^\s<em>|\s</em>$/g,’’)  //“ab”<br>复制代码如何获取url中的查询字符串<br>function queryUrlParameter(str) {<br>    let obj = {}<br>    let reg = /([^?=&amp;#]+)=([^?=&amp;#]+)/g;<br>    str.replace(reg, function () {<br>        obj[arguments[1]] = arguments[2]<br>    })<br>    //如果加上hash<br>    // reg = /#([^?&amp;=#]+)/g<br>    // if (reg.test(str)) {<br>    //     str.replace(reg, function () {<br>    //         obj.hash = arguments[1]<br>    //     })<br>    // }<br>    return obj<br>}<br>console.log(queryUrlParameter(‘<a href="http://www.baidu.com?a=1&amp;b=2#12222&#39;" target="_blank" rel="noopener">http://www.baidu.com?a=1&amp;b=2#12222&#39;</a>))  //{ a: ‘1’, b: ‘2’}<br>复制代码如何实现一个深拷贝、深比较<br>深拷贝<br>function clone(obj) {<br>  if (obj == null || typeof obj !== ‘object’) return obj</p><p>  let newObj = null</p><p>  // 时间对象有特殊性<br>  if (obj.constructor === Date) {<br>    newObj = new obj.constructor(obj)<br>  } else {<br>    newObj = obj.constructor()<br>  }</p><p>  for (let key in Object.getOwnPropertyDescriptors(obj)) {<br>    newObj[key] = clone(obj[key])<br>  }<br>  return newObj<br>}<br>复制代码深比较<br>function deepCompare(a, b){<br>  if(a === null<br>    || typeof a !== ‘object’<br>    || b === null<br>    || typeof b !== ‘object’){<br>    return a === b<br>  }</p><p>  const propsA = Object.getOwnPropertyDescriptors(a)<br>  const propsB = Object.getOwnPropertyDescriptors(b)<br>  if(Object.keys(propsA).length !== Object.keys(propsB).length){<br>    return false<br>  }</p><p>  return Object.keys(propsA).every( key =&gt; deepCompare(a[key], b[key]))</p><p>}</p><p>复制代码如何实现函数节流和防抖<br>节流<br>function throttle(fn, delay) {<br>  delay = delay || 50<br>  let statTime = 0<br>  return function () {<br>    statTime === 0 &amp;&amp; fn.apply(this, arguments)<br>    let currentTime = new Date()<br>    if (currentTime - statTime &gt; delay) {<br>      fn.apply(this, arguments)<br>      statTime = currentTime<br>    }<br>  }<br>}</p><p>let throttleFn = throttle(fn)</p><p>throttleFn()//只会执行一次<br>throttleFn()<br>throttleFn()<br>throttleFn()<br>复制代码防抖<br>function debounce(fn, delay) {<br>  delay = delay || 50<br>  let timer = null<br>  return function () {<br>    let self = this<br>    clearTimeout(timer)<br>    timer = setTimeout(fn.bind(self, arguments), delay);<br>  }<br>}<br>复制代码你给我写一个原生bind方法<br>Function.prototype._bind = function (context) {<br>  let self = this<br>  let args_1 = [].prototype.slice.call(arguments, 1)<br>  return function () {<br>    let args_2 = [].prototype.slice.call(arguments)<br>    let args = args_1.concat(args_2)<br>    return self.apply(context, args)<br>  }<br>}<br>复制代码这只是对bind的一种简单实现，如果有兴趣了解更多可以参考Javascript中bind()方法的使用与实现<br>如何实现一个数组的展平<br>function (ary) {<br>    return ary.toString().split(‘,’)<br>}<br>复制代码这是一个投机取巧的方法(面试写个这个也凑合吧)，如果有兴趣可以搜索一下其他实现方法</p><h2 id="如何添加、删除、移动、复制DOM节点"><a href="#如何添加、删除、移动、复制DOM节点" class="headerlink" title="如何添加、删除、移动、复制DOM节点"></a>如何添加、删除、移动、复制DOM节点</h2><p>创建</p><p>createTextNode() //创建文本节点<br>createElement() //创建元素节点<br>createDocumentFragment()  //创建文档碎片</p><p>操作</p><p>appendChild()  //增加<br>removeChild()  //删除<br>replaceChild()  //替换<br>insertBefore()  //插入</p><p>查找</p><p>getElementById()<br>getElementByTagName()<br>getElementByName()</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>phpini中文详解</title>
      <link href="/2020/04/09/php/base/phpini/"/>
      <url>/2020/04/09/php/base/phpini/</url>
      
        <content type="html"><![CDATA[<p>[PHP]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br></pre></td><td class="code"><pre><span class="line">;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; 关于 php.ini ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; PHP 的初始化文件，普遍被称为 php.ini，负责配置 PHP 很多方面行为。</span><br><span class="line"></span><br><span class="line">; PHP 将在这些地方依次查找该文件：</span><br><span class="line">; 1. SAPI 模块指定位置。</span><br><span class="line">; 2. PHPRC 环境变量。</span><br><span class="line">; 3. 在 Windows 中是预定义注册表的键值。</span><br><span class="line">; 4. 当前工作路径（除了 CLI）</span><br><span class="line">; 5. web 服务器路径（对 SAPI 模块），或者是 PHP 的路径（除非在 Windows）</span><br><span class="line">; 6. 与 --with-config-file-path 编译时选项中的目录，或</span><br><span class="line">; Windows 目录(（C:\ Windows 或 C:\winnt）</span><br><span class="line">; 查看 PHP 文档以获得更多的特殊信息。</span><br><span class="line">; http:&#x2F;&#x2F;php.net&#x2F;configuration.file</span><br><span class="line"></span><br><span class="line">; 该文件的语法非常简单。空白字符和用分号&#39;;&#39;开始的行被简单地忽略（就象你可能</span><br><span class="line">; 猜到的一样）。 章节标题（例如 : [Foo]）也被简单地忽略，即使将来它们可能</span><br><span class="line">; 有某种的意义。</span><br><span class="line">;</span><br><span class="line">; 指示被指定使用如下语法：</span><br><span class="line">; 指示标识符 &#x3D; 值</span><br><span class="line">; directive &#x3D; value</span><br><span class="line">; 指示标识符 是 *大小写敏感的* - foo&#x3D;bar 不同于 FOO &#x3D; bar。</span><br><span class="line">;</span><br><span class="line">; 值可以是一个字符串，一个数字，一个 PHP 常量（如： E_ALL or M_PI）, INI 常量中的</span><br><span class="line">; 一个（On, Off, True, False, Yes, No and None），或是一个表达式</span><br><span class="line">; （如: E_ALL &amp; ~E_NOTICE）, 或是用引号括起来的字符串（&quot; foo&quot; ）。</span><br><span class="line">;</span><br><span class="line">; INI 文件的表达式被限制于位运算符和括号。</span><br><span class="line">; | bitwise OR</span><br><span class="line">; &amp; bitwise AND</span><br><span class="line">; ~ bitwise NOT</span><br><span class="line">; ! boolean NOT</span><br><span class="line">;</span><br><span class="line">; 布尔标志可用 1，On，True 或 Yes 这些值置于启用的状态。</span><br><span class="line">; 它们可用 0，Off，False 或 No 这些值置于关闭的状态。</span><br><span class="line">;</span><br><span class="line">; 一个空字符串可以用在等号后不写任何东西表示，或者用 None 关键字:</span><br><span class="line">;</span><br><span class="line">; foo &#x3D; ; 将foo置为空字符串</span><br><span class="line">; foo &#x3D; None ; 将 foo 置为空字符串</span><br><span class="line">; foo &#x3D; &quot; None&quot; ; 将 foo 置为字符串 &#39;None&#39;</span><br><span class="line">;</span><br><span class="line">; 如果你值设置中使用常量，而这些常量属于动态调入的扩展库（不是 PHP 的扩展，就是 Zend 的扩展），你仅可以调入这些扩展的行*之后*使用这些常量。</span><br><span class="line">;</span><br><span class="line">; 所有在 php.ini-dist 文件里设定的值与内建的默认值相同（这是说，如果 php.ini 没被使用或者你删掉了这些行，默认值与之相同）。</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; 语言选项 ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">engine &#x3D; On</span><br><span class="line">; 使 PHP scripting language engine（PHP 脚本语言引擎）在 Apache下有效。</span><br><span class="line">short_open_tag &#x3D; On</span><br><span class="line">; 允许短开标志被识别。</span><br><span class="line">asp_tags &#x3D; Off</span><br><span class="line">; 允许 ASP 风格 标志</span><br><span class="line">precision &#x3D; 14</span><br><span class="line">; 浮点类型数显示时的有效位数</span><br><span class="line"></span><br><span class="line">y2k_compliance &#x3D; Off</span><br><span class="line">; 是否打开 2000 年适应 (可能在非 Y2K 适应的浏览器中导致问题)</span><br><span class="line"></span><br><span class="line">output_buffering &#x3D; Off</span><br><span class="line">; 输出缓存允许你甚至在输出正文内容之后发送 header（标头，包括 cookies）行</span><br><span class="line">; 其代价是输出层减慢一点点速度。你可以使用输出缓存在运行时打开输出缓存，</span><br><span class="line">; 或者在这里将指示设为 On 而使得所有文件的输出缓存打开。</span><br><span class="line">output_handler &#x3D; ; 你可以重定向你的脚本的所有输出到一个函数，</span><br><span class="line">; 那样做可能对处理或以日志记录它有用。</span><br><span class="line">; 例如若你将这个 output_handler 设为 &quot;ob_gzhandler&quot;  ,</span><br><span class="line">; 则输出会被透明地为支持 gzip 或 deflate 编码的浏览器压缩。</span><br><span class="line">; 设一个输出处理器自动地打开输出缓冲。</span><br><span class="line"></span><br><span class="line">implicit_flush &#x3D; Off</span><br><span class="line">; 强制flush（刷新）让 PHP 告诉输出层在每个输出块之后自动刷新自身数据。</span><br><span class="line">; 这等效于在每个 print() 或 echo() 调用和每个 HTML 块后调用 flush() 函数。</span><br><span class="line">; 打开这项设置会导致严重的运行时冲突，建议仅在 debug 过程中打开。</span><br><span class="line"></span><br><span class="line">allow_call_time_pass_reference &#x3D; On</span><br><span class="line">; 是否让强迫函数调用时按引用传递参数。这一方法遭到抗议，</span><br><span class="line">; 并可能在将来版本的 PHP&#x2F;Zend 里不再支持。</span><br><span class="line">; 受到鼓励的指定哪些参数按引用传递的方法是在函数声明里。</span><br><span class="line">; 你被鼓励尝试关闭这一选项并确认你的脚本仍能正常工作，以保证在将来版本的语言里</span><br><span class="line">; 它们仍能工作。（你将在每次使用该特点时得到一个警告，而参数将按值而不是按引用</span><br><span class="line">; 传递）。</span><br><span class="line"></span><br><span class="line">; Safe Mode 安全模式</span><br><span class="line">safe_mode &#x3D; Off</span><br><span class="line">safe_mode_exec_dir &#x3D;</span><br><span class="line">safe_mode_allowed_env_vars &#x3D; PHP_</span><br><span class="line">; 该指示包含用逗号分隔的前缀列表。安全模式中，用户仅可以替换</span><br><span class="line">; 以在此列出的前缀开头的环境变量的值。</span><br><span class="line">; 默认地，用户将仅能 设定以 PHP_ 开头的环境变量，（如: PHP_FOO &#x3D; BAR）。</span><br><span class="line">; 注意: 如果这一指示为空，PHP 将让用户更改任意环境变量!</span><br><span class="line"></span><br><span class="line">safe_mode_protected_env_vars &#x3D; LD_LIBRARY_PATH</span><br><span class="line">; 这条指示包含一个用逗号分隔的环境变量列表，那是最终用户将不能用 putenv() 更改的。</span><br><span class="line">; 这些变量甚至在 safe_mode_allowed_env_vars 设置为允许的情况下得到保护。</span><br><span class="line"></span><br><span class="line">disable_functions &#x3D;</span><br><span class="line">; 这条指示让你可以为了安全的原因让特定函数失效。</span><br><span class="line">; 它接受一个用逗号分隔的函数名列表。</span><br><span class="line">; 这条指示 *不受* 安全模式是否打开的影响。</span><br><span class="line"></span><br><span class="line">; 语法高亮模式的色彩。</span><br><span class="line">; 只要能被接受的东西就能工作。</span><br><span class="line"></span><br><span class="line">highlight.string &#x3D; #DD0000</span><br><span class="line">highlight.comment &#x3D; #FF8000</span><br><span class="line">highlight.keyword &#x3D; #007700</span><br><span class="line">highlight.bg &#x3D; #FFFFFF</span><br><span class="line">highlight.default &#x3D; #0000BB</span><br><span class="line">highlight.html &#x3D; #000000</span><br><span class="line"></span><br><span class="line">; Misc 杂项</span><br><span class="line">expose_php &#x3D; Off</span><br><span class="line">; 决定 PHP 是否标示它装在服务器上的事实（例如：加在它 — PHP— 给 Web 服务</span><br><span class="line">; 发送的信号上）。</span><br><span class="line">; （我个人的意见，在出现什么 power-by 的 header 的时候，把这关掉。）</span><br><span class="line">; 它不会有安全上的威胁, 但它使检查你的服务器上是否安装了 PHP 成为了可能。</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; Resource Limits ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">max_execution_time &#x3D; 30 ; 每个脚本的最大执行时间，按秒计</span><br><span class="line">memory_limit &#x3D; 8388608 ; 一个脚本最大可使用的内存总量（这里是 8 MB）</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; 出错控制和登记 ;</span><br><span class="line">; Error handling and logging ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">; 错误报告是按位的。或者将数字加起来得到想要的错误报告等级。</span><br><span class="line">; E_ALL - 所有的错误和警告</span><br><span class="line">; E_ERROR - 致命性运行时错</span><br><span class="line">; E_WARNING - 运行时警告（非致命性错）</span><br><span class="line">; E_PARSE - 编译时解析错误</span><br><span class="line">; E_NOTICE - 运行时提醒(这些经常是是你的代码的bug引起的，</span><br><span class="line">;也可能是有意的行为造成的。(如：基于未初始化的变量自动初始化为一个</span><br><span class="line">;空字符串的事实而使用一个未初始化的变量)</span><br><span class="line"></span><br><span class="line">; E_CORE_ERROR - 发生于PHP启动时初始化过程中的致命错误</span><br><span class="line">; E_CORE_WARNING - 发生于PHP启动时初始化过程中的警告(非致命性错)</span><br><span class="line">; E_COMPILE_ERROR - 编译时致命性错</span><br><span class="line">; E_COMPILE_WARNING - 编译时警告(非致命性错)</span><br><span class="line">; E_USER_ERROR - 用户产生的出错消息</span><br><span class="line">; E_USER_WARNING - 用户产生的警告消息</span><br><span class="line">; E_USER_NOTICE - 用户产生的提醒消息</span><br><span class="line">; 例子:</span><br><span class="line">; error_reporting &#x3D; E_ALL &amp; ~E_NOTICE ; 显示所有的错误，除了提醒</span><br><span class="line">; error_reporting &#x3D; E_COMPILE_ERROR|E_ERROR|E_CORE_ERROR ; 仅显示错误</span><br><span class="line">error_reporting &#x3D; E_ALL &amp; ~E_NOTICE ; 显示所有的错误，除了提醒</span><br><span class="line">display_errors &#x3D; On ; 显示出错误信息(作为输出的一部分)</span><br><span class="line">; 在最终发布的 web 站点上，强烈建议你关掉这个特性，并使用</span><br><span class="line">; 错误日志代替（参看下面）。</span><br><span class="line">; 在最终发布的 web 站点继续让 display_errors 有效可能</span><br><span class="line">; 暴露一些有关安全的信息，例如你的 web 服务上的文件路径、</span><br><span class="line">; 你的数据库规划或别的信息。</span><br><span class="line">display_startup_errors &#x3D; Off ; 甚至当 display_erroes 打开了，发生于 PHP 的启动的步骤中</span><br><span class="line">; 的错误也不会被显示。</span><br><span class="line">; 强烈建议保持使 display_startup_errors 关闭，</span><br><span class="line">; 除了在改错过程中。</span><br><span class="line">log_errors &#x3D; Off ; 在日志文件里记录错误（服务器指定的日志，stderr标准错误输出，或 error_log (下面的））</span><br><span class="line">; 正如上面说明的那样，强烈建议你在最终发布的 web 站点以日志记录错误</span><br><span class="line">; 取代直接错误输出。</span><br><span class="line"></span><br><span class="line">track_errors &#x3D; Off ; 保存最近一个 错误&#x2F;警告 消息于变量 $php_errormsg (boolean)</span><br><span class="line">;error_prepend_string &#x3D; &quot; &quot; ; 于错误信息前输出的字符串</span><br><span class="line">;error_append_string &#x3D; &quot; &quot; ; 于错误信息后输出的字符串</span><br><span class="line">;error_log &#x3D; filename ; 记录错误日志于指定文件</span><br><span class="line">;error_log &#x3D; syslog ; 记录错误日志于系统日志 syslog (NT 下的事件日志, Windows 95 下无效)</span><br><span class="line">warn_plus_overloading &#x3D; Off ; 当将‘ +’ 用于字符串时警告</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;</span><br><span class="line">; 数据处理 ;</span><br><span class="line">; Data Handling ;</span><br><span class="line">;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">variables_order &#x3D; &quot; EGPCS&quot; ; 这条指示描述了 PHP 记录</span><br><span class="line">; GET, POST, Cookie, Environment and Built-in 这些变量的顺序。</span><br><span class="line">; （以 G, P, C, E &amp; S 代表，通常以 EGPCS 或 GPC 的方式引用）。</span><br><span class="line">; 按从左到右记录，新值取代旧值。</span><br><span class="line"></span><br><span class="line">register_globals &#x3D; On ; 是否将这些 EGPCS 变量注册为全局变量。</span><br><span class="line">; 若你不想让用户数据不在全局范围内混乱的话，你可能想关闭它。</span><br><span class="line">; 这和 track_vars 连起来用更有意义 — 这样你可以通过</span><br><span class="line">; $HTTP_*_VARS[] 数组访问所有的 GPC 变量。</span><br><span class="line"></span><br><span class="line">register_argc_argv &#x3D; On ; 这条指示告诉 PHP 是否声明 argv 和 argc 变量</span><br><span class="line">; （注：这里 argv 为数组, argc 为变量数）</span><br><span class="line">; （其中包含用 GET 方法传来的数据）。</span><br><span class="line">; 若你不想用这些变量，你应当关掉它以提高性能。</span><br><span class="line"></span><br><span class="line">track_vars &#x3D; On ; 使 $HTTP_*_VARS[] 数组有效，这里 在使用时用</span><br><span class="line">; ENV, POST, GET, COOKIE or SERVER 替换</span><br><span class="line">post_max_size &#x3D; 8M ; PHP 将接受的 POST 数据最大大小。</span><br><span class="line">gpc_order &#x3D; &quot; GPC&quot; ; 这条指示被人反对。用 variables_order 代替。</span><br><span class="line"></span><br><span class="line">; Magic quotes</span><br><span class="line">magic_quotes_gpc &#x3D; On ; 在输入的 GET&#x2F;POST&#x2F;Cookie 数据里使用魔术引用</span><br><span class="line">; （原文就这样，呵呵，所谓 magic quotes 应该是指用转义符加在引用性的控制字符上，如 ....）</span><br><span class="line">magic_quotes_runtime&#x3D; Off ; 对运行时产生的数据使用魔术引用，</span><br><span class="line">; 例如：用 SQL 查询得到的数据，用 exec() 函数得到的数据，等等</span><br><span class="line">magic_quotes_sybase &#x3D; Off ; 采用 Sybase 形式的魔术引用（用 &#39;&#39; 脱出 &#39; 而不用 &#39;）</span><br><span class="line"></span><br><span class="line">; 自动在 PHP 文档之前和之后添加文件</span><br><span class="line">auto_prepend_file &#x3D;</span><br><span class="line">auto_append_file &#x3D;</span><br><span class="line"></span><br><span class="line">; 象 4.04b4 一样，PHP 默认地总是在 “ Content-type:” 头标输出一个字符的编码方式。</span><br><span class="line">; 让输出字符集失效，只要设置为空。</span><br><span class="line">; PHP 的内建默认值是 text&#x2F;html</span><br><span class="line">default_mimetype &#x3D; &quot; text&#x2F;html&quot;</span><br><span class="line">;default_charset &#x3D; &quot; iso-8859-1&quot;</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; 路径和目录 ;</span><br><span class="line">; Paths and Directories ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;;;;; </span><br><span class="line"></span><br><span class="line">include_path &#x3D; ; include 路径设置，UNIX: &quot; &#x2F;path1:&#x2F;path2&quot; Windows: &quot; \path1;\path2&quot;</span><br><span class="line">doc_root &#x3D; ; php 页面的根路径，仅在非空时有效</span><br><span class="line">user_dir &#x3D; ; 告知 php 在使用 &#x2F;~username 打开脚本时到哪个目录下去找，仅在非空时有效</span><br><span class="line">;upload_tmp_dir &#x3D; ; 存放用 HTTP 协议上载的文件的临时目录（在没指定时使用系统默认的）</span><br><span class="line">upload_max_filesize &#x3D; 2097152 ; 文件上载默认地限制为 2 Meg</span><br><span class="line">extension_dir &#x3D; c:\php\ ; 存放可加载的扩充库（模块）的目录</span><br><span class="line">enable_dl &#x3D; On ; 是否使 dl() 有效。</span><br><span class="line">; 在多线程的服务器上 dl() 函数*不能*很好地工作，</span><br><span class="line">; 例如 IIS or Zeus，并在其上默认为禁止</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;</span><br><span class="line">; 文件上传 ;</span><br><span class="line">; File Uploads ;</span><br><span class="line">;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">file_uploads &#x3D; On ; 是否允许 HTTP 方式文件上载</span><br><span class="line">;upload_tmp_dir &#x3D; ; 用于 HTTP 上载的文件的临时目录（未指定则使用系统默认）</span><br><span class="line">upload_max_filesize &#x3D; 2M ; 上载文件的最大许可大小</span><br><span class="line"></span><br><span class="line">; Fopen wrappers ;</span><br><span class="line"></span><br><span class="line">allow_url_fopen &#x3D; On ; 是否允许把 URLs 当作 http:.. 或把文件当作 ftp:...</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; 动态扩展 ;</span><br><span class="line">; Dynamic Extensions ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">; 若你希望一个扩展库自动加载，用下面的语法：</span><br><span class="line">; extension&#x3D;modulename.extension</span><br><span class="line">; 例如，在 windows 上，</span><br><span class="line">; extension&#x3D;msql.dll</span><br><span class="line">; or 在 UNIX 下,</span><br><span class="line">; extension&#x3D;msql.so</span><br><span class="line">; 注意，这只应当是模块的名字，不需要目录信息放在里面。</span><br><span class="line">; 用上面的 extension_dir 指示指定扩展库的位置。</span><br><span class="line">;Windows 扩展</span><br><span class="line">;extension&#x3D;php_nsmail.dll</span><br><span class="line">extension&#x3D;php_calendar.dll</span><br><span class="line">;extension&#x3D;php_dbase.dll</span><br><span class="line">;extension&#x3D;php_filepro.dll</span><br><span class="line">extension&#x3D;php_gd.dll</span><br><span class="line">;extension&#x3D;php_dbm.dll</span><br><span class="line">;extension&#x3D;php_mssql.dll</span><br><span class="line">;extension&#x3D;php_zlib.dll</span><br><span class="line">;extension&#x3D;php_filepro.dll</span><br><span class="line">;extension&#x3D;php_imap4r2.dll</span><br><span class="line">;extension&#x3D;php_ldap.dll</span><br><span class="line">;extension&#x3D;php_crypt.dll</span><br><span class="line">;extension&#x3D;php_msql2.dll</span><br><span class="line">;extension&#x3D;php_odbc.dll</span><br><span class="line">; 注意， MySQL 的支持现在是内建的，因此，不需要用它的dll</span><br><span class="line"></span><br><span class="line">;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; 模块设定 ;</span><br><span class="line">; Module Settings ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;;</span><br><span class="line"></span><br><span class="line">[Syslog]</span><br><span class="line">define_syslog_variables &#x3D; Off ; 是否定义各种的系统日志变量</span><br><span class="line">; 如：$LOG_PID, $LOG_CRON, 等等。</span><br><span class="line">; 关掉它是个提高效率的好主意。</span><br><span class="line">; 运行时，你可以调用函数 define_syslog_variables()，来定义这些变量</span><br><span class="line">[mail function]</span><br><span class="line">SMTP &#x3D; localhost ;仅用于 win32 系统</span><br><span class="line">sendmail_from &#x3D; me@localhost.com ;仅用于 win32 系统</span><br><span class="line">;sendmail_path &#x3D; ;仅用于 unix, 也可支持参数（默认的是 &#39;sendmail -t -i&#39;）</span><br><span class="line"></span><br><span class="line">[Debugger]</span><br><span class="line">debugger.host &#x3D; localhost</span><br><span class="line">debugger.port &#x3D; 7869</span><br><span class="line">debugger.enabled &#x3D; False</span><br><span class="line"></span><br><span class="line">[Logging]</span><br><span class="line">; 这些配置指示用于示例的日志记录机制。</span><br><span class="line">; 看 examples&#x2F;README.logging 以得到更多的解释</span><br><span class="line">;logging.method &#x3D; db</span><br><span class="line">;logging.directory &#x3D; &#x2F;path&#x2F;to&#x2F;log&#x2F;directory</span><br><span class="line"></span><br><span class="line">[Java]</span><br><span class="line">;java.class.path &#x3D; .\php_java.jar</span><br><span class="line">;java.home &#x3D; c:\jdk</span><br><span class="line">;java.library &#x3D; c:\jdk\jre\bin\hotspot\jvm.dll</span><br><span class="line">;java.library.path &#x3D; .\</span><br><span class="line"></span><br><span class="line">[SQL]</span><br><span class="line">sql.safe_mode &#x3D; Off</span><br><span class="line"></span><br><span class="line">[ODBC]</span><br><span class="line">;uodbc.default_db &#x3D; Not yet implemented</span><br><span class="line">;uodbc.default_user &#x3D; Not yet implemented</span><br><span class="line">;uodbc.default_pw &#x3D; Not yet implemented</span><br><span class="line">uodbc.allow_persistent &#x3D; On ; 允许或禁止 持久连接</span><br><span class="line">uodbc.check_persistent &#x3D; On ; 在重用前检查连接是否还可用</span><br><span class="line">uodbc.max_persistent &#x3D; -1 ; 持久连接的最大数。-1 代表无限制</span><br><span class="line">uodbc.max_links &#x3D; -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制</span><br><span class="line">uodbc.defaultlrl &#x3D; 4096 ; 控制 LONG 类型的字段。</span><br><span class="line">uodbc.defaultbinmode &#x3D; 1 ; 控制 二进制数据。</span><br><span class="line"></span><br><span class="line">[MySQL]</span><br><span class="line">mysql.allow_persistent &#x3D; On ; 允许或禁止 持久连接</span><br><span class="line">mysql.max_persistent &#x3D; -1 ; 持久连接的最大数。-1 代表无限制</span><br><span class="line">mysql.max_links &#x3D; -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制</span><br><span class="line">mysql.default_port &#x3D; ; mysql_connect() 使用的默认端口，如不设置，mysql_connect()</span><br><span class="line">; 将使用变量 $MYSQL_TCP_PORT，或在 &#x2F;etc&#x2F;services 下的 mysql-tcp 条目(unix)，</span><br><span class="line">; 或在编译是定义的 MYSQL_PORT (按这样的顺序)</span><br><span class="line">; Win32 环境，将仅检查 MYSQL_PORT。</span><br><span class="line">mysql.default_socket &#x3D; ; 用于本地 MySql 连接的默认的套接字名。为空，使用 MYSQL 内建值</span><br><span class="line"></span><br><span class="line">mysql.default_host &#x3D; ; mysql_connect() 默认使用的主机（安全模式下无效）</span><br><span class="line">mysql.default_user &#x3D; ; mysql_connect() 默认使用的用户名（安全模式下无效）</span><br><span class="line">mysql.default_password &#x3D; ; mysql_connect() 默认使用的密码（安全模式下无效）</span><br><span class="line">; 注意，在这个文件下保存密码通常是一个坏主意</span><br><span class="line">; 任何可以使用PHP访问的用户可以运行</span><br><span class="line">; &#39;echo cfg_get_var(&quot; mysql.default_password&quot; )&#39; 来显示那个密码！</span><br><span class="line">; 而且当然地，任何有读该文件权力的用户也能看到那个密码。</span><br><span class="line"></span><br><span class="line">[mSQL]</span><br><span class="line">msql.allow_persistent &#x3D; On ; 允许或禁止 持久连接</span><br><span class="line">msql.max_persistent &#x3D; -1 ; 持久连接的最大数。-1 代表无限制</span><br><span class="line">msql.max_links &#x3D; -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制</span><br><span class="line"></span><br><span class="line">[PostgresSQL]</span><br><span class="line">pgsql.allow_persistent &#x3D; On ; 允许或禁止 持久连接</span><br><span class="line">pgsql.max_persistent &#x3D; -1 ; 持久连接的最大数。-1 代表无限制</span><br><span class="line">pgsql.max_links &#x3D; -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制</span><br><span class="line"></span><br><span class="line">[Sybase]</span><br><span class="line">sybase.allow_persistent &#x3D; On ; 允许或禁止 持久连接</span><br><span class="line">sybase.max_persistent &#x3D; -1 ; 持久连接的最大数。-1 代表无限制</span><br><span class="line">sybase.max_links &#x3D; -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制</span><br><span class="line">;sybase.interface_file &#x3D; &quot; &#x2F;usr&#x2F;sybase&#x2F;interfaces&quot;</span><br><span class="line">sybase.min_error_severity &#x3D; 10 ; 显示的错误的最低严重性</span><br><span class="line">sybase.min_message_severity &#x3D; 10 ; 显示的消息的最低重要性</span><br><span class="line">sybase.compatability_mode &#x3D; Off ; 与旧版的 PHP 3.0 兼容的模式。若打开，这将导致 PHP 自动地</span><br><span class="line">; 把根据结果的 Sybase 类型赋予它们，</span><br><span class="line">; 而不是把它们全当成字符串。</span><br><span class="line">; 这个兼容模式不会永远留着，</span><br><span class="line">; 因此，将你的代码进行需要的修改，</span><br><span class="line">; 并将该项关闭。</span><br><span class="line"></span><br><span class="line">[Sybase-CT]</span><br><span class="line">sybct.allow_persistent &#x3D; On ; 允许或禁止 持久连接</span><br><span class="line">sybct.max_persistent &#x3D; -1 ; 持久连接的最大数。-1 代表无限制</span><br><span class="line">sybct.max_links &#x3D; -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制</span><br><span class="line">sybct.min_server_severity &#x3D; 10 ; 显示的错误的最低严重性</span><br><span class="line">sybct.min_client_severity &#x3D; 10 ; 显示的消息的最低重要性</span><br><span class="line"></span><br><span class="line">[bcmath]</span><br><span class="line">bcmath.scale &#x3D; 0 ;</span><br><span class="line"></span><br><span class="line">[browscap]</span><br><span class="line">;browscap &#x3D; extra&#x2F;browscap.ini</span><br><span class="line">browscap &#x3D; C:\WIN\SYSTEM\inetsrv\browscap.ini</span><br><span class="line">[Informix]</span><br><span class="line">ifx.default_host &#x3D; ; ifx_connect() 默认使用的主机（安全模式下无效）</span><br><span class="line">ifx.default_user &#x3D; ; ifx_connect() 默认使用的用户名（安全模式下无效）</span><br><span class="line">ifx.default_password &#x3D; ; ifx_connect() 默认使用的密码（安全模式下无效）</span><br><span class="line">ifx.allow_persistent &#x3D; On ; 允许或禁止 持久连接</span><br><span class="line">ifx.max_persistent &#x3D; -1 ; 持久连接的最大数。-1 代表无限制</span><br><span class="line">ifx.max_links &#x3D; -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制</span><br><span class="line">ifx.textasvarchar &#x3D; 0 ; 若打开，select 状态符返回一个 ‘ text blob’ 字段的内容，而不是它的 id</span><br><span class="line">ifx.byteasvarchar &#x3D; 0 ; 若打开，select 状态符返回一个 ‘ byte blob’ 字段的内容，而不是它的 id</span><br><span class="line">ifx.charasvarchar &#x3D; 0 ; 追踪从固定长度的字符列里剥离的空格。</span><br><span class="line">; 可能对 Informix SE 用户有效。</span><br><span class="line">ifx.blobinfile &#x3D; 0 ; 若打开，text 和 byte blobs 的内容被导出到一个文件</span><br><span class="line">; 而不是保存到内存。</span><br><span class="line">ifx.nullformat &#x3D; 0 ; NULL（空）被作为空字段返回，除非，这里被设为1。</span><br><span class="line">; 这种情况下（为1），NULL 作为字串NULL返回。</span><br><span class="line"></span><br><span class="line">[Session]</span><br><span class="line">;[会话]</span><br><span class="line">session.save_handler &#x3D; files ; 用于保存&#x2F;取回数据的控制方式</span><br><span class="line">session.save_path &#x3D; C:\win\temp ; 在 save_handler 设为文件时传给控制器的参数，</span><br><span class="line">; 这是数据文件将保存的路径。</span><br><span class="line">session.use_cookies &#x3D; 1 ; 是否使用 cookies</span><br><span class="line">session.name &#x3D; PHPSESSID</span><br><span class="line">; 用在 cookie 里的 session 的名字</span><br><span class="line">session.auto_start &#x3D; 0 ; 在请求启动时初始化 session</span><br><span class="line">session.cookie_lifetime &#x3D; 0 ; 为按秒记的 cookie 的保存时间，</span><br><span class="line">; 或为0时，直到浏览器被重启</span><br><span class="line">session.cookie_path &#x3D; &#x2F; ; cookie 的有效路径</span><br><span class="line">session.cookie_domain &#x3D; ; cookie 的有效域</span><br><span class="line">session.serialize_handler &#x3D; php ; 用于连接数据的控制器</span><br><span class="line">; php是 PHP 的标准控制器。</span><br><span class="line">session.gc_probability &#x3D; 1 ; 按百分比的 &#39;garbage collection（碎片整理）&#39; 进程</span><br><span class="line">; 在每次 session 初始化的时候开始的可能性。</span><br><span class="line">session.gc_maxlifetime &#x3D; 1440 ; 在这里数字所指的秒数后，保存的数据将被视为</span><br><span class="line">; &#39;碎片 (garbage) &#39; 并由 gc 进程清理掉。</span><br><span class="line">session.referer_check &#x3D; ; 检查 HTTP 引用以使额外包含于 URLs 中的 ids 无效</span><br><span class="line">session.entropy_length &#x3D; 0 ; 从文件中读取多少字节</span><br><span class="line">session.entropy_file &#x3D; ; 指定这里建立 session id</span><br><span class="line">; session.entropy_length &#x3D; 16</span><br><span class="line">; session.entropy_file &#x3D; &#x2F;dev&#x2F;urandom</span><br><span class="line">session.cache_limiter &#x3D; nocache ; 设为 &#123;nocache,private,public&#125; ,以决定 HTTP 的</span><br><span class="line">; 缓存问题</span><br><span class="line">session.cache_expire &#x3D; 180 ; 文档在 n 分钟后过时</span><br><span class="line">session.use_trans_sid &#x3D; 1 ; 使用过渡性的 sid 支持，若编译时许可了</span><br><span class="line">; --enable-trans-sid</span><br><span class="line">url_rewriter.tags &#x3D; &quot; a&#x3D;href,area&#x3D;href,frame&#x3D;src,input&#x3D;src,form&#x3D;fakeentry&quot;</span><br><span class="line"></span><br><span class="line">[MSSQL]</span><br><span class="line">;extension&#x3D;php_mssql.dll</span><br><span class="line">mssql.allow_persistent &#x3D; On ; 允许或禁止 持久连接</span><br><span class="line">mssql.max_persistent &#x3D; -1 ; 持久连接的最大数。-1 代表无限制</span><br><span class="line">mssql.max_links &#x3D; -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制</span><br><span class="line">mssql.min_error_severity &#x3D; 10 ; 显示的错误的最低严重性</span><br><span class="line">mssql.min_message_severity &#x3D; 10 ; 显示的消息的最低重要性</span><br><span class="line">mssql.compatability_mode &#x3D; Off ; 与旧版的 PHP 3.0 兼容的模式。</span><br><span class="line"></span><br><span class="line">[Ingres II]</span><br><span class="line">ii.allow_persistent &#x3D; On ; 允许或禁止 持久连接</span><br><span class="line">ii.max_persistent &#x3D; -1 ; 持久连接的最大数。-1 代表无限制</span><br><span class="line">ii.max_links &#x3D; -1 ; 连接的最大数目（持久和非持久）。-1 代表无限制</span><br><span class="line">ii.default_database &#x3D; ; 默认 database (format : [node_id::]dbname[&#x2F;srv_class]</span><br><span class="line">ii.default_user &#x3D; ; 默认 user</span><br><span class="line">ii.default_password &#x3D; ; 默认 password</span><br><span class="line"></span><br><span class="line">[Verisign Payflow Pro]</span><br><span class="line">pfpro.defaulthost &#x3D; &quot; test.signio.com&quot; ; 默认的 Signio 服务器</span><br><span class="line">pfpro.defaultport &#x3D; 443 ; 连接的默认端口</span><br><span class="line">pfpro.defaulttimeout &#x3D; 30 ; 按秒计的默认超时时间</span><br><span class="line"></span><br><span class="line">; pfpro.proxyaddress &#x3D; ; 默认的代理的 IP 地址（如果需要）</span><br><span class="line">; pfpro.proxyport &#x3D; ; 默认的代理的端口</span><br><span class="line">; pfpro.proxylogon &#x3D; ; 默认的代理的登录（logon 用户名）</span><br><span class="line">; pfpro.proxypassword &#x3D; ; 默认的代理的密码</span><br><span class="line"></span><br><span class="line">[Sockets]</span><br><span class="line">sockets.use_system_read &#x3D; On ; 使用系统的 read() 函数替代 php_read() 封装</span><br><span class="line">; Local Variables: 局部变量</span><br><span class="line">; tab-width: 4</span><br><span class="line">; End:</span><br><span class="line"></span><br><span class="line">; XDEBUG 扩展</span><br><span class="line">[xdebug]</span><br><span class="line">zend_extension &#x3D;&quot;F:&#x2F;wamp&#x2F;bin&#x2F;php&#x2F;php7.1.9&#x2F;zend_ext&#x2F;php_xdebug-2.5.5-7.0-vc14-x86_64.dll&quot;</span><br><span class="line"></span><br><span class="line">xdebug.remote_enable &#x3D; off ; xdebug 远程</span><br><span class="line">xdebug.profiler_enable &#x3D; off ; xdebug 分析器</span><br><span class="line">xdebug.profiler_enable_trigger &#x3D; Off ; xdebug 分析器触发</span><br><span class="line">xdebug.profiler_output_name &#x3D; cachegrind.out.%t.%p ; xdebug 分析器输出名称</span><br><span class="line">xdebug.profiler_output_dir &#x3D;&quot;F:&#x2F;wamp&#x2F;tmp&quot; ; xdebug 分析器输出路径</span><br><span class="line">xdebug.show_local_vars&#x3D;0 ; xdebug 展示本地变量</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacBook 终端中的bogon的解决办法</title>
      <link href="/2020/03/10/Mac/bogon/"/>
      <url>/2020/03/10/Mac/bogon/</url>
      
        <content type="html"><![CDATA[<p>打开终端，输入：</p><p>sudo hostname your-desired-host-name即可</p><p>例如：想把主机bogon改回，ABC，那么就可以输入：<br>sudo hostname ABC<br>之后可以用hostname指令查看当前的主机名<br>sudo hostname<br>重启终端即可看见修改后的结果</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bogon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>监控认知了解</title>
      <link href="/2020/01/03/jiankong/liaojie/"/>
      <url>/2020/01/03/jiankong/liaojie/</url>
      
        <content type="html"><![CDATA[<p>从研发角度切入，来分析监控系统。</p><ol><li><p>业务层：监控系统需要关注业务指标，如下单量，大众点评、品购买指标、实时业务，注册成功率等。</p></li><li><p>应用层：</p></li></ol><p>（1）端监控，如：河北地区APP无法打开，需要通过端采集数据上报，查找原因；</p><p>（2）链路层监控（APM监控），如：唯品会跟踪订单的完整交易流程，或是完整调用链路，查找异常；</p><p>（3）日志监控，通过回溯旧日志，浏览TLF等，发现异常。</p><ol start="3"><li>系统层：关注网络、AOC、CDN的质量，关注中间件、数据库的问题等</li></ol><p>监控类别：<br>监控入口类别：</p><ol><li>大盘</li></ol><p>变更：大部分故障是由于变更（发布、修改配置、版本更新）引起的，大盘是看到整个变更的试件，做出变更防御进行动作收集。<br>当前报警：异常治疗<br>失败率<br>全链路<br>2. 前段：通过提供端，进行服务的服务质量监控；</p><ol start="3"><li><p>异常：对失败率、异常汇总统计入口；</p></li><li><p>业务：投稿成功率等这类指标；</p></li><li><p>链路：方便查询特定业务链路情况；</p></li><li><p>系统： 核心网络、CDN、IDC等；</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对接支付宝</title>
      <link href="/2020/01/03/alipay/peizhi/"/>
      <url>/2020/01/03/alipay/peizhi/</url>
      
        <content type="html"><![CDATA[<h2 id="支付宝公私密钥配置"><a href="#支付宝公私密钥配置" class="headerlink" title="支付宝公私密钥配置"></a>支付宝公私密钥配置</h2><p>开发者模式中，进入》商家中心平台查看appidKey》开发者配置key<br>1、利用支付宝官方提供的支付宝开发者助手生成应用公钥和私钥（注意私钥要保存好，避免对接时候用到）<br>2、开发中是支付宝公钥对应支付宝私钥关系</p><h2 id="开发管理平台接入支付应用"><a href="#开发管理平台接入支付应用" class="headerlink" title="开发管理平台接入支付应用"></a>开发管理平台接入支付应用</h2><p>签约产品注意</p><h3 id="一、APP支付"><a href="#一、APP支付" class="headerlink" title="一、APP支付"></a>一、APP支付</h3><pre><code>1. 需拥有实名认证的支付宝账户，方可申请接入；2. 需提供真实有效的营业执照，营业执照主体需与支付宝账户名称一致；3. 如应用开发者与支付宝账户名称不一致，需提供开发合作协议；4. 已上架应用，需提供应用名称和下载链接；未上架应用，则需提供demo或产品说明文档；</code></pre><h3 id="二、手机网站支付"><a href="#二、手机网站支付" class="headerlink" title="二、手机网站支付"></a>二、手机网站支付</h3><pre><code>1. 需拥有实名认证的支付宝账户，方可申请接入；2. 需提供真实有效的营业执照，营业执照主体需与支付宝账户名称一致；3. 网站能正常访问，而且页面显示完整、经营内容明确、商品信息完备； 4.网站必须通过ICP备案，且备案主体需与支付宝账户主体一致； 温馨提示：团购类网站不支持个体商家签约</code></pre><h3 id="三、电脑网站支付"><a href="#三、电脑网站支付" class="headerlink" title="三、电脑网站支付"></a>三、电脑网站支付</h3><pre><code>1. 需拥有实名认证的支付宝账户，方可申请接入；2. 需提供真实有效的营业执照，营业执照主体需与支付宝账户名称一致；3. 网站能正常访问，而且页面显示完整、经营内容明确、商品信息完备，条件如下：    1）有已建设完成的网站（非淘宝.天猫.阿里巴巴网店）    2）网站必须能正常访问有正式的产品内容（真实有效产品发布5-10件，论坛网站要求有不同会员发布的主题帖10-15）    3）网站页面必须中文页面，人民币标价，可以让买家点击到可以购买的页面4.网站必须通过ICP备案，且备案主体需与支付宝账户主体一致；温馨提示：团购类网站不支持个体商家签约</code></pre><h3 id="四、-单个服务开通时间："><a href="#四、-单个服务开通时间：" class="headerlink" title="四、 单个服务开通时间："></a>四、 单个服务开通时间：</h3><pre><code>服务开通约1个工作日</code></pre>]]></content>
      
      
      <categories>
          
          <category> 支付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alipay </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac切换PHP版本</title>
      <link href="/2019/12/29/docker/php/"/>
      <url>/2019/12/29/docker/php/</url>
      
        <content type="html"><![CDATA[<p>前言：很多开发者一般使用Mac电脑办公比较多，比如一个PHP开发者往往很需要PHP环境的搭载变成，如果我不想用默认的PHP版本，Mac下怎么方便操作使用呢？</p><p>这里准备的工具：brew</p><p>1、检查PHP版本<br>php  -v<br>2、安装PHP7.2版本<br>brew install php72<br>3、定义环境变量<br>vim  ~/.zshrc<br>export PATH=”/usr/local/opt/php@7.2/bin:$PATH”<br>source  ~/.zshrc<br>4、服务启动<br>cd /usr/local/opt/php@7.2/sbin<br>php-fpm -y /usr/local/etc/php/7.2/php-fpm.conf<br>brew services start <a href="mailto:php@7.2">php@7.2</a><br>5、服务检查<br>php  -v<br>6、完成</p><p>常用操作命令：<br>$ brew –help #简洁命令帮助<br>$ man brew #完整命令帮助<br>$ brew install git #安装软件包(这里是示例安装的Git版本控制)<br>$ brew uninstall git #卸载软件包<br>$ brew search git #搜索软件包<br>$ brew list #显示已经安装的所有软件包<br>$ brew update #同步远程最新更新情况，对本机已经安装并有更新的软件用*标明<br>$ brew outdated #查看已安装的哪些软件包需要更新<br>$ brew upgrade git #更新单个软件包<br>$ brew info git #查看软件包信息<br>$ brew home git #访问软件包官方站<br>$ brew cleanup #清理所有已安装软件包的历史老版本<br>$ brew cleanup git #清理单个已安装软件包的历史版本</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习路线</title>
      <link href="/2019/12/25/php/study/developRoad/"/>
      <url>/2019/12/25/php/study/developRoad/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-学习路线图"><a href="#PHP-学习路线图" class="headerlink" title="PHP 学习路线图"></a>PHP 学习路线图</h1><p>PHP 学习的关键是：多看代码，多写代码，多总结。</p><h2 id="HTML5-和-CSS"><a href="#HTML5-和-CSS" class="headerlink" title="HTML5 和 CSS"></a>HTML5 和 CSS</h2><blockquote><p>推荐书籍《HTML5+CSS3 从入门到精通》·李东博</p></blockquote><ul><li>HTML 标签</li><li>CSS 样式</li><li>Javascript 脚本</li></ul><h2 id="PHP-基础"><a href="#PHP-基础" class="headerlink" title="PHP 基础"></a>PHP 基础</h2><blockquote><p>推荐书籍《PHP 编程》·Kevin Tatroe，Peter MacIntyre，Rasmus Lerdorf</p></blockquote><ul><li>变量</li><li>数组</li><li>循环控制</li><li>函数</li><li>Cookie 和 Session</li><li>JSON 和 XML</li><li>AJAX</li><li>文件读写</li><li>上传和下载</li><li>图片处理</li><li>RESTful</li></ul><h2 id="WEB-服务器"><a href="#WEB-服务器" class="headerlink" title="WEB 服务器"></a>WEB 服务器</h2><blockquote><p>推荐书籍《鸟哥的 Linux 私房菜基础篇》·鸟哥</p></blockquote><ul><li>Linux 基础</li><li>LNMP 安装</li><li>PHP-FPM 配置</li></ul><h2 id="PHP-MySQL-操作"><a href="#PHP-MySQL-操作" class="headerlink" title="PHP MySQL 操作"></a>PHP MySQL 操作</h2><blockquote><p>推荐书籍《PHP 和 MySQL Web 开发》·Luke Welling</p></blockquote><ul><li>增查改删操作</li><li>表单处理</li><li>MySQLi 和 PDO 扩展</li></ul><h2 id="PHP-面向对象和设计模式"><a href="#PHP-面向对象和设计模式" class="headerlink" title="PHP 面向对象和设计模式"></a>PHP 面向对象和设计模式</h2><blockquote><p>推荐书籍《深入 PHP：面向对象、模式与实践》·Matt Zandstra</p></blockquote><ul><li>类和对象的关系</li><li>继承、封装、多态</li><li>性状</li><li>面向对象设计原则</li><li>类 UML 关系</li><li>设计模式</li></ul><h2 id="代码编写和规范"><a href="#代码编写和规范" class="headerlink" title="代码编写和规范"></a>代码编写和规范</h2><blockquote><p>推荐书籍《代码整洁之道》·Robert C. Martin</p></blockquote><ul><li>PHP-FIG PSR1~4 规范</li><li>phpStorm 集成开发环境</li><li>Git 版本控制</li><li>Github 代码仓库</li></ul><h2 id="MVC-框架"><a href="#MVC-框架" class="headerlink" title="MVC 框架"></a>MVC 框架</h2><ul><li>单一入口</li><li>MVC 职责划分</li><li>PHP 框架 ThinkPHP5+Yii2+Laravel</li></ul><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li>Composer</li><li>组件</li></ul><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><blockquote><p>推荐书籍《Nginx 高性能 Web 服务器详解》·苗泽，《大型网站技术架构 核心原理与案例分析》·李智慧</p></blockquote><ul><li>Nginx 配置优化</li><li>负载均衡</li><li>反向代理</li><li>集群</li><li>CDN</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><blockquote><p>推荐书籍《高性能 MySQL》·Baron Schwartz，Peter Zaitsev，Vadim Tkachenko</p></blockquote><ul><li>ORM</li><li>索引和全文索引</li><li>锁机制</li><li>分表</li><li>集群</li><li>Redis 缓存</li></ul><h2 id="PHP-高级"><a href="#PHP-高级" class="headerlink" title="PHP 高级"></a>PHP 高级</h2><blockquote><p>推荐书籍《Modern PHP》·Josh Lockhart</p></blockquote><ul><li>Opcache</li><li>xDebug 调试和分析</li><li>Xhprof + Xhgui 性能分析</li><li>PHPUnit 单元测试</li><li>Docker LNMP 环境部署</li><li>持续集成</li></ul><h2 id="原文连接"><a href="#原文连接" class="headerlink" title="原文连接"></a>原文连接</h2><ul><li><a href="https://github.com/yeszao/phproad/blob/master/README.md" target="_blank" rel="noopener">phproad</a>, by yeszao</li></ul>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10个实用的PHP正则表达式</title>
      <link href="/2019/12/22/php/base/zhengze/"/>
      <url>/2019/12/22/php/base/zhengze/</url>
      
        <content type="html"><![CDATA[<ol><li>验证E-mail地址</li></ol><p>这是一个用于验证电子邮件的正则表达式。但它并不是高效、完美的解决方案。在此不推荐使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$email &#x3D; &quot;test@ansoncheung.tk&quot;;</span><br><span class="line">if </span><br><span class="line">(preg_match(&#39;&#x2F;^[^0-9][a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)*[@][a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)*[.][a-zA-Z]&#123;2,4&#125;$&#x2F;&#39;,$email)) </span><br><span class="line">&#123;</span><br><span class="line">echo &quot;Your email is ok.&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;Wrong email address format&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了更加有效验证电子邮件地址，推荐使用filer_var。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (filter_var(&#39;test+email@ansoncheung&#39;, FILTER_VALIDATE_EMAIL)) &#123;</span><br><span class="line">echo &quot;Your email is ok.&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;Wrong email address format.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>验证用户名</li></ol><p>这是一个用于验证用户名的实例，其中包括字母、数字(A-Z，a-z，0-9)、下划线以及最低5个字符，最大20个字符。同时，也可以根据需要，对最小值和最大值做合理的修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$username &#x3D; &quot;user_name12&quot;;</span><br><span class="line">if (preg_match(&#39;&#x2F;^[a-z\d_]&#123;5,20&#125;$&#x2F;i&#39;, $username)) &#123;</span><br><span class="line">echo &quot;Your username is ok.&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;Wrong username format.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>验证电话号码</li></ol><p>这是一个验证美国电话号码的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$phone &#x3D; &quot;(021)423-2323&quot;;</span><br><span class="line">if (preg_match(&#39;&#x2F;\(?\d&#123;3&#125;\)?[-\s.]?\d&#123;3&#125;[-\s.]\d&#123;4&#125;&#x2F;x&#39;, $phone)) &#123;</span><br><span class="line">echo &quot;Your phone number is ok.&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;Wrong phone number.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>验证IP地址</li></ol><p>这是一个用来验证IPv4地址的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$IP &#x3D; &quot;198.168.1.78&quot;;</span><br><span class="line">if </span><br><span class="line">(preg_match(&#39;&#x2F;^(([1-9]?[0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5]).)&#123;3&#125;([1-9]?[0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])$&#x2F;&#39;,$IP)) </span><br><span class="line">&#123;</span><br><span class="line">echo &quot;Your IP address is ok.&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;Wrong IP address.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>验证邮政编码</li></ol><p>这是一个用来验证邮政编码的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$zipcode &#x3D; &quot;12345-5434&quot;;</span><br><span class="line">if (preg_match(&quot;&#x2F;^([0-9]&#123;5&#125;)(-[0-9]&#123;4&#125;)?$&#x2F;i&quot;,$zipcode)) &#123;</span><br><span class="line">echo &quot;Your Zip code is ok.&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;Wrong Zip code.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>验证SSN(社会保险号)</li></ol><p>这是一个验证美国SSN的实例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ssn &#x3D; &quot;333-23-2329&quot;;</span><br><span class="line">if (preg_match(&#39;&#x2F;^[\d]&#123;3&#125;-[\d]&#123;2&#125;-[\d]&#123;4&#125;$&#x2F;&#39;,$ssn)) &#123;</span><br><span class="line">echo &quot;Your SSN is ok.&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;Wrong SSN.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>验证信用卡号<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$cc &#x3D; &quot;378282246310005&quot;;</span><br><span class="line">if </span><br><span class="line">(preg_match(&#39;&#x2F;^(?:4[0-9]&#123;12&#125;(?:[0-9]&#123;3&#125;)?|5[1-5][0-9]&#123;14&#125;|6011[0-9]&#123;12&#125;|3(?:0[0-5]|[68][0-9])[0-9]&#123;11&#125;|3[47][0-9]&#123;13&#125;)$&#x2F;&#39;, </span><br><span class="line">$cc)) &#123;</span><br><span class="line">echo &quot;Your credit card number is ok.&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;Wrong credit card number.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>验证域名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$url &#x3D; &quot;http:&#x2F;&#x2F;ansoncheung.tk&#x2F;&quot;;</span><br><span class="line">if </span><br><span class="line">(preg_match(&#39;&#x2F;^(http|https|ftp):\&#x2F;\&#x2F;([A-Z0-9][A-Z0-9_-]*(?:\.[A-Z0-9][A-Z0-9_-]*)+):?(\d+)?\&#x2F;?&#x2F;i&#39;, </span><br><span class="line">$url)) &#123;</span><br><span class="line">echo &quot;Your url is ok.&quot;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">echo &quot;Wrong url.&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>从特定URL中提取域名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$url &#x3D; &quot;http:&#x2F;&#x2F;ansoncheung.tk&#x2F;articles&quot;;</span><br><span class="line">preg_match(&#39;@^(?:http:&#x2F;&#x2F;)?([^&#x2F;]+)@i&#39;, $url, $matches);</span><br><span class="line">$host &#x3D; $matches[1];</span><br><span class="line">echo $host;</span><br></pre></td></tr></table></figure></li><li>将文中关键词高亮显示<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$text &#x3D; &quot;Sample sentence from AnsonCheung.tk, regular expression has become </span><br><span class="line">popular in web programming. Now we learn regex. According to wikipedia, Regular </span><br><span class="line">expressions (abbreviated as regex or regexp, with plural forms regexes, regexps, </span><br><span class="line">or regexen) are written in a formal language that can be interpreted by a </span><br><span class="line">regular expression processor&quot;;</span><br><span class="line">$text &#x3D; preg_replace(&quot;&#x2F;\b(regex)\b&#x2F;i&quot;, &#39;\1&#39;, $text);</span><br><span class="line">echo $text;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php常用函数</title>
      <link href="/2019/12/22/php/base/hanshu/"/>
      <url>/2019/12/22/php/base/hanshu/</url>
      
        <content type="html"><![CDATA[<p>前言，PHP开发过程中，会使用各种各样的函数，下面大概整理一些，可以学习参考；<br><strong>一、写入文件</strong><br>1.打开资源（文件）fopen($filename,$mode)<br>2.写文件fwrite($handle,$str)<br>3.关闭文件fclose($handle)<br>4.一步写入file_put_contents($filename,$str,$mode) FILE_APPEND LOCK_EX<br>}</p><p><strong>二、读文件</strong><br>1.读文件fread($handle,字节数)<br>2.读一行fgets($handle);<br>3.读一个字符fgetc($handle)<br>4.读成一个数组中file($filename)<br>5.一步读取file_get_contents($filename)</p><p><strong>三、 目录操作</strong><br>1，建目录mkdir($dirname)<br>2，删除目录rmdir($dirname)<br>3，打开目录句柄opendir($dirname)<br>4，读取目录条数readdir($handle)<br>5，关闭目录资源closedir($handle)<br>6，重置目录资源rewinddir($dirname);</p><p><strong>四、目录和文件操作</strong><br>1， 检查文件或目录是否存在file_exists($filename)<br>2，文件或者目录重命名rename($file)</p><p><strong>五、 文件操作</strong><br>1拷贝文件copy(‘原文件’,’目标文件’)<br>2删除文件unlink($filename)<br>3获取文件大小filesize($filename)<br>4取得文件的创建时间filectime($filename)<br>5取得文件的访问时间fileatime($filename)<br>6取得文件的修改时间filemtime($filename)</p><p><strong>六、路径操作</strong><br>1获取路径dirname($path)<br>2获取文件名basename($path)<br>3获取路径信息pathinfo($path)</p><p><strong>七、数组函数（极其重要）</strong><br>1.在数组的开头插入一个元素array_unshift($arr,$v)<br>2.在数组的尾部添加数组元素array_push($arr,$v,$v1…)<br>3.将数组的第一个元素移出，并返回此元素array_shift($arr)<br>4.在数组的尾部删除元素array_pop($arr)<br>5.将数组用$separator连接成一个字符串implode($a,$arr)<br>6.检测变量是否是数组is_array($arr)<br>7.获得数组的键名array_keys($arr)<br>8.获得数组的值array_values($arr)<br>9.检索$value是否在$arr中，返回布尔值in_array($v,$arr)<br>10.检索数组$arr中，是否有$key这个键名array_key_exists($k,$arr)<br>11.检索$value是否在$arr中，若存在返回键名Array_search($value, $arr)<br>12.将一个数组逆向排序，如果第二个参数为true，则保持键名Array_reverse($arr, true)<br>13.交换数组的键和值 Array_flip($arr)<br>14.统计数组元素的个数 Count($arr)<br>15.统计数组中所有值的出现次数 Array_count_values($arr)<br>16.移除数组中的重复值 Array_unique($arr)<br>17.值由小到大排序 Sort($arr)<br>18.值由大到小排序 Rsort($arr)<br>19.键由小到大排序 ksort($arr)<br>20.键由大到小排序 krsort($arr)<br>21.随机从数组中取得$num个元素 Array_rand($arr, $num)<br>22.对数组的所有元素求和Array_sum($arr)<br>23.合并数组 array_merge($arr,$arr)</p><p><strong>八、字符串函数（极其重要）</strong><br>1.输出字符串 echo($str) echo<br>2.原样输出（区分单引号和双引号） print($str)<br>3.输出字符串，结束脚本执行 Die($str):die($str) die;<br>4.输出字符串，结束脚本执行 exit($str) exit;<br>5.输出格式化字符串 printf($str,$p1,…)<br>6.不直接输出格式化的字符串，返回格式化的字符串，保存到变量中 sprintf($str,$p1,…)<br>7.打印变量的相关信息 var_dump($p)<br>8.字符串转换为小写 strtolower($str)<br>9.字符串转换为大写 strtoupper($str)<br>10.将字符串的第一个字符转换为大写 ucfirst($str)<br>11.将字符串中每个单词转换为大写 ucwords($str)<br>12.去除字符串两端的空白字符。 Trim($str,’ ,’)<br>13.去除字符串左边空白字符。 Ltrim($str)<br>14.去除字符串右边空白字符。Rtrim($str)<br>空白字符：””，”\t”，”\n”，”\r”，”\0”<br>15取得字符串长度 strlen($str)<br>16统计包含的字符串个数 substr_count($str,’子串’)<br>17返回字符串$string中由$start开始，长度为$length的子字符串<br>Substr($string ,$start[,$length])<br>18返回字符串$string中，$search第一次出现到字符串结束的子字符串。<br>Strstr($string,$search)<br>19查找$search在$str中第一次位的置，从$offset开始。<br>Strpos($str,$search[,int $offset])<br>20.查找$search在$str中最后一次的位置，从$offset开始<br>Strrpos($str,$search[,int $offset])<br>21.替换$str中的全部$search为 $replace。<br>Str_replace($search,$replace,$str)<br>22.重复输出指定的字符串<br>Str_repeat()<br>23.加密字符串<br>Md5()<br>24.字符串翻转<br>Strrev()<br>25.使用一个字符串分割另一个字符串,形成一个数组//把字符串变成数组<br>Explode(“分隔符”,$str);</p><p><em>备注：可以关注博客持续更新其他新技术：<a href="https://chaofavip.github.io">hechaofa</a></em></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP包管理器Composer与自动加载规范</title>
      <link href="/2019/12/20/tool/composer/"/>
      <url>/2019/12/20/tool/composer/</url>
      
        <content type="html"><![CDATA[<p>composer学习地址：<a href="http://docs.phpcomposer.com/0" target="_blank" rel="noopener">http://docs.phpcomposer.com/0</a>…</p><p>composer.json中的自动加载映射<br>目前PSR-0自动加载、PSR-4自动加载、classmap生成和files引入都是被支持的，PSR-4是首推的方法，因为它提供了更大的易用性。</p><p>PSR-4<br>PSR-4规范了如何指定文件路径从而自动加载类，同时规范了自动加载文件的位置。乍一看这是和PSR-0重复了，实际上，在功能上确实有一部分重复。区别在于，PSR-4的规范比较干净，去除了兼容PHP5.3以前版本的内容。<br>PSR-4和PSR-0最大的区别是对下划线的定义不同，PSR-4中，在类名中使用下划线是没有特殊含义的，而在PSR-0的规则中，下划线或被转化为目录分隔符</p><p>在PSR-4的键下，你可以定义命名空间和路径的映射关系，当自动加载类如Foo\Bar\Baz时，命名空间Foo指向一个名为src/的目录意味着自动加载器将查找名为src/Bar/Baz.php文件并引用它。</p><p>命名空间的前缀必须以\结尾，以避免类似前缀之间的冲突。在安装和更新期间，PSR-4引用全部组合到一个key=&gt;value数组中，该数组可以在生成的文件vendor/composer/autoload_psr4.php中找到。</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;psr-4&quot;: &#123;</span><br><span class="line">      &quot;App\\&quot;: &quot;App&#x2F;&quot; &#x2F;&#x2F; 命名空间App映射到目录App</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>classmap<br>classmap引用的所有组合，都会在安装、更新的过程中生成并存储到vendor/composer/autoload_classmap.php文件中。<br>你可以使用classmap生成支持自定义加载的不遵循PSR-4规范的类库，要配置它指向的目录，以便能够准确的搜索到类文件</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;classmap&quot;: [&quot;src&#x2F;&quot;, &quot;lib&#x2F;&quot;, &quot;Something.php&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Files<br>如果你想要明确指定，在每次请求时都要载入某些文件，那么你可以使用files字段加载。通常作为函数库的载入方式。</p><p>例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;autoload&quot;: &#123;</span><br><span class="line">    &quot;files&quot;: [&quot;src&#x2F;MyLibrary&#x2F;functions&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker之安装redis扩展</title>
      <link href="/2019/12/13/docker/redis/"/>
      <url>/2019/12/13/docker/redis/</url>
      
        <content type="html"><![CDATA[<h3 id="1-先进入PHP容器，下载redis扩展包"><a href="#1-先进入PHP容器，下载redis扩展包" class="headerlink" title="1.先进入PHP容器，下载redis扩展包"></a>1.先进入PHP容器，下载redis扩展包</h3><p>1.先进入php容器<br>MacbookdeMacBook-Pro:~ macbookpro$ docker exec -it de0d227feed2 /bin/bash<br>2.下载包<br>root@de0d227feed2:/usr/src/php/ext# curl -L -o /tmp/redis.tar.gz<br><a href="https://github.com/phpredis/phpredis/archive/3.1.3.tar.gz" target="_blank" rel="noopener">https://github.com/phpredis/phpredis/archive/3.1.3.tar.gz</a><br>3.解压缩 并且移动到<br>cd /tmp<br>tar xfz /tmp/redis.tar.gz<br>mv phpredis-3.1.3 /usr/src/php/ext/redis</p><p>4.运行<br>root@de0d227feed2:/tmp# docker-php-ext-install redis<br>至此完成php扩展的安装</p><h3 id="2-下载redis容器"><a href="#2-下载redis容器" class="headerlink" title="2.下载redis容器"></a>2.下载redis容器</h3><p>1.拉取redis镜像<br>MacbookdeMacBook-Pro:~ macbookpro$ docker pull redis<br>2.运行<br>MacbookdeMacBook-Pro:~ macbookpro$ docker run –name change-redis -p 6379:6379 -d redis<br>3.查看容器ip<br>MacbookdeMacBook-Pro:~ macbookpro$ docker inspect change-redis</p><h3 id="3-PHP连接redis"><a href="#3-PHP连接redis" class="headerlink" title="3.PHP连接redis"></a>3.PHP连接redis</h3><p>&lt;?php<br>/**</p><ul><li>获取Redis版本</li><li>/<br>function getRedisVersion()<br>{<br>  if (extension_loaded(‘redis’)) {<pre><code>try {    $redis = new Redis();    // $redis-&gt;connect(&apos;redis&apos;, 6379);    $redis-&gt;connect(&apos;172.17.0.5&apos;, 6379);//这里的ip填写的是redis容器的ip    $info = $redis-&gt;info();    return $info[&apos;redis_version&apos;];} catch (Exception $e) {    return $e-&gt;getMessage();}</code></pre>  } else {<pre><code>return &apos;Redis 扩展未安装 ×&apos;;</code></pre>  }<br>}</li></ul><h3 id="4-运行查看"><a href="#4-运行查看" class="headerlink" title="4.运行查看"></a>4.运行查看</h3>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker之安装扩展细说</title>
      <link href="/2019/12/12/docker/kuozhan/"/>
      <url>/2019/12/12/docker/kuozhan/</url>
      
        <content type="html"><![CDATA[<p>前言<br>此篇，主要是演示docker-php-source , docker-php-ext-install ,docker-php-enable-docker-configure 这四个命令到底是用来干嘛的，它们在PHP容器中都做了哪些事情。<br>很多人很不理解在Dockerfile中安装PHP扩展的时候总是出现这几个命令，本篇就就是为你揭开这些命令的神秘面纱而准备的，所有案例都是本人自己运行过的。</p><p>Docker 中的PHP容器安装扩展的方式有<br>通过pecl方式安装<br>通过php 容器中自带的几个特殊命令来安装，这些特殊命令可以在Dockerfile中的RUN命令中进行使用。<br>这里，我们主要讨论的是第二种方案，如何通过PHP容器中的几个特殊命令来安装PHP扩展</p><p>PHP中安装扩展有几个特殊的命令<br>docker-php-source<br>docker-php-ext-install<br>docker-php-ext-enable<br>docker-php-ext-configure<br>演示这三个命令的作用<br>都是在PHP容器中进行演示的，PHP容器启动太简单，不作过多介绍</p><p>docker-php-source<br>此命令，实际上就是在PHP容器中创建一个/usr/src/php的目录，里面放了一些自带的文件而已。我们就把它当作一个从互联网中下载下来的PHP扩展源码的存放目录即可。事实上，所有PHP扩展源码扩展存放的路径： /usr/src/php/ext 里面。</p><p>格式：</p><p>docker-php-source extract | delete<br>参数说明：</p><ul><li>extract : 创建并初始化 /usr/src/php目录</li><li>delete : 删除 /usr/src/php目录</li></ul><p>案例：</p><p>root@803cbcf702a4:/usr/src# ls -l<br>total 11896 #此时，并没有php目录<br>-rw-r–r– 1 root root 12176404 Jun 28 03:23 php.tar.xz<br>-rw-r–r– 1 root root      801 Jun 28 03:23 php.tar.xz.asc</p><p>root@803cbcf702a4:/usr/src# docker-php-source extract<br>root@803cbcf702a4:/usr/src# ls -l<br>total 11900 #此时，生产了php目录，里面还有一些文件，由于篇幅问题，就不进去查看了<br>drwxr-xr-x 14 root root     4096 Aug  9 09:01 php<br>-rw-r–r–  1 root root 12176404 Jun 28 03:23 php.tar.xz<br>-rw-r–r–  1 root root      801 Jun 28 03:23 php.tar.xz.asc</p><p>root@803cbcf702a4:/usr/src# docker-php-source delete<br>root@803cbcf702a4:/usr/src# ls -l<br>total 11896 #此时，将已创建 php 目录给删除了<br>-rw-r–r– 1 root root 12176404 Jun 28 03:23 php.tar.xz<br>-rw-r–r– 1 root root      801 Jun 28 03:23 php.tar.xz.asc</p><p>root@803cbcf702a4:/usr/src#<br>docker-php-ext-enable<br>这个命令，就是用来启动 PHP扩展 的。我们使用pecl安装PHP扩展的时候，默认是没有启动这个扩展的，如果想要使用这个扩展必须要在php.ini这个配置文件中去配置一下才能使用这个PHP扩展。而 docker-php-ext-enable 这个命令则是自动给我们来启动PHP扩展的，不需要你去php.ini这个配置文件中去配置。<br>案例</p><h1 id="查看现有可以启动的扩展"><a href="#查看现有可以启动的扩展" class="headerlink" title="查看现有可以启动的扩展"></a>查看现有可以启动的扩展</h1><p>root@517b9c67507a:/usr/local/etc/php# ls /usr/local/lib/php/extensions/no-debug-non-zts-20170718/<br>opcache.so  redis.so  sodium.so<br>root@517b9c67507a:/usr/local/etc/php#</p><h1 id="查看redis-扩展是否可以启动"><a href="#查看redis-扩展是否可以启动" class="headerlink" title="查看redis 扩展是否可以启动"></a>查看redis 扩展是否可以启动</h1><p>root@517b9c67507a:/usr/local/etc/php# php -m | grep redis<br>root@517b9c67507a:/usr/local/etc/php#</p><h1 id="启动-redis-扩展"><a href="#启动-redis-扩展" class="headerlink" title="启动 redis 扩展"></a>启动 redis 扩展</h1><p>root@517b9c67507a:/usr/local/etc/php# docker-php-ext-enable redis</p><h1 id="启动-成功"><a href="#启动-成功" class="headerlink" title="启动 成功"></a>启动 成功</h1><p>root@517b9c67507a:/usr/local/etc/php# php -m | grep redis<br>redis<br>root@517b9c67507a:/usr/local/etc/php#</p><p>#说明，php容器中默认是没有php.ini配置文件的,加载原理如下所示</p><p>root@517b9c67507a:/usr/local/etc/php# php -i | grep -A 5 php.ini<br>Configuration File (php.ini) Path =&gt; /usr/local/etc/php<br>Loaded Configuration File =&gt; (none)</p><h1 id="核心是-usr-local-etc-php-conf-d-目录下的扩展配置文件"><a href="#核心是-usr-local-etc-php-conf-d-目录下的扩展配置文件" class="headerlink" title="核心是 /usr/local/etc/php/conf.d 目录下的扩展配置文件"></a>核心是 /usr/local/etc/php/conf.d 目录下的扩展配置文件</h1><p>Scan this dir for additional .ini files =&gt; /usr/local/etc/php/conf.d<br>Additional .ini files parsed =&gt; /usr/local/etc/php/conf.d/docker-php-ext-redis.ini,<br>/usr/local/etc/php/conf.d/docker-php-ext-sodium.ini</p><p>root@517b9c67507a:/usr/local/etc/php#<br>docker-php-ext-install<br>这个命令，是用来安装并启动PHP扩展的。<br>命令格式：<br>docker-php-ext-install “源码包目录名”</p><p>注意点：</p><p>“源码包“需要放在 /usr/src/php/ext 下<br>默认情况下，PHP容器没有 /usr/src/php这个目录，需要使用 docker-php-source extract来生成。<br>docker-php-ext-install 安装的扩展在安装完成后，会自动调用docker-php-ext-enable来启动安装的扩展。<br>卸载扩展，直接删除/usr/local/etc/php/conf.d 对应的配置文件即可。<br>案例</p><h1 id="卸载redis-扩展"><a href="#卸载redis-扩展" class="headerlink" title="卸载redis 扩展"></a>卸载redis 扩展</h1><p>root@803cbcf702a4:/usr/local# rm -rf /usr/local/etc/php/conf.d/docker-php-ext-redis.ini<br>root@803cbcf702a4:/usr/local# php -m<br>[PHP Modules]<br>Core<br>ctype<br>curl<br>date<br>dom<br>fileinfo<br>filter<br>ftp<br>hash<br>iconv<br>json<br>libxml<br>mbstring<br>mysqlnd<br>openssl<br>pcre<br>PDO<br>pdo_sqlite<br>Phar<br>posix<br>readline<br>Reflection<br>session<br>SimpleXML<br>sodium<br>SPL<br>sqlite3<br>standard<br>tokenizer<br>xml<br>xmlreader<br>xmlwriter<br>zlib</p><p>[Zend Modules]</p><p>root@803cbcf702a4:/usr/local#</p><p>#PHP容器默认是没有redis扩展的。所以我们通过docker-php-ext-install安装redis扩展</p><p>root@803cbcf702a4:/# curl -L -o /tmp/reids.tar.gz <a href="https://codeload.github.com/phpredis/phpredis/tar.gz/5.0.2" target="_blank" rel="noopener">https://codeload.github.com/phpredis/phpredis/tar.gz/5.0.2</a></p><p>root@803cbcf702a4:/# cd /tmp<br>root@517b9c67507a:/tmp# tar -xzf reids.tar.gz<br>root@517b9c67507a:/tmp# ls<br>phpredis-5.0.2  reids.tar.gz<br>root@517b9c67507a:/tmp# docker-php-source extract<br>root@517b9c67507a:/tmp# mv phpredis-5.0.2 /usr/src/php/ext/phpredis</p><p>#检查移过去的插件源码包是否存在<br>root@517b9c67507a:/tmp# ls -l /usr/src/php/ext | grep redis<br>drwxrwxr-x  6 root root 4096 Jul 29 15:04 phpredis<br>root@517b9c67507a:/tmp# docker-php-ext-install phpredis</p><h1 id="检查redis-扩展是否已经安装上"><a href="#检查redis-扩展是否已经安装上" class="headerlink" title="检查redis 扩展是否已经安装上"></a>检查redis 扩展是否已经安装上</h1><p>root@517b9c67507a:/tmp# php -m | grep redis<br>redis<br>root@517b9c67507a:/tmp#<br>docker-php-ext-configure<br>docker-php-ext-configure 一般都是需要跟 docker-php-ext-install搭配使用的。它的作用就是，当你安装扩展的时候，需要自定义配置时，就可以使用它来帮你做到。</p><p>案例</p><p>FROM php:7.1-fpm<br>RUN apt-get update <br>    # 相关依赖必须手动安装<br>    &amp;&amp; apt-get install -y <br>        libfreetype6-dev <br>        libjpeg62-turbo-dev <br>        libmcrypt-dev <br>        libpng-dev <br>    # 安装扩展<br>    &amp;&amp; docker-php-ext-install -j$(nproc) iconv mcrypt <br>    # 如果安装的扩展需要自定义配置时<br>    &amp;&amp; docker-php-ext-configure gd –with-freetype-dir=/usr/include/ –with-jpeg-dir=/usr/include/ <br>    &amp;&amp; docker-php-ext-install -j$(nproc) gd</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>架构优化</title>
      <link href="/2019/11/30/php/change/jiagouyouhua/"/>
      <url>/2019/11/30/php/change/jiagouyouhua/</url>
      
        <content type="html"><![CDATA[<p>反向代理和CDN加速网站响应<br>使用反向代理和CDN加速网站响应：CDN 和反向代理的基本原理都是缓存，区别在于：</p><p>CDN部署在网络提供商的机房；</p><p>反向代理则部署在网站的中心机房；</p><p>使用 CDN 和反向代理的目的都是尽早返回数据给用户，一方面加快用户访问速度，另一方面也减轻后端服务器的负载压力。</p><p>使用反向代理和 CDN 加速网站响应</p><p>优点：减轻应用负载压力，异地缓存有效解决不同地方用户访问过慢的问题；<br>缺点：成本大幅增加，架构进一步复杂化，也维护难度进一步增大，静态文件缓存更新失效问题；<br>技术点：CDN、反向代理方案；</p><p>使用NoSQL和搜索引擎<br>到这里，已经基本做到了DB层面和应用层面的横向扩展了，可以开始关注一些其它方面，例如：站内搜索的精准度，对DB的依赖，开始引入全文索引、NoSQL。</p><p>NoSQL和搜索引擎都是源自互联网的技术手段，对可伸缩的分布式特性具有更好的支持。应用服务器则通过一个统一数据访问模块访问各种数据，减轻应用程序管理诸多数据源的麻烦。</p><p>使用NoSQL和搜索引擎</p><p>优点：降低DB依赖；<br>缺点：单点问题，谈不上高可用；<br>技术点：NoSQL、搜索引擎、分布式；</p><p>到目前为止，一个能够承载日均百万级访问量的中型网站架构基本介绍完了。</p><p>如何保证高可用<br>在做扩展满足了基本的性能需求后，我们会逐渐关注“可用性”（也就是我们通常听别人吹牛时说的SLA、几个9）。如何保证真正“高可用”，也是个难题。</p><p>对关键应用/服务，做集群冗余负载，这也是保证高可用比较常用的手段：</p><p>文件系统、数据库系统集群；</p><p>静态内容服务器集群；</p><p>CDN服务器集群；</p><p>反向代理服务器集群；</p><p>负载均衡调度器集群；</p><p>分布式NoSQL服务器集群；</p><p>搜索引擎服务器集群；</p><p>分布式缓存服务器集群；</p><p>分布式Session服务器集群；</p><p>使用集群冗余负载 保证高可用</p><p>优点：集群负载，保证高可用；<br>缺点：数据一致性、数据有状态问题；<br>技术点：负载调度器、集群方案；</p><p>截止目前为止，都没有怎么去改动应用程序的架构，或者说通俗点，都不怎么需要大面积的修改代码。</p><p>如果上面那些手段都用光了，还是支撑不住怎么办？不停的加机器也不是办法啊？</p><p>应用垂直拆分<br>随着业务越来越复杂，网站的功能越来越多，虽然部署层面是采用的集群，但是应用程序架构层面还是“集中式”的，这样会导致很多耦合，不便于开发、维护，而且容易“一荣俱损”。所以，通常会把网站拆分出不同的子站点来单独宿主。</p><p>通过分而治之的手段将整个网站业务分成不同的产品线，如首页、商铺、订单、卖家、买家等拆分成不同的产品线，分归不同的业务团队负责。各个应用之间可以通过建立一个超链接建立关系，也可以通过消息队列进行数据分发。</p><p>应用垂直拆分（分压，解耦）</p><p>优点：降低耦合、分压；<br>缺点：应用架构复杂；<br>技术点：业务抽取拆分；</p><p>业务垂直分库<br>应用都拆了，由于单个数据库的连接，QPS，TPS，I/O处理能力都非常有限，DB层面也可以去做垂直分库操作。</p><p>业务垂直分库 分压 解耦</p><p>优点：降低DB耦合、分压DB；<br>缺点：数据访问模块复杂；<br>技术点：业务抽取拆分；</p><p>分布式服务化<br>拆分应用和DB之后，其实还是会有很多问题。不同的站点，里面可能会有相同逻辑和功能的代码。当然，对于一些基础的功能我们可以封装DLL或者Jar包去到处提供引用，但是这种强依赖也很容易造成一些问题（版本问题、依赖关系等处理起来非常麻烦）。</p><p>既然每一个应用系统都需要执行许多相通的业务操作，比如用户管理、商品管理等，那么可以将这些共用的业务提取出来，独立部署。这样，传说中的SOA的价值就得到体现了。</p><p>分布式服务化（解耦，去重复）</p><p>优点：服务统一管理，提供重用度；<br>缺点：应用架构更复杂；<br>技术点：业务抽取拆分、服务化技术方案；</p><p>消息队列<br>应用、服务之间还是会出现一些依赖问题，这时候，高吞吐量的解耦利器出现了。</p><p>消息队列（服务间异步解耦 高吞吐量）</p><p>优点：提高吞吐量、应用、服务之间解耦；<br>缺点：存在消息消费延迟问题；<br>技术点：消息队列技术方案；</p><p>分库分表<br>*后，再介绍一个大型互联网公司都用的绝技–分库分表。个人经验，不是业务发展和各方面非常迫切，不要轻易走这一步。</p><p>因为分库分表谁都会干，关键是拆完之后怎么办。目前，市面上还没有完全开源免费的方案，能让你一劳永逸地解决数据库拆分问题。</p><p>分库分表：</p><p>横向拆分；</p><p>纵向拆分；</p><p>分布式数据库访问层；</p><p>数据库中间件（代理）；</p><p>网站架构总结<br>上面讲述了在网站业务发展的不同阶段，会面临不同的问题，针对不同的问题，会选择不同的架构。大型网站架构就是在不同阶段时解决不同问题的过程中慢慢演进来的。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下搭建Apache+PHP+MySql运行环境</title>
      <link href="/2019/11/17/Mac/start/"/>
      <url>/2019/11/17/Mac/start/</url>
      
        <content type="html"><![CDATA[<p>Mac下搭建Apache+PHP+MySql运行环境<br>前言</p><p>　　我们在Mac上搭建Apache+PHP+MySql环境是非常方便的，因为Mac预装的有Apache和PHP，我们可以直接使用。但是稍微费劲一点的是Mac没有预装Mysql，这个需要我们自力更生。好了，废话就不多说了，接下来让我们愉快的学习一下在Mac上怎么搭建Apache+PHP+MySql的运行环境吧^_^</p><p>Apache</p><p>　　首先，让我们来看一下是怎么开启Apache服务的</p><p>　　打开Mac的终端，输入下面一条命令，开启Apache服务（因为sudo是系统管理命令，所以需要输入你的Mac密码）：</p><p>　　　　</p><p>1<br>sudo apachectl start</p><p> 　　其次，让我们查看一下Apache服务是否开启成功，在浏览器中输入localhost:80（80是默认端口），如果浏览器中显示 It Works！则证明Apache服务开启成功。</p><p>　　PS：上面也说了 Apache服务端口号 默认是80，如果我想换个端口该怎么办呢，不要捉急，往下看⬇️</p><p>　　　　Apache服务的默认安装路径是/etc/apache2，一版情况下/etc目录在Finder下是不可直接找到的，在Finder下使用快捷键 command+shift+g，然后输入/etc 回车，就会看到apache2目录。</p><p>　　　　　　　　<br>　　　　找到并打开httpd.conf，搜索Listen80，修改成你想要的端口号即可（注：对配置文件修改过后要一定要重启Apache服务）</p><p>　　　　　　 </p><p>　　　　另外，Apache服务部署路径在 /Library/WebServer/Documents 目录下，使用快捷键command+shift+g后输入/L等待1秒钟后回车，进入Library（资源库），倒数第二个WebSever文件夹下的Documents目录就是Apache服务的部署路径，我们的项目需要放在此目录下</p><p>　　　　</p><p>　　　　如果想要修改默认部署路径，可以在/etc/apache2目录下找到并打开httpd.conf文件，找到 DocumentRoot ，更改路径即可。</p><p>　　　　（详情请参考：<a href="https://www.cnblogs.com/xiaovw/p/9843829.html）" target="_blank" rel="noopener">https://www.cnblogs.com/xiaovw/p/9843829.html）</a></p><p>　　　　最后，提供几个和Apache服务有关的常用命令。</p><p>1、启动Apache服务  sudo apachectl start<br>2、重启Apache服务  sudo apachectl restart<br>3、停止Apache服务  sudo apachectl stop<br>4、查看Apache服务  sudo apachectl -v</p><p>　　配置PHP　　 </p><p>　　　　因为Mac自带的有PHP，所以我们启动php非常方便，只需要在在Apache服务中配置一下即可直接使用。具体方法如下：</p><p>　　　　首先，在/ect/apache2目录下找到并打开httpd.conf文件</p><p>　　　　其次，搜索LoadModule php，找到LoadModule php的所在行，把前面的#号去掉，保存后重启Apache服务即可（我的是PHP7，有的人可能是PHP5，没毛病···）。</p><p>　　　　最后，让我们在Apache服务的部署路径（/Library/WebServer/Documents）下新建一个index.php测试程序，看一下效果吧。</p><p>　　　　这是index.php文件里面的内容。</p><p>　　　　 </p><p>　　　　在浏览器中输入如下网址即可查看到PHP的信息</p><p>　　　　 <a href="http://localhost/info.php" target="_blank" rel="noopener">http://localhost/info.php</a> </p><p>　　　　</p><p>　　MySql的安装</p><p>　　　　因为Mac没有自带的mysql，所以需要我们去手动安装，在浏览器中输入如下网址课之间进入MySQL的官网下载macOS服务。</p><p>　　　　 <a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/</a> </p><p>　　　　　</p><p>　　　　这个时候执行下面的命令，在终端中查看MySQL的版本信息</p><p> 　　　　mysql –version </p><p>　　　　会报错，报错信息为： zsh: command not found: mysql ，这是因为该命令默认访问/usr/local/bin/mysql 路径下的mysql，所以我们需要建立一个软连接即可，可以在终端中使用如下命令：</p><p> 　　　　sudo ln -fs /usr/local/mysql/bin/mysql /usr/local/bin/mysql </p><p>　　　　这个时候再次利用安装MySQL时给出的用户和密码登录MySQL服务，在终端输入如下命令后回车，需要输入MySQL密码：</p><p>　　　　 mysql -u root -p  </p><p>　　　　此时已经进入了MySQL服务，退出的命令为quit（exit也可以）</p><p>　　</p><p>　　　　MySQl服务的启动与停止</p><p>　　　　第一种方法：使用终端命令</p><p>启动MySQL服务 sudo /usr/local/mysql/support-files/mysql.server start</p><p>停止MySQL服务 sudo /usr/local/mysql/support-files/mysql.server stop<br>　　　　第二种方法：在系统偏好设置中有一个有MySQL选项，可以在这里手动启动与停止MySQL服务，但是我Mac的上MySQL由于版本兼容问题，系统偏好设置的MySQL服务无法加载出来（我的Mac版本为10.13.4）。</p><p>　　　　</p><p>　　　　安装MySQl图形化管理工具Workbench</p><p>　　　　下载网址：<a href="https://dev.mysql.com/downloads/workbench/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/workbench/</a></p><p>　　　　</p><p>　　　　下载完成后安装，安装完成后要建立本地连接（password是MySQl的密码）</p><p>　　　　</p><p>　　　　最后一步，测试连接，到此为止MySQL图形化管理工具安装并连接本地MySQL成功。</p><p>　　　　</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux安装git</title>
      <link href="/2019/11/12/linux/gitanzhuang/"/>
      <url>/2019/11/12/linux/gitanzhuang/</url>
      
        <content type="html"><![CDATA[<p>简单粗暴直接命令执行</p><p>yum -y install git</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下全局安装composer</title>
      <link href="/2019/11/10/linux/composer/"/>
      <url>/2019/11/10/linux/composer/</url>
      
        <content type="html"><![CDATA[<p>安装前需确保系统PHP版本在5.3以上,在终端中执行以下命令下载Composer可执行文件：</p><p>curl -sS <a href="https://getcomposer.org/installer" target="_blank" rel="noopener">https://getcomposer.org/installer</a> | php</p><p>此操作会下载最新版本到当前的工作目录中。然后在当前路径下就可以操作了，如查看Composer版本：</p><p>php composer.phar –version //Composer version 1.4.2 2017-05-17 08:17:52</p><p>如果下载失败也不用纠结了，直接去手动下载合适的版本<a href="https://getcomposer.org/download/，结果的一样的。" target="_blank" rel="noopener">https://getcomposer.org/download/，结果的一样的。</a></p><p>这应该算是局部安装了，当跳出当前目录还是无法正常使用，这肯定不是我们所期望的。如果要想全局生效需把composer.phar移到系统/usr/local/bin/目录下：</p><p>mv composer.phar /usr/local/bin/composer</p><p>然后在全部就可以使用composer,再也不用每次都输入长长的php composer.phar了。至此算是安装完毕。</p><p>//版本更新，如果有则更新到最新版本<br>composer selfupdate</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker的LNMP一键安装</title>
      <link href="/2019/11/09/docker/start/"/>
      <url>/2019/11/09/docker/start/</url>
      
        <content type="html"><![CDATA[<h1 id="DNMP-PLUS"><a href="#DNMP-PLUS" class="headerlink" title="DNMP PLUS"></a>DNMP PLUS</h1><p><strong>dnmp</strong> = <code>Docker</code> + <code>Nginx</code> + <code>MySQL</code> + <code>PHP</code> + <code>Redis</code> + <code>MongDB</code></p><p><strong>plus</strong> = <code>xhgui</code> + <code>xhprof</code> + <code>tideways</code></p><p><strong>dnmp-plus</strong> = <code>PHPer 的一键安装开发环境</code> + <code>PHP 非侵入式监控平台（优化系统性能、定位 Bug 的神器）</code></p><hr><p><a href="https://travis-ci.org/guanguans/dnmp-plus" target="_blank" rel="noopener"><img src="https://travis-ci.org/guanguans/dnmp-plus.svg?branch=master" alt="Build Status"></a></p><p>简体中文 | <a href="README-EN.md">English</a></p><p><strong><a href="https://github.com/guanguans/dnmp-plus" target="_blank" rel="noopener">dnmp-plus</a></strong> 在 <a href="https://github.com/yeszao" target="_blank" rel="noopener">yeszao</a> 的 <a href="https://github.com/yeszao/dnmp" target="_blank" rel="noopener">DNMP</a> 基础上新增：</p><ul><li><a href="https://github.com/phacility/xhprof" target="_blank" rel="noopener">PHP xhprof 扩展</a> - Facebook 开发的 PHP 性能追踪及分析工具</li><li><a href="https://github.com/tideways/php-xhprof-extension" target="_blank" rel="noopener">PHP tideways 扩展</a> - xhprof 的分支，支持 PHP7</li><li>PHP mongodb 扩展</li><li>MongoDB 服务</li><li>Mongo Express - MongoDB 服务管理系统</li><li><a href="https://github.com/laynefyc/xhgui-branch" target="_blank" rel="noopener">xhgui</a> - xhprof 分析数据数据的 GUI 系统</li></ul><p><img src="docs/dnmp-plus.png" alt=""></p><hr><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├── .github                     Github 配置目录</span><br><span class="line">├── conf                        配置文件目录</span><br><span class="line">│   ├── conf.d                  Nginx 用户站点配置目录</span><br><span class="line">│   ├── mysql.cnf               MySQL 用户配置文件</span><br><span class="line">│   ├── nginx.conf              Nginx 默认配置文件</span><br><span class="line">│   ├── php-fpm.conf            PHP-FPM 配置文件</span><br><span class="line">│   ├── php.ini                 PHP 配置文件</span><br><span class="line">│   ├── redis.conf              Redis 配置文件</span><br><span class="line">├── docs                        文档目录</span><br><span class="line">├── extensions                  PHP 扩展源码包</span><br><span class="line">├── <span class="built_in">log</span>                         日志目录</span><br><span class="line">├── mongo                       MongoDB 数据目录</span><br><span class="line">├── mysql                       MySQL 数据目录</span><br><span class="line">├── www                         PHP 代码目录</span><br><span class="line">├── Dockerfile                  PHP 镜像构建文件</span><br><span class="line">├── docker-compose-sample.yml   Docker 服务配置示例文件</span><br><span class="line">├── env.smaple                  环境配置示例文件</span><br><span class="line">└── travis-build.sh             Travis CI 构建脚本</span><br></pre></td></tr></table></figure><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>Docker</li><li>Docker-compose</li><li>Git</li></ul><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/guanguans/dnmp-plus.git --recursive</span><br><span class="line">$ <span class="built_in">cd</span> dnmp-plus</span><br><span class="line">$ cp env.sample .env</span><br><span class="line">$ cp docker-compose-sample.yml docker-compose.yml</span><br><span class="line"><span class="comment"># 服务选项：nginx、php72、php56、mysql、mongo、redis、phpmyadmin、phpredisadmin、mongo-express</span></span><br><span class="line">$ docker-compose up -d php72 nginx mysql mongo</span><br></pre></td></tr></table></figure><p>OK，你现在已经拥有了一个 dnmp-plus 开发环境，默认 web 根目录 <code>www/localhost/</code>，浏览器访问 <a href="http://localhost" target="_blank" rel="noopener">http://localhost</a></p><p><img src="docs/localhost.png" alt=""></p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务选项：nginx、php72、php56、mysql、mongo、redis、phpmyadmin、phpredisadmin、mongo-express</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并且启动容器</span></span><br><span class="line">$ docker-compose up 服务1 服务2 ...</span><br><span class="line"><span class="comment"># 创建并且启动所有容器</span></span><br><span class="line">$ docker-compose up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并且已后台运行的方式启动容器</span></span><br><span class="line">$ docker-compose up -d 服务1 服务2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">$ docker-compose start 服务1 服务2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">$ docker-compose stop 服务1 服务2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">$ docker-compose restart 服务1 服务2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建或者重新构建服务</span></span><br><span class="line">$ docker-compose build 服务1 服务2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入命令行容器</span></span><br><span class="line">$ docker-compose <span class="built_in">exec</span> 服务 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除并且停止容器</span></span><br><span class="line">$ docker-compose rm 服务1 服务2 ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止并删除容器，网络，图像和挂载卷</span></span><br><span class="line">$ docker-compose down 服务1 服务2 ...</span><br></pre></td></tr></table></figure><h2 id="xhgui-使用，可以参考-https-github-com-guanguans-guanguans-github-io-issues-9"><a href="#xhgui-使用，可以参考-https-github-com-guanguans-guanguans-github-io-issues-9" class="headerlink" title="xhgui 使用，可以参考  https://github.com/guanguans/guanguans.github.io/issues/9"></a>xhgui 使用，可以参考  <a href="https://github.com/guanguans/guanguans.github.io/issues/9" target="_blank" rel="noopener">https://github.com/guanguans/guanguans.github.io/issues/9</a></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> www/xhgui-branch</span><br><span class="line">$ composer install</span><br></pre></td></tr></table></figure><h3 id="修改-xhgui-branch-配置文件-www-xhgui-branch-config-config-default-php"><a href="#修改-xhgui-branch-配置文件-www-xhgui-branch-config-config-default-php" class="headerlink" title="修改 xhgui-branch 配置文件 www/xhgui-branch/config/config.default.php"></a>修改 xhgui-branch 配置文件 <code>www/xhgui-branch/config/config.default.php</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">array</span>(</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'debug'</span>        =&gt; <span class="keyword">true</span>, <span class="comment">// 改为true，便于调试</span></span><br><span class="line">    <span class="string">'mode'</span>         =&gt; <span class="string">'development'</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'extension'</span>    =&gt; <span class="string">'tideways'</span>, <span class="comment">// 改为支持 PHP7 的 tideways</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="string">'save.handler'</span> =&gt; <span class="string">'mongodb'</span>,</span><br><span class="line">    <span class="string">'db.host'</span>      =&gt; <span class="string">'mongodb://mongo:27017'</span>, <span class="comment">// 127.0.0.1 改为 mongo</span></span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="hosts-文件中增加"><a href="#hosts-文件中增加" class="headerlink" title="hosts 文件中增加"></a>hosts 文件中增加</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1             xhgui.test</span><br></pre></td></tr></table></figure><h3 id="浏览器访问-http-xhgui-test"><a href="#浏览器访问-http-xhgui-test" class="headerlink" title="浏览器访问 http://xhgui.test"></a>浏览器访问 <a href="http://xhgui.test" target="_blank" rel="noopener">http://xhgui.test</a></h3><p><img src="docs/xhgui1.png" alt=""></p><h3 id="在要分析项目-nginx-配置文件中修改，以默认的-localhost-配置-conf-conf-d-localhost-conf-为例"><a href="#在要分析项目-nginx-配置文件中修改，以默认的-localhost-配置-conf-conf-d-localhost-conf-为例" class="headerlink" title="在要分析项目 nginx 配置文件中修改，以默认的 localhost 配置 conf/conf.d/localhost.conf 为例"></a>在要分析项目 nginx 配置文件中修改，以默认的 localhost 配置 <code>conf/conf.d/localhost.conf</code> 为例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    fastcgi_pass   php72:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">    fastcgi_param  PATH_INFO $fastcgi_path_info;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">    # 在执行主程序之前运行我们指定的PHP脚本</span><br><span class="line">    fastcgi_param  PHP_VALUE &quot;auto_prepend_file&#x3D;&#x2F;var&#x2F;www&#x2F;html&#x2F;xhgui-branch&#x2F;external&#x2F;header.php&quot;; </span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line"></span><br><span class="line">### 重启 nginx</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96; bash</span><br><span class="line">$ docker-compose restart nginx</span><br></pre></td></tr></table></figure><h3 id="浏览器访问-http-localhost，再访问-http-xhgui-test，此时已经有了内容，愉快的查看项目的性能追踪及分析吧"><a href="#浏览器访问-http-localhost，再访问-http-xhgui-test，此时已经有了内容，愉快的查看项目的性能追踪及分析吧" class="headerlink" title="浏览器访问 http://localhost，再访问 http://xhgui.test，此时已经有了内容，愉快的查看项目的性能追踪及分析吧"></a>浏览器访问 <a href="http://localhost" target="_blank" rel="noopener">http://localhost</a>，再访问 <a href="http://xhgui.test" target="_blank" rel="noopener">http://xhgui.test</a>，此时已经有了内容，愉快的查看项目的性能追踪及分析吧</h3><p><img src="docs/xhgui2.png" alt=""></p><p><img src="docs/xhgui3.png" alt=""></p><h2 id="PHP-和扩展"><a href="#PHP-和扩展" class="headerlink" title="PHP 和扩展"></a>PHP 和扩展</h2><h3 id="切换-Nginx-使用的-PHP-版本"><a href="#切换-Nginx-使用的-PHP-版本" class="headerlink" title="切换 Nginx 使用的 PHP 版本"></a>切换 Nginx 使用的 PHP 版本</h3><p>默认同时创建 <code>PHP5.6</code> 和 <code>PHP7.2</code> 2 个 PHP 版本的容器，切换 PHP 仅需修改相应站点 Nginx 配置的 <code>fastcgi_pass</code> 选项，例如，示例的 <a href="http://localhost" target="_blank" rel="noopener">http://localhost</a> 用的是 PHP7.2，Nginx 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_pass   php72:9000;</span><br></pre></td></tr></table></figure><p>要改用 PHP5.6，修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_pass   php56:9000;</span><br></pre></td></tr></table></figure><p>重启 Nginx 生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose restart nginx</span><br></pre></td></tr></table></figure><h3 id="安装-PHP-扩展"><a href="#安装-PHP-扩展" class="headerlink" title="安装 PHP 扩展"></a>安装 PHP 扩展</h3><p>PHP 的很多功能都是通过扩展实现，而安装扩展是一个略费时间的过程，<br>所以，除 PHP 内置扩展外，在 <code>env.sample</code> 文件中我们仅默认安装少量扩展，<br>如果要安装更多扩展，请打开你的 <code>.env</code> 文件修改如下的 PHP 配置，<br>增加需要的 PHP 扩展：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PHP72_EXTENSIONS=pdo_mysql,opcache,redis,xdebug,mongodb,tideways</span><br><span class="line">PHP56_EXTENSIONS=opcache,redis,xdebug,mongodb,xhprof</span><br></pre></td></tr></table></figure><p>然后重新构建 PHP 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose build php72</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="使用-Log"><a href="#使用-Log" class="headerlink" title="使用 Log"></a>使用 Log</h2><p>Log 文件生成的位置依赖于 conf 下各 log 配置的值。</p><h3 id="Nginx-日志"><a href="#Nginx-日志" class="headerlink" title="Nginx 日志"></a>Nginx 日志</h3><p>Nginx 日志是我们用得最多的日志，所以我们单独放在根目录 <code>log</code> 下。<code>log</code> 会目录映射 Nginx 容器的 <code>/var/log/nginx</code> 目录，所以在 Nginx 配置文件中，需要输出 log 的位置，我们需要配置到 <code>/var/log/nginx</code> 目录，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_log  &#x2F;var&#x2F;log&#x2F;nginx&#x2F;nginx.localhost.error.log  warn;</span><br></pre></td></tr></table></figure><h3 id="MySQL-日志"><a href="#MySQL-日志" class="headerlink" title="MySQL 日志"></a>MySQL 日志</h3><p>因为 MySQL 容器中的 MySQL 使用的是 <code>mysql</code> 用户启动，它无法自行在 <code>/var/log</code> 下的增加日志文件。所以，我们把 MySQL 的日志放在与 data 一样的目录，即项目的<code>mysql</code>目录下，对应容器中的 <code>/var/lib/mysql/</code> 目录。</p><p>mysql.conf 中的日志文件的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slow-query-log-file     &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.slow.log</span><br><span class="line">log-error               &#x3D; &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.error.log</span><br></pre></td></tr></table></figure><h2 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h2><ul><li>默认 phpMyAdmin 地址：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></li><li>默认 phpRedisAdmin 地址：<a href="http://localhost:8081" target="_blank" rel="noopener">http://localhost:8081</a></li><li>默认 Mongo Express 地址：<a href="http://localhost:8082" target="_blank" rel="noopener">http://localhost:8082</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://github.com/yeszao/dnmp" target="_blank" rel="noopener">https://github.com/yeszao/dnmp</a>，yeszao</li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p><a href="LICENSE">MIT</a></p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http响应状态码大全</title>
      <link href="/2019/11/09/php/base/code/"/>
      <url>/2019/11/09/php/base/code/</url>
      
        <content type="html"><![CDATA[<p>http状态返回代码 1xx（临时响应）<br>表示临时响应并需要请求者继续执行操作的状态代码。<br>http状态返回代码 代码   说明<br>100   （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。<br>101   （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。<br>http状态返回代码 2xx （成功）<br>表示成功处理了请求的状态代码。<br>http状态返回代码 代码   说明<br>200   （成功）  服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。<br>201   （已创建）  请求成功并且服务器创建了新的资源。<br>202   （已接受）  服务器已接受请求，但尚未处理。<br>203   （非授权信息）  服务器已成功处理了请求，但返回的信息可能来自另一来源。<br>204   （无内容）  服务器成功处理了请求，但没有返回任何内容。<br>205   （重置内容） 服务器成功处理了请求，但没有返回任何内容。<br>206   （部分内容）  服务器成功处理了部分 GET 请求。<br>http状态返回代码 3xx （重定向）<br>表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。<br>http状态返回代码 代码   说明<br>300   （多种选择）  针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。<br>301   （永久移动）  请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。<br>302   （临时移动）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br>303   （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。<br>304   （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。<br>305   （使用代理） 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。<br>307   （临时重定向）  服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。<br>http状态返回代码 4xx（请求错误）<br>这些状态代码表示请求可能出错，妨碍了服务器的处理。<br>http状态返回代码 代码   说明<br>400   （错误请求） 服务器不理解请求的语法。<br>401   （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>403   （禁止） 服务器拒绝请求。<br>404   （未找到） 服务器找不到请求的网页。<br>405   （方法禁用） 禁用请求中指定的方法。<br>406   （不接受） 无法使用请求的内容特性响应请求的网页。<br>407   （需要代理授权） 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理。<br>408   （请求超时）  服务器等候请求时发生超时。<br>409   （冲突）  服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。<br>410   （已删除）  如果请求的资源已永久删除，服务器就会返回此响应。<br>411   （需要有效长度） 服务器不接受不含有效内容长度标头字段的请求。<br>412   （未满足前提条件） 服务器未满足请求者在请求中设置的其中一个前提条件。<br>413   （请求实体过大） 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。<br>414   （请求的 URI 过长） 请求的 URI（通常为网址）过长，服务器无法处理。<br>415   （不支持的媒体类型） 请求的格式不受请求页面的支持。<br>416   （请求范围不符合要求） 如果页面无法提供请求的范围，则服务器会返回此状态代码。<br>417   （未满足期望值） 服务器未满足”期望”请求标头字段的要求。<br>http状态返回代码 5xx（服务器错误）<br>这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。<br>http状态返回代码 代码   说明<br>500   （服务器内部错误）  服务器遇到错误，无法完成请求。<br>501   （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。<br>502   （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。<br>503   （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。<br>504   （网关超时）  服务器作为网关或代理，但是没有及时从上游服务器收到请求。<br>505   （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。  </p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防止SQL注入</title>
      <link href="/2019/11/03/mysql/sql/"/>
      <url>/2019/11/03/mysql/sql/</url>
      
        <content type="html"><![CDATA[<p>1、开启配置文件中的magic_quotes_gpc和magic_quotes_runtime设置</p><p>2、执行sql语句时使用addslashes进行sql语句转换</p><p>3、Sql语句书写尽量不要省略小引号和单引号</p><p>4、过滤掉sql语句中的一些关键字：update、insert、delete、select、*</p><p>5、提高数据库表和字段的命名技巧，对一些重要的字段根据程序的特点命名，取不易被猜到的。</p><p>6、Php配置文件中设置register_globals为off，关闭全局变量注册</p><p>7、控制错误信息，不要再浏览器上输出错误信息，将错误信息写到日志文件中。</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大型网站电商网站架构案例和技术架构的示例</title>
      <link href="/2019/11/02/jiagou/shop/"/>
      <url>/2019/11/02/jiagou/shop/</url>
      
        <content type="html"><![CDATA[<p>大型网站架构是一个系列文档，欢迎大家关注。本次分享主题：电商网站架构案例。从电商网站的需求，到单机架构，逐步演变为常用的，可供参考的分布式架构的原型。除具备功能需求外，还具备一定的高性能，高可用，可伸缩，可扩展等非功能质量需求（架构目标）。</p><p>根据实际需要，进行改造，扩展，支持千万PV，是没问题的。</p><p>本次分享大纲<br>电商案例的原因<br>电商网站需求<br>网站初级架构<br>系统容量估算<br>网站架构分析<br>网站架构优化<br>架构总结<br>电商网站案例，一共有三篇本篇主要说明网站的需求，网站初始架构，系统容量估算方法。</p><p>一、电商案例的原因<br>分布式大型网站，目前看主要有几类1.大型门户，比如网易，新浪等；2.SNS网站，比如校内，开心网等；3.电商网站：比如阿里巴巴，京东商城，国美在线，汽车之家等。大型门户一般是新闻类信息，可以使用CDN，静态化等方式优化，开心网等交互性比较多，可能会引入更多的NOSQL，分布式缓存，使用高性能的通信框架等。电商网站具备以上两类的特点，比如产品详情可以采用CDN，静态化，交互性高的需要采用NOSQL等技术。因此，我们采用电商网站作为案例，进行分析。</p><p>二、电商网站需求<br>客户需求：</p><p>建立一个全品类的电子商务网站（B2C），用户可以在线购买商品，可以在线支付，也可以货到付款；<br>用户购买时可以在线与客服沟通；<br>用户收到商品后，可以给商品打分，评价；<br>目前有成熟的进销存系统；需要与网站对接；<br>希望能够支持3<del>5年，业务的发展；<br>预计3</del>5年用户数达到1000万；<br>定期举办双11，双12,三八男人节等活动；<br>其他的功能参考京东或国美在线等网站。<br>客户就是客户，不会告诉你具体要什么，只会告诉你他想要什么，我们很多时候要引导，挖掘客户的需求。好在提供了明确的参考网站。因此，下一步要进行大量的分析，结合行业，以及参考网站，给客户提供方案。</p><p>其他的略<del>~</del></p><p>需求功能矩阵</p><p>需求管理传统的做法，会使用用例图或模块图（需求列表）进行需求的描述。这样做常常忽视掉一个很重要的需求（非功能需求），因此推荐大家使用需求功能矩阵，进行需求描述。</p><p>本电商网站的需求矩阵如下：<br><img src="https://img-blog.csdnimg.cn/20191223232351194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图片存储的要求（海量小图片）用户可以在线购买商品会员管理，购物车，结算功能良好购物体验（可用性，性能）在线支付或货到付款多种在线支付方式支付过程要安全，数据加密（安全性）多种支付接口灵活切换（灵活性，扩展性）可以在线与客服沟通在线客服功能可靠性：即时通讯商品打分评价商品评论 目前有成熟的进销存系统对接进销存属于约束条件对接时要考虑数据一致性，鲁棒性支持3<del>5年，业务的发展 属于约束条件伸缩性，可扩展性3</del>5年用户数达到1000万 约束条件举办双11，双12,三八男人节等活动活动管理，秒杀突增访问流量（可伸缩）实时性要求（高性能）参考京东或国美在线 参考条件</p><p>以上是对电商网站需求的简单举例，目的是说明（1）需求分析的时候，要全面，大型分布式系统重点考虑非功能需求；（2）描述一个简单的电商需求场景，使大家对下一步的分析设计有个依据。</p><p>三、网站初级架构<br>一般网站，刚开始的做法，是三台服务器，一台部署应用，一台部署数据库，一台部署NFS文件系统。</p><p>这是前几年比较传统的做法，之前见到一个网站10万多会员，垂直服装设计门户，N多图片。使用了一台服务器部署了应用，数据库以及图片存储。出现了很多性能问题。</p><p>如下图：</p><p>但是，目前主流的网站架构已经发生了翻天覆地的变化。一般都会采用集群的方式，进行高可用设计。至少是下面这个样子。</p><p>（1 使用集群对应用服务器进行冗余，实现高可用；（负载均衡设备可与应用一块部署）</p><p>使用数据库主备模式，实现数据备份和高可用；</p><p>四、系统容量预估<br>预估步骤：</p><p>注册用户数-日均UV量-每日的PV量-每天的并发量；<br>峰值预估：平常量的2<del>3倍；<br>根据并发量（并发，事务数），存储容量计算系统容量。<br>客户需求：3</del>5年用户数达到1000万注册用户；</p><p>每秒并发数预估：</p><p>每天的UV为200万（二八原则）；<br>每日每天点击浏览30次；<br>PV量：200<em>30=6000万；<br>集中访问量：24</em>0.2=4.8小时会有6000万<em>0.8=4800万（二八原则）；<br>每分并发量：4.8</em>60=288分钟，每分钟访问4800/288=16.7万（约等于）；<br>每秒并发量：16.7万/60=2780（约等于）；<br>假设：高峰期为平常值的三倍，则每秒的并发数可以达到8340次。<br>1毫秒=1.3次访问；<br>没好好学数学后悔了吧？！（不知道以上算是否有错误，呵呵~~）</p><p>服务器预估：（以tomcat服务器举例）</p><p>按一台web服务器，支持每秒300个并发计算。平常需要10台服务器（约等于）；[tomcat默认配置是150]<br>高峰期：需要30台服务器；<br>容量预估：70/90原则</p><p>系统CPU一般维持在70%左右的水平，高峰期达到90%的水平，是不浪费资源，并比较稳定的。内存，IO类似。</p><p>以上预估仅供参考，因为服务器配置，业务逻辑复杂度等都有影响。在此CPU，硬盘，网络等不再进行评估。</p><p>五、网站架构分析</p><p>根据以上预估，有几个问题：</p><p>需要部署大量的服务器，高峰期计算，可能要部署30台Web服务器。并且这三十台服务器，只有秒杀，活动时才会用到，存在大量的浪费。<br>所有的应用部署在同一台服务器，应用之间耦合严重。需要进行垂直切分和水平切分。<br>大量应用存在冗余代码<br>服务器SESSION同步耗费大量内存和网络带宽<br>数据需要频繁访问数据库，数据库访问压力巨大。<br>大型网站一般需要做以下架构优化（优化是架构设计时，就要考虑的，一般从架构/代码级别解决，调优主要是简单参数的调整，比如JVM调优；如果调优涉及大量代码改造，就不是调优了，属于重构）：</p><p>业务拆分<br>应用集群部署（分布式部署，集群部署和负载均衡）<br>多级缓存<br>单点登录（分布式Session）<br>数据库集群（读写分离，分库分表）<br>服务化<br>消息队列<br>其他技术<br>六、网站架构优化<br>6.1业务拆分<br>根据业务属性进行垂直切分，划分为产品子系统，购物子系统，支付子系统，评论子系统，客服子系统，接口子系统（对接如进销存，短信等外部系统）。</p><p>根据业务子系统进行等级定义，可分为核心系统和非核心系统。核心系统：产品子系统，购物子系统，支付子系统；非核心：评论子系统，客服子系统，接口子系统。</p><p>业务拆分作用：提升为子系统可由专门的团队和部门负责，专业的人做专业的事，解决模块之间耦合以及扩展性问题；每个子系统单独部署，避免集中部署导致一个应用挂了，全部应用不可用的问题。</p><p>等级定义作用：用于流量突发时，对关键应用进行保护，实现优雅降级；保护关键应用不受到影响。</p><p>拆分后的架构图：<br><img src="https://img-blog.csdnimg.cn/20191223232613939.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>参考部署方案2</p><p><img src="https://img-blog.csdnimg.cn/20191223232625298.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如上图每个应用单独部署<br>核心系统和非核心系统组合部署<br>6.2应用集群部署（分布式，集群，负载均衡）<br>分布式部署：将业务拆分后的应用单独部署，应用直接通过RPC进行远程通信；</p><p>集群部署：电商网站的高可用要求，每个应用至少部署两台服务器进行集群部署；</p><p>负载均衡：是高可用系统必须的，一般应用通过负载均衡实现高可用，分布式服务通过内置的负载均衡实现高可用，关系型数据库通过主备方式实现高可用。</p><p>集群部署后架构图：<br><img src="https://img-blog.csdnimg.cn/20191223232737929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>6.3 多级缓存<br>缓存按照存放的位置一般可分为两类本地缓存和分布式缓存。本案例采用二级缓存的方式，进行缓存的设计。一级缓存为本地缓存，二级缓存为分布式缓存。（还有页面缓存，片段缓存等，那是更细粒度的划分）</p><p>一级缓存，缓存数据字典，和常用热点数据等基本不可变/有规则变化的信息，二级缓存缓存需要的所有缓存。当一级缓存过期或不可用时，访问二级缓存的数据。如果二级缓存也没有，则访问数据库。</p><p>缓存的比例，一般1:4，即可考虑使用缓存。（理论上是1:2即可）。</p><p><img src="https://img-blog.csdnimg.cn/20191223232805687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>根据业务特性可使用以下缓存过期策略：</p><p>缓存自动过期；<br>缓存触发过期；<br>6.4单点登录（分布式Session）<br>系统分割为多个子系统，独立部署后，不可避免的会遇到会话管理的问题。一般可采用Session同步，Cookies，分布式Session方式。电商网站一般采用分布式Session实现。</p><p>再进一步可以根据分布式Session，建立完善的单点登录或账户管理系统。</p><p><img src="https://img-blog.csdnimg.cn/20191223232946574.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>流程说明</p><p>用户第一次登录时，将会话信息（用户Id和用户信息），比如以用户Id为Key，写入分布式Session；<br>用户再次登录时，获取分布式Session，是否有会话信息，如果没有则调到登录页；<br>一般采用Cache中间件实现，建议使用Redis，因此它有持久化功能，方便分布式Session宕机后，可以从持久化存储中加载会话信息；<br>存入会话时，可以设置会话保持的时间，比如15分钟，超过后自动超时；<br>结合Cache中间件，实现的分布式Session，可以很好的模拟Session会话。</p><p>6.5数据库集群（读写分离，分库分表）<br>大型网站需要存储海量的数据，为达到海量数据存储，高可用，高性能一般采用冗余的方式进行系统设计。一般有两种方式读写分离和分库分表。</p><p>读写分离：一般解决读比例远大于写比例的场景，可采用一主一备，一主多备或多主多备方式。</p><p>本案例在业务拆分的基础上，结合分库分表和读写分离。如下图：</p><p><img src="https://img-blog.csdnimg.cn/20191223233007527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>业务拆分后：每个子系统需要单独的库；<br>如果单独的库太大，可以根据业务特性，进行再次分库，比如商品分类库，产品库；<br>分库后，如果表中有数据量很大的，则进行分表，一般可以按照Id，时间等进行分表；（高级的用法是一致性Hash）<br>在分库，分表的基础上，进行读写分离；<br>相关中间件可参考Cobar（阿里，目前已不在维护），TDDL（阿里），Atlas（奇虎360），MyCat（在Cobar基础上，国内很多牛人，号称国内第一开源项目）。</p><p>分库分表后序列的问题，JOIN，事务的问题，会在分库分表主题分享中，介绍。</p><p>6.6服务化<br>将多个子系统公用的功能/模块，进行抽取，作为公用服务使用。比如本案例的会员子系统就可以抽取为公用的服务。</p><p><img src="https://img-blog.csdnimg.cn/20191223233022308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6.7消息队列<br>消息队列可以解决子系统/模块之间的耦合，实现异步，高可用，高性能的系统。是分布式系统的标准配置。本案例中，消息队列主要应用在购物，配送环节。</p><p>用户下单后，写入消息队列，后直接返回客户端；<br>库存子系统：读取消息队列信息，完成减库存；<br>配送子系统：读取消息队列信息，进行配送；</p><p><img src="https://img-blog.csdnimg.cn/20191223233036104.png" alt="在这里插入图片描述"><br>目前使用较多的MQ有Active MQ,Rabbit MQ,Zero MQ，MS MQ等，需要根据具体的业务场景进行选择。建议可以研究下Rabbit MQ。</p><p>6.8其他架构（技术）<br>除了以上介绍的业务拆分，应用集群，多级缓存，单点登录，数据库集群，服务化，消息队列外。还有CDN，反向代理，分布式文件系统，大数据处理等系统。</p><p>此处不详细介绍，大家可以问度娘/Google，有机会的话也可以分享给大家。</p><p>七、架构总结</p><p><img src="https://img-blog.csdnimg.cn/20191223233056650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>以上是本次分享的架构总结，其中细节可参考前面分享的内容。其中还有很多可以优化和细化的地方，因为是案例分享，主要针对重要部分做了介绍，工作中需要大家根据具体的业务场景进行架构设计。</p><p>以上是电商网站架构案例的分享一共有三篇，从电商网站的需求，到单机架构，逐步演变为常用的，可供参考的分布式架构的原型。除具备功能需求外，还具备一定的高性能，高可用，可伸缩，可扩展等非功能质量需求（架构目标）。</p><p>2.网站技术架构示例<br>最近我在阅读 2 本关于大型网站架构的书：《大型网站技术架构——核心原理与案例分析》李智慧、《大型网站系统与 Java 中间件实践》曾宪杰。</p><p>　　我期望从这些书中学习到大型网站是如何做架构的，这个过程会遇到什么问题。当看完这 2 本书后，我总结出两个大问题：</p><p>　　1. 网站技术架构为什么会演进？换个说法就是为什么网站会变大？</p><p>　　2. 演进的过程会遇到什么问题？或者说为了演进，会遇到什么问题？</p><p>　　网站技术架构为什么会演进</p><p>　　我个人总结出来我们的技术架构演进的两种驱动力，驱动着我们为什么演进网站的技术架构：</p><p>　　1. 内在驱动力：我们期望把当前的业务做得更好，开发更多新业务</p><p>　　2. 外在驱动力：用户量的上升、用户种类的多样化</p><p>　　这两种驱动力不是独立的，更多时候是并行的。我想淘宝就是两种驱动力并行驱动的结果。</p><p>　　演进的原因很简单。但是在什么时机我们就应该演进网站的技术架构了，以及如何演进？面对这些问题，说实话，我没有任何经验，再说现实中每家企业当时都面临的问题都不一样，所以，我很难从经验中总结出什么是演进的时机。</p><p>　　但是我可以从另一个角度切入这个问题：研究网站内外结构，找到这些结构可能出现的问题点，知道或者预见到问题点了，你当然就知道应该怎么演进了。类似于你了解了 PC 机的结构，你也就知道什么时候要加内存了，什么时候要加硬盘了。</p><p>　　那么我们先看看网站的外部结构：</p><p><img src="https://img-blog.csdnimg.cn/20191223233115180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　外部结构中，我们可以看由以下几个部分构成：</p><p>　　U：代表用户群。当用户群变了，我们的网站如何演进？用户群的分析，我目前能知道的维度有：数量，种类，地理位置（区域）。</p><p>　　N：代表网络环境。网络环境在每个地区都不同。你可以想像我们为什么需要 CDN。当我们期望每个区域的用户都能得到好的体验，我们的网站如何演进？</p><p>　　S：代表安全。就是我们要安全到什么程度？这与网站当前所处阶段及你网站的性质有关。</p><p>　　C：代表我们的网站。属于内部结构</p><p>　　网站的内部结构：</p><p><img src="https://img-blog.csdnimg.cn/20191223233126266.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　内部结构的组成：</p><p>　　A：应用服务。</p><p>　　D：数据服务</p><p>　　总结下来就是我们在考虑网站是否应该演进了或者如何演进时，这些组成部分为我们提供了考虑问题的基准。</p><p>　　那么我们为什么不一开始就把网站设计成“大型”的。李智慧在后记里写到：“不要企图去设计一个大型网站”，“原因是互联网发展运行有其自己的规律，短暂的互联网历史已经一再证明这种企图行不通”。还说了：“大型网站不是设计出来的，而是逐步演化出来的”。对于最后这句话，我需要提醒下：“不是设计出来的”并不代表“随意设计”。</p><p>　　对于“大型网站的设计”，我个人的看法是现在我们的有“云”了，计算是可以买的，只要我们的设计能适应“云”，我是不是就可以一开始就设计大型网站了？</p><p>　　演进的过程会遇到什么问题</p><p>　　- 最初</p><p>　　从一个小网站说起。一台服务器也就足够了。</p><p><img src="https://img-blog.csdnimg.cn/20191223233143429.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　- 数据服务与应用服务分离</p><p>　　越来越多的用户代表着越来越多的数据，一台服务器已经满足不了。我们将数据服务和应用服务分离，给应用服务器配置更好的 CPU，内存。而给数据服务器配置更好更大的硬盘。</p><p><img src="https://img-blog.csdnimg.cn/2019122323315249.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　- 使用缓存</p><p>　　因为 80% 的业务访问都集中在 20% 的数据上，如果我们能将这部分数据缓存下来，性能一下子就上来了。而缓存又分为两种：本地缓存和远程分布式缓存。具体使用哪种？还是两种都用，我目前不知道。</p><p><img src="https://img-blog.csdnimg.cn/20191223233331869.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　这里有一个问题，书没有提到：应该缓存哪些数据？应该有一些原则的吧。</p><p>　　- 使用服务器集群</p><p>　　当这台服务器的处理能力达到上限时，它就会成为瓶颈。虽然你是可以通过购买更强大的硬件，但总会有上限。这时，我们就需要服务器的集群。这时，就必须加个新东西：负载均衡调度服务器。</p><p><img src="https://img-blog.csdnimg.cn/20191223233342938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">　　但是，使用服务器集群时，需要考虑一个问题：Session 的管理问题。Session 的管理有以下几种方式：</p><p>　　Session Sticky：打个比方就是如果我们每次吃饭都要保证我们用的是自己的碗筷，而只要我们在一家饭店里存着我们的碗筷，只要我们每次去这家饭店吃饭就好了。</p><p><img src="https://img-blog.csdnimg.cn/20191223233649852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　这种方式的问题：</p><p>　　1. 一台服务器重启，上面的 session 都没了</p><p>　　2. 负载均衡器成了有状态的机器，要实现容灾会有麻烦</p><p>　　Session 复制：就像我们在所有的饭店里都存一份自己的碗筷。不适合做大规模集群，适合机器不多的情况<br><img src="https://img-blog.csdnimg.cn/20191223233702523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　这种方案的问题：</p><p>　　1. 应用服务器间带宽问题</p><p>　　2. 大量用户在线时，占用内存过多</p><p>　　基于 Cookie：类似于每次吃饭都把自己的碗筷带上</p><p><img src="https://img-blog.csdnimg.cn/20191223233713556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　这种方案的问题：</p><p>　　1. Cookie 的长度限制</p><p>　　2. 安全性</p><p>　　3. 数据中心外部带宽的消耗</p><p>　　4. 性能影响，服务器处理每次的请求的内容又多了</p><p>　　Session 服务器：同样可以是集群的。这种方式适用于 session 数量及 web 服务器数量大的情况</p><p><img src="https://img-blog.csdnimg.cn/20191223233721691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　这种方案需要考虑的是：</p><p>　　1. 保证 session 服务器的可用性</p><p>　　2. 我们在写应用时需要做调整，我目前不知道应用服务器能否将这部分逻辑透明化</p><p>　　- 数据库读写分离</p><p>　　数据库的一部分读（未缓存、缓存过期）及所有的写操作都还需要经过数据库。当用户量达到一定量，数据库将会成为瓶颈。这边我们使用数据库提供的热备功能，将所有的读操作引入 slave 服务器。注意：读写分离解决的是读压力大的问题。<br><img src="https://img-blog.csdnimg.cn/20191223233735211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　因为数据库的读写分离了，所以，我们的应用程序也得做相应的变化。我们实现一个数据访问模块使上层写代码的人不知道读写分离的存在。这里，我很想知道如果我使用 ORM 模型时，如何实现读写的分离？</p><p>　　数据库读写分离会遇到如下问题：</p><p>数据复制问题： 考虑时延、数据库的支持、复制条件支持。不要忘了，分机房后，这个更是问题。<br>应用对于数据源的路由问题<br>　　- 使用反向代理和 CDN 加速网站响应</p><p>　　使用 CDN 可以很好的解决不同的地区的访问速度问题，反向代理则在服务器机房中缓存用户资源：</p><p><img src="https://img-blog.csdnimg.cn/20191223233747708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　- 使用分布式文件系统</p><p><img src="https://img-blog.csdnimg.cn/20191223233755114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　- 数据库专库专用：数据垂直拆分。</p><p>　　这样可以解决部分数据写的问题</p><p><img src="https://img-blog.csdnimg.cn/20191223233928202.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　垂直拆分数据库时，会遇到的问题：</p><p>跨业务的事务<br>应用的配置项多了<br>　　关于事务的问题，有两种办法：</p><p>使用分布式事务<br>去掉事务或不追求强事务<br>　　- 某个业务的数据表的数据量或者更新量达到了单个数据库的瓶颈：数据水平拆分</p><p>　　将同一个表的数据拆分到两个数据库中</p><p><img src="https://img-blog.csdnimg.cn/20191223233937572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　数据水平拆分会遇到的问题：</p><p>SQL 的路由问题，需要知道某个 User 在哪个数据库上。<br>主键的策略会有不同。<br>查询时的性能问题，如分页问题</p><p>使用搜索引擎：解决数据查询问题<br>部分场景可使用 NoSQL 提高性能<br>开发数据统一访问模块：解决上层应用开发的数据源问题<br><img src="https://img-blog.csdnimg.cn/20191223233948981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>　　- 业务拆分及应用拆分</p><p>　　网站的业务日益复杂，建立一个独立的大型应用来完成这所有的业务变得不实际。从管理角度来，也不方便管理。然而，业务的拆分很难找到一种通用的模式，这是一个企业管理问题和技术问题的混合问题。同时和每个企业的具体情况有关。</p><p>　　但是从这两本书来看，最终架构都走向服务化，也就是 SOA。而如何实现 SOA，是另一个很大的话题，不是本篇文章的范畴。</p><p>　　我从程立 08 年的演讲中截个图来说明 SOA 后的架构大概是怎样的：</p><p><img src="https://img-blog.csdnimg.cn/20191223233958822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　　- 非功能性问题</p><p>　　   – 安全性问题、监控问题</p><p>　　– 发布问题：新的架构意味着新的发布方式</p><p>　　– 分机房</p><p>　– 这两本书都没有说分机房的问题。我没有经验，可是也可以猜到如果要分机房了，所有上面的问题都可能要重新考虑。</p><p>　　– 组织架构的变化 </p><p>　　我们的技术架构的变化，势必会引起我们的组织架构的变化，反之亦然。</p><p>　　这部分看似不应该由我们来管，但是，我觉得，我们技术人员也要参与一部分的组织架构的设计。举个例子，组织架构的设计会涉及绩效，而绩效有时很像一个国家的法律。如果一个国家的法律不健全，会发生什么？你懂的。</p><p>　　同时，我们还必须考虑人员对新架构的学习成本。</p><p>　　这部分我目前在看相关的书籍，还没有一个系统的认识。</p><p>　　总结：</p><p>　　- 关于演进的顺序</p><p>　　在现实中，技术架构的演进不一定就是按文章从头到尾这样列下来的，所以，要视具体情况来下决定。</p><p>　　- 关于传统演进与现代有“云”环境下的演进</p><p>　　很可惜，只有李智慧谈到云，而且只点了一下——“现在越来越多人的网站从建立之初就是搭建在大型网站提供的云计算服务基础之上，所需的一切资源：计算、存储、网络都可以按需购买线性伸缩，不需要自己一点一点地拼凑各种资源，综合使用各种技术方案逐步去完善自己的网站架构”。</p><p>　　因为我用“云”的时间也不长，还不能总结出有云架构与传统的无云架构在演进的时候有什么不同。</p><p>　　说回传统的架构演进，我自己总结和思考的结果是：</p><p>　　在对网站进行架构调整时，可以从两大的维度考虑：数据服务和应用服务。而这个调整的过程中，需要分清当前哪个点是瓶颈，需要知道哪个点优化的优先级最高。同时，最重要的一点：我们虽然作为技术人员，也应该去学习业务知识，这样我们在考虑问题时分清哪些是业务问题，哪些是技术问题，分清后才能对症下药。你要知道有些问题用技术手段并不比用业务手段更有效。12306 的分时卖票就是一个典型例子。</p><p>来源： <a href="http://blog.csdn.net/he90227/article/details/50800546" target="_blank" rel="noopener">http://blog.csdn.net/he90227/article/details/50800546</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel-admin 安装</title>
      <link href="/2019/09/29/laravel/laravel-admin-set/"/>
      <url>/2019/09/29/laravel/laravel-admin-set/</url>
      
        <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>很多开发过程中，框架各种各样，主流的框架比如laravel。目前有需求搭建一个后台管理系统这样方便操作管理资料，借此展开简述一下</p><h3 id="安装环境：Ubuntu16-04"><a href="#安装环境：Ubuntu16-04" class="headerlink" title="安装环境：Ubuntu16.04"></a>安装环境：Ubuntu16.04</h3><p>一：前提 </p><p>php环境 php&gt;7.1</p><p>composer</p><p>nodejs</p><p>二: 安装laravel</p><p>composer create-project –prefer-dist laravel/laravel cms</p><p>三：安装laravel admin</p><p>doc地址：<a href="http://laravel-admin.org/docs/#/zh/installation" target="_blank" rel="noopener">http://laravel-admin.org/docs/#/zh/installation</a></p><p>首先确保安装好了laravel，并且数据库连接设置正确。<br>composer require encore/laravel-admin “1.5.*”<br>然后运行下面的命令来发布资源：</p><p>php artisan vendor:publish –provider=”Encore\Admin\AdminServiceProvider”<br>在该命令会生成配置文件config/admin.php，可以在里面修改安装的地址、数据库连接、以及表名，建议都是用默认配置不修改。</p><p>然后运行下面的命令完成安装：</p><p>php artisan admin:install</p><p>在运行install时，可能会报mysql1071错误，mysql支持数据库表单一键值的最大长度不能超过767字节，超出这个长度即报错</p><p>解决： 找到app/Provides/AppServiceProvides.php</p><p>引入命名： </p><p>use Illuminate\Support\Facades\Schema;<br>限制长度</p><p>public function boot()<br>{<br>    //<br>    Schema::defaultStringLength(191);<br>}<br>到此，laravel admin 安装完毕</p><p>进入后台： 侧边栏有index和admin选项，里面包括管理员管理（Users）、权限管理（Roles、Perimession）、后台菜单管理（Menu）、操作日志（Operation Log）</p><p>在首页是由用到的一下插件和环境信息</p><p>四： 开始搭建后台</p><p>1： 首先按照laravel config，这是没个后台都需要用到的网站配置管理，我们可以使用laravel admin为我们提供的现成的</p><p><a href="http://laravel-admin.org/docs/#/zh/extension-config" target="_blank" rel="noopener">http://laravel-admin.org/docs/#/zh/extension-config</a></p><p><a href="http://laravel-admin.org/docs/#/zh/extension-config" target="_blank" rel="noopener">http://laravel-admin.org/docs/#/zh/extension-config</a></p><p>php artisan migrate</p><p>同样在app/Providers/AppServiceProvider.php的boot中添加Config::load()</p><p>public function boot()<br>    {<br>        //<br>        Schema::defaultStringLength(191);<br>        Config::load();<br>    }<br>最后运行命令导入菜单和权限（也可以手动添加）<br>php artisan admin:import config</p><p>这样一个网站配置管理就搞定了</p><p>2： 帮助工具</p><p>laravel admin 提供了脚手架，可以帮助我们快速搭建后台</p><p><a href="http://laravel-admin.org/docs/#/zh/extension-helpers" target="_blank" rel="noopener">http://laravel-admin.org/docs/#/zh/extension-helpers</a></p><p>composer require laravel-admin-ext/helpers</p><p>php artisan admin:import helpers<br>注意：Ubuntu16.04  数据库配置192.168.10.10</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>文档：<br><a href="https://laravel-admin.org/docs/zh/" target="_blank" rel="noopener">https://laravel-admin.org/docs/zh/</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 怎么通过自带终端连接linux服务器</title>
      <link href="/2019/09/17/Mac/linux/"/>
      <url>/2019/09/17/Mac/linux/</url>
      
        <content type="html"><![CDATA[<p>简单来说，就两步骤</p><p>· 打开Mac终端，切换到root权限下</p><pre><code>切换root权限： sudo -i </code></pre><p>·通过ssh命令连接linux服务器</p><pre><code>ssh root@127.0.0.1root是账户名，@后面的是连接的ip地址</code></pre><p>然后根据提示输入密码即可成功</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac 下host操作管理</title>
      <link href="/2019/09/10/Mac/host/"/>
      <url>/2019/09/10/Mac/host/</url>
      
        <content type="html"><![CDATA[<p>前言：很多开发者使用Mac比较多，开发过程中本地就需要配置项目的域名执行，大概两种操作，这里主要阐述工具管理使用。<br><strong>一、直接自带操作管理</strong></p><ol><li>打开控制命令管理工具</li><li><code>vim /etc/hosts</code></li><li>修改</li><li><code>wq</code> 保存推出即可</li></ol><p><strong>二、工具管理01：Gas Mask</strong></p><p><img src="https://img-blog.csdnimg.cn/20191222135505379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191222135645397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载地址：<a href="https://www.macupdate.com/app/mac/29949/gas-mask/download" target="_blank" rel="noopener">https://www.macupdate.com/app/mac/29949/gas-mask/download</a><br><strong>二、工具管理02：SwitchHosts</strong><br><img src="https://img-blog.csdnimg.cn/20191222134525589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191222135558735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载地址：<a href="https://oldj.github.io/SwitchHosts/" target="_blank" rel="noopener">https://oldj.github.io/SwitchHosts/</a></p><p> <em>备注：可以关注博客持续更新其他新技术：<a href="https://chaofavip.github.io">hechaofa</a></em></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> host </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度网盘（破解svip）下载Mac</title>
      <link href="/2019/07/20/tool/baidu/"/>
      <url>/2019/07/20/tool/baidu/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/CodeTips/BaiduNetdiskPlugin-macOS" target="_blank" rel="noopener">https://github.com/CodeTips/BaiduNetdiskPlugin-macOS</a></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度网盘（破解svip）下载Mac</title>
      <link href="/2019/07/20/tool/zipkin/"/>
      <url>/2019/07/20/tool/zipkin/</url>
      
        <content type="html"><![CDATA[<p>安装zipkin</p><p>cd /usr/local/src/ wget -O zipkin.jar ‘<a href="https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec&#39;" target="_blank" rel="noopener">https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec&#39;</a> </p><p>启动<br>java -jar zipkin.jar</p><p><a href="http://tracing-analysis-dc-hz.aliyuncs.com/adapt_fzi0qteick@05697a22301281e_fzi0qteick@53df7ad2afe8301/api/v2/spans" target="_blank" rel="noopener">http://tracing-analysis-dc-hz.aliyuncs.com/adapt_fzi0qteick@05697a22301281e_fzi0qteick@53df7ad2afe8301/api/v2/spans</a></p><p>ZipKin的原理的介绍</p><p>　　结构概述      </p><p>　　跟踪器（Tracers）存在在你的应用程序中生存，记录时间和关于操作的元数据。他们经常使用库，因此他们的使用对用户是透明的。例如，当它收到一个请求并发送一个响应时，一个感应器（instrumented ）的web服务器记录。所收集的跟踪数据称为Span。</p><p>　　在生产过程中，instrumention是安全的，并且没有太多的开销。由于这个原因，他们只在带内（in-band）传播id，告诉接收方有一个正在进行中的跟踪。完成的跨度被报告给Zipkin的“外带（out-of-band）”，类似于应用程序如何异步地报告指标。</p><p>　　例如，当一个操作被跟踪，它需要发出一个传出的http请求时，会添加几个头来传播IDs。header不用于发送诸如操作名称之类的细节。</p><p>　　将数据发送给Zipkin的应用程序的一种组件被称为Reporter。记者(Reporters)通过几个传输器(transports )中的一个传输跟踪数据到Zipkin收集器(collectors)，这些收集器将跟踪数据保存到存储（storage）中。稍后，通过API查询存储，以向UI提供数据。   </p><p>　　下面是一个描述这个流程的图表:</p><p>　　Zipkin architecture</p><p>本地启动<br>去到安装目录<br>执行下面命令，看到后面那个图就说明启动成功</p><p>本地访问<br><a href="http://192.168.10.10:9411/zipkin/" target="_blank" rel="noopener">http://192.168.10.10:9411/zipkin/</a></p><p>效果：</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令速查表</title>
      <link href="/2019/05/20/linux/git/"/>
      <url>/2019/05/20/linux/git/</url>
      
        <content type="html"><![CDATA[<p>用户信息配置</p><h2 id="全局配置用户名字和邮箱"><a href="#全局配置用户名字和邮箱" class="headerlink" title="全局配置用户名字和邮箱"></a>全局配置用户名字和邮箱</h2><p>git congfig user.name “xxxx” –global<br>git config user.email “<a href="mailto:xxx@xx.com">xxx@xx.com</a>“ -global</p><h2 id="查看不同作用域的配置信息"><a href="#查看不同作用域的配置信息" class="headerlink" title="查看不同作用域的配置信息"></a>查看不同作用域的配置信息</h2><p>git config –list –local<br>git config –list –global<br>git config –list –system<br>复制代码<br>初始化仓库</p><h2 id="在已存在的项目初始化仓库"><a href="#在已存在的项目初始化仓库" class="headerlink" title="在已存在的项目初始化仓库"></a>在已存在的项目初始化仓库</h2><p>cd <project-path><br>git init</p><h2 id="新建项目并初始化仓库"><a href="#新建项目并初始化仓库" class="headerlink" title="新建项目并初始化仓库"></a>新建项目并初始化仓库</h2><p>git init <project-path><br>复制代码<br>提交修改</p><h2 id="查看git状态"><a href="#查看git状态" class="headerlink" title="查看git状态"></a>查看git状态</h2><p>git status</p><h2 id="提交某个文件的修改"><a href="#提交某个文件的修改" class="headerlink" title="提交某个文件的修改"></a>提交某个文件的修改</h2><p>git add <file-name></p><h2 id="提交已经跟踪的所有修改"><a href="#提交已经跟踪的所有修改" class="headerlink" title="提交已经跟踪的所有修改"></a>提交已经跟踪的所有修改</h2><p>git add -u</p><h2 id="提交所有修改"><a href="#提交所有修改" class="headerlink" title="提交所有修改"></a>提交所有修改</h2><p>git add –all<br>git add .</p><h2 id="颗粒化提交修改"><a href="#颗粒化提交修改" class="headerlink" title="颗粒化提交修改"></a>颗粒化提交修改</h2><p>git add -p</p><h2 id="提交修改到仓库"><a href="#提交修改到仓库" class="headerlink" title="提交修改到仓库"></a>提交修改到仓库</h2><p>git commit -m “<message>“</p><h2 id="直接提交所有的已跟踪的修改到仓库"><a href="#直接提交所有的已跟踪的修改到仓库" class="headerlink" title="直接提交所有的已跟踪的修改到仓库"></a>直接提交所有的已跟踪的修改到仓库</h2><p>git commit -a -m “<message>“<br>git commit -am “<message>“</p><h2 id="修改上一次提交"><a href="#修改上一次提交" class="headerlink" title="修改上一次提交"></a>修改上一次提交</h2><p>git commit –amend<br>git commit –amend –no-edit<br>复制代码<br>查看提交历史</p><h2 id="查看工作区和暂存区之间的区别"><a href="#查看工作区和暂存区之间的区别" class="headerlink" title="查看工作区和暂存区之间的区别"></a>查看工作区和暂存区之间的区别</h2><p>git diff</p><h2 id="查看某个文件工作区和暂存区之间的区别"><a href="#查看某个文件工作区和暂存区之间的区别" class="headerlink" title="查看某个文件工作区和暂存区之间的区别"></a>查看某个文件工作区和暂存区之间的区别</h2><p>git diff – <file-name></p><h2 id="用于查看暂存区和上一个提交之间的区别"><a href="#用于查看暂存区和上一个提交之间的区别" class="headerlink" title="用于查看暂存区和上一个提交之间的区别"></a>用于查看暂存区和上一个提交之间的区别</h2><p>git diff –cached</p><h2 id="用于展示工作区和上一次提交之间的区别"><a href="#用于展示工作区和上一次提交之间的区别" class="headerlink" title="用于展示工作区和上一次提交之间的区别"></a>用于展示工作区和上一次提交之间的区别</h2><p>git diff HEAD</p><h2 id="用于展示两个提交之间的区别"><a href="#用于展示两个提交之间的区别" class="headerlink" title="用于展示两个提交之间的区别"></a>用于展示两个提交之间的区别</h2><p>git diff <commit-id> <commit-id></p><h2 id="用于查看所有的提交"><a href="#用于查看所有的提交" class="headerlink" title="用于查看所有的提交"></a>用于查看所有的提交</h2><p>git log</p><h2 id="用于查看最近n次提交"><a href="#用于查看最近n次提交" class="headerlink" title="用于查看最近n次提交"></a>用于查看最近n次提交</h2><p>git log -<number></p><h2 id="用于展示每次提交log以及每次的改动"><a href="#用于展示每次提交log以及每次的改动" class="headerlink" title="用于展示每次提交log以及每次的改动"></a>用于展示每次提交log以及每次的改动</h2><p>git log -p</p><h2 id="用于展示每次提交log以及每次的改动的简要统计"><a href="#用于展示每次提交log以及每次的改动的简要统计" class="headerlink" title="用于展示每次提交log以及每次的改动的简要统计"></a>用于展示每次提交log以及每次的改动的简要统计</h2><p>git log –stat</p><h2 id="用于展示一行简略信息"><a href="#用于展示一行简略信息" class="headerlink" title="用于展示一行简略信息"></a>用于展示一行简略信息</h2><p>git log –oneline</p><h2 id="用简单图形展示"><a href="#用简单图形展示" class="headerlink" title="用简单图形展示"></a>用简单图形展示</h2><p>git log –graph</p><h2 id="用于展示上一个提交的修改"><a href="#用于展示上一个提交的修改" class="headerlink" title="用于展示上一个提交的修改"></a>用于展示上一个提交的修改</h2><p>git show</p><h2 id="用于展示特定提交的修改"><a href="#用于展示特定提交的修改" class="headerlink" title="用于展示特定提交的修改"></a>用于展示特定提交的修改</h2><p>git show <commit-id></p><h2 id="用于展示特定提交的修改的文件名"><a href="#用于展示特定提交的修改的文件名" class="headerlink" title="用于展示特定提交的修改的文件名"></a>用于展示特定提交的修改的文件名</h2><p>git show –name-only <commit-id></p><h2 id="打印最近操作所对应的commit-id"><a href="#打印最近操作所对应的commit-id" class="headerlink" title="打印最近操作所对应的commit id"></a>打印最近操作所对应的commit id</h2><p>git reflog<br>复制代码<br>文件删除&amp;安全重命名&amp;忽略</p><h2 id="从工作区删除文件，并且从仓库中移除对某个文件的跟踪"><a href="#从工作区删除文件，并且从仓库中移除对某个文件的跟踪" class="headerlink" title="从工作区删除文件，并且从仓库中移除对某个文件的跟踪"></a>从工作区删除文件，并且从仓库中移除对某个文件的跟踪</h2><p>git rm <file-name></p><h2 id="只移除对该文件的跟踪，但是依旧在工作区保留文件"><a href="#只移除对该文件的跟踪，但是依旧在工作区保留文件" class="headerlink" title="只移除对该文件的跟踪，但是依旧在工作区保留文件"></a>只移除对该文件的跟踪，但是依旧在工作区保留文件</h2><p>git rm –cached <file-name></p><h2 id="安全重命名"><a href="#安全重命名" class="headerlink" title="安全重命名"></a>安全重命名</h2><p>git mv <old-name> <new-name></p><h2 id="删除未跟踪并且未被-gitignore忽略的文件"><a href="#删除未跟踪并且未被-gitignore忽略的文件" class="headerlink" title="删除未跟踪并且未被.gitignore忽略的文件"></a>删除未跟踪并且未被.gitignore忽略的文件</h2><p>git clean</p><h2 id="查看哪些文件将会被删除，但是不会真正删除"><a href="#查看哪些文件将会被删除，但是不会真正删除" class="headerlink" title="查看哪些文件将会被删除，但是不会真正删除"></a>查看哪些文件将会被删除，但是不会真正删除</h2><p>git clean -n<br>复制代码<br>撤销修改，代码回滚</p><h2 id="撤销工作区某个文件修改"><a href="#撤销工作区某个文件修改" class="headerlink" title="撤销工作区某个文件修改"></a>撤销工作区某个文件修改</h2><p>git checkout <file-name></p><h2 id="撤销所有文件"><a href="#撤销所有文件" class="headerlink" title="撤销所有文件"></a>撤销所有文件</h2><p>git checkout .</p><h2 id="恢复某个commit的指定文件到暂存区和工作区"><a href="#恢复某个commit的指定文件到暂存区和工作区" class="headerlink" title="恢复某个commit的指定文件到暂存区和工作区"></a>恢复某个commit的指定文件到暂存区和工作区</h2><p>git checkout <commit-id> <file-name></p><h2 id="撤销当前暂存区的修改"><a href="#撤销当前暂存区的修改" class="headerlink" title="撤销当前暂存区的修改"></a>撤销当前暂存区的修改</h2><p>git reset <file-name></p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><h2 id="只移动仓库中HEAD指针的位置，工作区和暂存区的修改都不变"><a href="#只移动仓库中HEAD指针的位置，工作区和暂存区的修改都不变" class="headerlink" title="只移动仓库中HEAD指针的位置，工作区和暂存区的修改都不变"></a>只移动仓库中<code>HEAD</code>指针的位置，工作区和暂存区的修改都不变</h2><p>git reset –soft <commit-id></p><h2 id="移动HEAD指针的位置，并使用回退的到版本重置暂存区，工作区的修改保持不变"><a href="#移动HEAD指针的位置，并使用回退的到版本重置暂存区，工作区的修改保持不变" class="headerlink" title="移动HEAD指针的位置，并使用回退的到版本重置暂存区，工作区的修改保持不变"></a>移动<code>HEAD</code>指针的位置，并使用回退的到版本重置暂存区，工作区的修改保持不变</h2><p>git reset –mixed <commit-id></p><h2 id="移动HEAD指针位置，并使用回退的到版本重置工作区和暂存区，保持与指定的提交一致"><a href="#移动HEAD指针位置，并使用回退的到版本重置工作区和暂存区，保持与指定的提交一致" class="headerlink" title="移动HEAD指针位置，并使用回退的到版本重置工作区和暂存区，保持与指定的提交一致"></a>移动<code>HEAD</code>指针位置，并使用回退的到版本重置工作区和暂存区，保持与指定的提交一致</h2><p>git reset –hard <commit-id></p><h2 id="重置修改"><a href="#重置修改" class="headerlink" title="重置修改"></a>重置修改</h2><h2 id="新建一个提交重置目标提交"><a href="#新建一个提交重置目标提交" class="headerlink" title="新建一个提交重置目标提交"></a>新建一个提交重置目标提交</h2><p>git revert <commit-id></p><h2 id="重置目标提交，但是不会新建提交，而是修改工作区和暂存区"><a href="#重置目标提交，但是不会新建提交，而是修改工作区和暂存区" class="headerlink" title="重置目标提交，但是不会新建提交，而是修改工作区和暂存区"></a>重置目标提交，但是不会新建提交，而是修改工作区和暂存区</h2><p>git revert -n <commit-id></p><h2 id="重置多个提交（不包括start-id，但是包括end-id）"><a href="#重置多个提交（不包括start-id，但是包括end-id）" class="headerlink" title="重置多个提交（不包括start-id，但是包括end-id）"></a>重置多个提交（不包括start-id，但是包括end-id）</h2><p>git revet <start-id>…<end-id></p><h2 id="在revert遇到冲突并解决冲突后，继续执行撤销操作"><a href="#在revert遇到冲突并解决冲突后，继续执行撤销操作" class="headerlink" title="在revert遇到冲突并解决冲突后，继续执行撤销操作"></a>在revert遇到冲突并解决冲突后，继续执行撤销操作</h2><p>git revert –continue</p><h2 id="终止revert，但保留当前的结果"><a href="#终止revert，但保留当前的结果" class="headerlink" title="终止revert，但保留当前的结果"></a>终止revert，但保留当前的结果</h2><p>git revert –quit</p><h2 id="撤销revert"><a href="#撤销revert" class="headerlink" title="撤销revert"></a>撤销revert</h2><p>git revert –abort<br>复制代码<br>分支</p><h2 id="列出本地所有分支"><a href="#列出本地所有分支" class="headerlink" title="列出本地所有分支"></a>列出本地所有分支</h2><p>git branch</p><h2 id="列出所有远程分支（后文会讲解什么是远程分支）"><a href="#列出所有远程分支（后文会讲解什么是远程分支）" class="headerlink" title="列出所有远程分支（后文会讲解什么是远程分支）"></a>列出所有远程分支（后文会讲解什么是远程分支）</h2><p>git branch -r</p><h2 id="列出所有本地和远程分支"><a href="#列出所有本地和远程分支" class="headerlink" title="列出所有本地和远程分支"></a>列出所有本地和远程分支</h2><p>git branch -a</p><h2 id="查看分支的详细信息"><a href="#查看分支的详细信息" class="headerlink" title="查看分支的详细信息"></a>查看分支的详细信息</h2><p>git branch -v</p><h2 id="新建分支"><a href="#新建分支" class="headerlink" title="新建分支"></a>新建分支</h2><p>git branch <branch-name></p><h2 id="新建分支并切换分支"><a href="#新建分支并切换分支" class="headerlink" title="新建分支并切换分支"></a>新建分支并切换分支</h2><p>git checkout -b <branch-name></p><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>git checkout <branch-name></p><h2 id="切换到上一个分支"><a href="#切换到上一个分支" class="headerlink" title="切换到上一个分支"></a>切换到上一个分支</h2><p>git checkout -</p><h2 id="删除分支-针对已经合并过的分支"><a href="#删除分支-针对已经合并过的分支" class="headerlink" title="删除分支(针对已经合并过的分支)"></a>删除分支(针对已经合并过的分支)</h2><p>git branch -d <branch-name></p><h2 id="删除分支-不管是否合并"><a href="#删除分支-不管是否合并" class="headerlink" title="删除分支(不管是否合并)"></a>删除分支(不管是否合并)</h2><p>git branch -D <branch-name></p><h2 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h2><p>git merge <branch-name></p><h2 id="不使用fast-forward模式合并"><a href="#不使用fast-forward模式合并" class="headerlink" title="不使用fast-forward模式合并"></a>不使用fast-forward模式合并</h2><p>git merge –no-ff <branch-name></p><h2 id="挑选一个commit合并到当前分支"><a href="#挑选一个commit合并到当前分支" class="headerlink" title="挑选一个commit合并到当前分支"></a>挑选一个commit合并到当前分支</h2><p>git cherry-pick <commit-id></p><h2 id="挑选指定分支的最新提交"><a href="#挑选指定分支的最新提交" class="headerlink" title="挑选指定分支的最新提交"></a>挑选指定分支的最新提交</h2><p>git cherry-pick <branch-name></p><h2 id="挑选连续多个提交（左开右闭，不包括start-commit）"><a href="#挑选连续多个提交（左开右闭，不包括start-commit）" class="headerlink" title="挑选连续多个提交（左开右闭，不包括start-commit）"></a>挑选连续多个提交（左开右闭，不包括start-commit）</h2><p>git cherry-pick <start-comm-id>…<end-commit-id><br>挑选连续多个提交（左闭右闭，包括start-commit）<br>git cherry-pick <start-commid-id>^…<end-commit-id></p><h2 id="在解决冲突后，继续执行下一个cherry-pick"><a href="#在解决冲突后，继续执行下一个cherry-pick" class="headerlink" title="在解决冲突后，继续执行下一个cherry-pick"></a>在解决冲突后，继续执行下一个cherry-pick</h2><p>git cherry-pick –continue</p><h2 id="退出操作，保留当前进度"><a href="#退出操作，保留当前进度" class="headerlink" title="退出操作，保留当前进度"></a>退出操作，保留当前进度</h2><p>git cherry-pick –quit</p><h2 id="撤销本次操作"><a href="#撤销本次操作" class="headerlink" title="撤销本次操作"></a>撤销本次操作</h2><p>git cherry-pick –abort<br>复制代码<br>打上Tag</p><h2 id="查看所有tag"><a href="#查看所有tag" class="headerlink" title="查看所有tag"></a>查看所有tag</h2><p>git tag</p><h2 id="筛选相应的tag"><a href="#筛选相应的tag" class="headerlink" title="筛选相应的tag"></a>筛选相应的tag</h2><p>git tag -l <tag-name></p><h2 id="查看某个commit上所有的tag"><a href="#查看某个commit上所有的tag" class="headerlink" title="查看某个commit上所有的tag"></a>查看某个commit上所有的tag</h2><p>git tag –points-at <commit-id></p><h2 id="查看某一个tag"><a href="#查看某一个tag" class="headerlink" title="查看某一个tag"></a>查看某一个tag</h2><p>git show <tag-name></p><h2 id="查看所有tag以及它们分别对应的commit"><a href="#查看所有tag以及它们分别对应的commit" class="headerlink" title="查看所有tag以及它们分别对应的commit"></a>查看所有tag以及它们分别对应的commit</h2><p>git show-ref –tags</p><h2 id="新建tag"><a href="#新建tag" class="headerlink" title="新建tag"></a>新建tag</h2><p>git tag <tag-name></p><h2 id="在指定的提交新建tag"><a href="#在指定的提交新建tag" class="headerlink" title="在指定的提交新建tag"></a>在指定的提交新建tag</h2><p>git tag <tag-name> <commit-id></p><h2 id="添加一个tag和message"><a href="#添加一个tag和message" class="headerlink" title="添加一个tag和message"></a>添加一个tag和message</h2><p>git tag -a <tag-name> -m <message></p><h2 id="删除tag"><a href="#删除tag" class="headerlink" title="删除tag"></a>删除tag</h2><p>git tag -d <tag-name><br>复制代码<br>紧急加塞，使用stash</p><h2 id="新建stash"><a href="#新建stash" class="headerlink" title="新建stash"></a>新建stash</h2><p>git stash</p><h2 id="指定你想要的messge信息"><a href="#指定你想要的messge信息" class="headerlink" title="指定你想要的messge信息"></a>指定你想要的messge信息</h2><p>git stash save <message></p><h2 id="将未跟踪的文件也加入暂存"><a href="#将未跟踪的文件也加入暂存" class="headerlink" title="将未跟踪的文件也加入暂存"></a>将未跟踪的文件也加入暂存</h2><p>git stash -u</p><h2 id="将所有文件加入暂存（即使该文件被git忽略）"><a href="#将所有文件加入暂存（即使该文件被git忽略）" class="headerlink" title="将所有文件加入暂存（即使该文件被git忽略）"></a>将所有文件加入暂存（即使该文件被git忽略）</h2><p>git stash -a</p><h2 id="查看暂存的历史"><a href="#查看暂存的历史" class="headerlink" title="查看暂存的历史"></a>查看暂存的历史</h2><p>git stash list</p><h2 id="查看某一个次特定的暂存"><a href="#查看某一个次特定的暂存" class="headerlink" title="查看某一个次特定的暂存"></a>查看某一个次特定的暂存</h2><p>git show stash@{<number>}</p><h2 id="取出最近的暂存"><a href="#取出最近的暂存" class="headerlink" title="取出最近的暂存"></a>取出最近的暂存</h2><p>git stash apply</p><h2 id="取出目标暂存"><a href="#取出目标暂存" class="headerlink" title="取出目标暂存"></a>取出目标暂存</h2><p>git stash apply <number></p><h2 id="取出最近暂存，并删除该暂存的记录"><a href="#取出最近暂存，并删除该暂存的记录" class="headerlink" title="取出最近暂存，并删除该暂存的记录"></a>取出最近暂存，并删除该暂存的记录</h2><p>git stash pop</p><h2 id="删除最近暂存"><a href="#删除最近暂存" class="headerlink" title="删除最近暂存"></a>删除最近暂存</h2><p>git stash drop</p><h2 id="删除目标暂存"><a href="#删除目标暂存" class="headerlink" title="删除目标暂存"></a>删除目标暂存</h2><p>git stash drop <number></p><h2 id="清空历史"><a href="#清空历史" class="headerlink" title="清空历史"></a>清空历史</h2><p>git stash clear<br>复制代码<br>变基</p><h2 id="合并分支-1"><a href="#合并分支-1" class="headerlink" title="合并分支"></a>合并分支</h2><p>git rebase <branch-name></p><h2 id="可以交互式的操作到commi-id为止的提交（不包括commit-id所指向提交）的所有提交"><a href="#可以交互式的操作到commi-id为止的提交（不包括commit-id所指向提交）的所有提交" class="headerlink" title="可以交互式的操作到commi-id为止的提交（不包括commit-id所指向提交）的所有提交"></a>可以交互式的操作到commi-id为止的提交（不包括commit-id所指向提交）的所有提交</h2><p>git rebase -i &lt;commit-id<br>复制代码<br>远程仓库</p><h2 id="拉取代码，并使用默认的远端仓库的名字"><a href="#拉取代码，并使用默认的远端仓库的名字" class="headerlink" title="拉取代码，并使用默认的远端仓库的名字"></a>拉取代码，并使用默认的远端仓库的名字</h2><p>git clone <url></p><h2 id="拉取代码，自定义本地仓库名字"><a href="#拉取代码，自定义本地仓库名字" class="headerlink" title="拉取代码，自定义本地仓库名字"></a>拉取代码，自定义本地仓库名字</h2><p>git clone <url> <new-name></p><h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p>git remote add <remote-name> <remote-url></p><h2 id="查看远端仓库信息"><a href="#查看远端仓库信息" class="headerlink" title="查看远端仓库信息"></a>查看远端仓库信息</h2><p>git remote -v</p><h2 id="删除远程仓库"><a href="#删除远程仓库" class="headerlink" title="删除远程仓库"></a>删除远程仓库</h2><p>git remote remove <remote-name></p><h2 id="重命名远程操作名字"><a href="#重命名远程操作名字" class="headerlink" title="重命名远程操作名字"></a>重命名远程操作名字</h2><p>git remote rename <old-remote-name> <new-remote-name></p><h2 id="推送分支到特定的远程仓库，如果只有一个远程仓库可以省略，第一次推送需要加入-u参数"><a href="#推送分支到特定的远程仓库，如果只有一个远程仓库可以省略，第一次推送需要加入-u参数" class="headerlink" title="推送分支到特定的远程仓库，如果只有一个远程仓库可以省略，第一次推送需要加入-u参数"></a>推送分支到特定的远程仓库，如果只有一个远程仓库可以省略，第一次推送需要加入<code>-u</code>参数</h2><p>git push <remote-name> <branch-name></p><h2 id="推送指定tag到远端"><a href="#推送指定tag到远端" class="headerlink" title="推送指定tag到远端"></a>推送指定tag到远端</h2><p>git push <remote-name> <tag-name></p><h2 id="推送所有tag到远端"><a href="#推送所有tag到远端" class="headerlink" title="推送所有tag到远端"></a>推送所有tag到远端</h2><p>git push <remote-name> –tags</p><h2 id="拉取更新"><a href="#拉取更新" class="headerlink" title="拉取更新"></a>拉取更新</h2><p>git fetch</p><h2 id="获取远端仓库更新，并自动合并到本地分支（相当于git-fetch-amp-amp-git-merge）"><a href="#获取远端仓库更新，并自动合并到本地分支（相当于git-fetch-amp-amp-git-merge）" class="headerlink" title="获取远端仓库更新，并自动合并到本地分支（相当于git fetch &amp;&amp; git merge）"></a>获取远端仓库更新，并自动合并到本地分支（相当于<code>git fetch &amp;&amp; git merge</code>）</h2><p>git pull</p><h2 id="使用rebase方式拉取更新"><a href="#使用rebase方式拉取更新" class="headerlink" title="使用rebase方式拉取更新"></a>使用rebase方式拉取更新</h2><p>git pull –rebase<br>复制代码</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索网站</title>
      <link href="/2019/04/29/tool/find/"/>
      <url>/2019/04/29/tool/find/</url>
      
        <content type="html"><![CDATA[<p><strong>谷歌搜索引擎镜像网站</strong></p><p>1、<a href="https://start.lenovo.com/（" target="_blank" rel="noopener">https://start.lenovo.com/（</a> 非原版 ,谷歌加强驱动 )</p><p>2、<a href="https://g.91gg.xyz/（" target="_blank" rel="noopener">https://g.91gg.xyz/（</a> 原版 ,无广告 )</p><p>3、<a href="https://go.wonen.tech/" target="_blank" rel="noopener">https://go.wonen.tech/</a> （ 原版 ,无广告 )</p><p>4、<a href="http://so.baohua.me/" target="_blank" rel="noopener">http://so.baohua.me/</a> （ 原版 ,无广告 )</p><p>5、<a href="https://4.zhmj114.com/" target="_blank" rel="noopener">https://4.zhmj114.com/</a> （ 原版 ,无广告 )</p><p>6、<a href="https://g2.nuist.top/" target="_blank" rel="noopener">https://g2.nuist.top/</a> （ 原版 ,无无广告，访问需要验证 )</p><p>7、<a href="https://g.kuriko.moe/" target="_blank" rel="noopener">https://g.kuriko.moe/</a> （ 原版 ,无广告，把域名复制到浏览器打开 )</p><p>8、<a href="https://2.scmor.website/" target="_blank" rel="noopener">https://2.scmor.website/</a> （ 原版 ,有广告 )</p><p>9、<a href="https://yy1.ggss.site/（" target="_blank" rel="noopener">https://yy1.ggss.site/（</a> 原版 ,有广告 )</p><p>10、<a href="https://d2.aigg.men/（" target="_blank" rel="noopener">https://d2.aigg.men/（</a> 原版 ,有广告 )</p><p>11、<a href="http://search.mysearch.com/（" target="_blank" rel="noopener">http://search.mysearch.com/（</a> 非原版 ,谷歌加强驱动 )</p><p>12、<a href="http://www.ceek.jp（" target="_blank" rel="noopener">http://www.ceek.jp（</a> 非原版 ,可选择谷歌搜索 )</p><p>13、<a href="https://yy2.ggss.site/（原版" target="_blank" rel="noopener">https://yy2.ggss.site/（原版</a> ,有广告 )</p><p>14、<a href="http://starter..-1.elb.amazonaws.com/" target="_blank" rel="noopener">http://starter..-1.elb.amazonaws.com/</a> (非原版)</p><p>15、<a href="https://busca.uol.com.br" target="_blank" rel="noopener">https://busca.uol.com.br</a> (非原版，谷歌自定义搜索)</p><p>16、<a href="https://www.startpage.com/" target="_blank" rel="noopener">https://www.startpage.com/</a> (非原版，谷歌自定义搜索)</p><p>17、<a href="https://bird.so/" target="_blank" rel="noopener">https://bird.so/</a> （非原版）</p><p>18、<a href="https://fireball.com" target="_blank" rel="noopener">https://fireball.com</a> （非原版）</p><p>19、<a href="https://www.enow.com" target="_blank" rel="noopener">https://www.enow.com</a> （非原版）</p><p>20、<a href="https://www.aolsearch.com" target="_blank" rel="noopener">https://www.aolsearch.com</a> （非原版)</p><p>21、<a href="http://rryy.org/（无广告，搜索体验良好）" target="_blank" rel="noopener">http://rryy.org/（无广告，搜索体验良好）</a></p><p>22、<a href="http://search.mysearch.com/" target="_blank" rel="noopener">http://search.mysearch.com/</a> （无广告，搜索体验良好）</p><p>23、<a href="http://guge.suanfazu.com/" target="_blank" rel="noopener">http://guge.suanfazu.com/</a> （无广告，搜索体验良好）</p><p>24、<a href="http://www.looksmart.com" target="_blank" rel="noopener">http://www.looksmart.com</a> （无广告，搜索体验良好）</p><p>25、<a href="http://googlebridge.com/" target="_blank" rel="noopener">http://googlebridge.com/</a> （无广告，体验良好）</p><p>26、<a href="https://www.hotbot.com" target="_blank" rel="noopener">https://www.hotbot.com</a> （无广告，体验良好）</p><p>27、<a href="https://fireball.com" target="_blank" rel="noopener">https://fireball.com</a> （无广告，体验良好）</p><p>28、<a href="http://arianna.libero.it" target="_blank" rel="noopener">http://arianna.libero.it</a> （无广告，体验良好）</p><p>29、<a href="http://tinygoo.herokuapp.com" target="_blank" rel="noopener">http://tinygoo.herokuapp.com</a> （无广告，体验良好）</p><p>30、<a href="http://www.gycc.com/" target="_blank" rel="noopener">http://www.gycc.com/</a> （无广告，体验良好）</p><p>31、<a href="http://www.dogpile.com/" target="_blank" rel="noopener">http://www.dogpile.com/</a> （无广告，体验良好）</p><p>32、<a href="https://so.mezw.com/（无广告，体验良好）" target="_blank" rel="noopener">https://so.mezw.com/（无广告，体验良好）</a></p><p>33、<a href="https://pashanhu.space" target="_blank" rel="noopener">https://pashanhu.space</a> （无广告，体验良好）</p><p>34、<a href="http://www.gfsoso.me/" target="_blank" rel="noopener">http://www.gfsoso.me/</a> （有广告，体验一般）</p><p><strong>谷歌学术镜像网站</strong></p><p>1、<a href="https://xue.glgoo.net/" target="_blank" rel="noopener">https://xue.glgoo.net/</a></p><p>2、<a href="https://xues.glgoo.com/" target="_blank" rel="noopener">https://xues.glgoo.com/</a></p><p>3、<a href="http://so.hiqq.com.cn/" target="_blank" rel="noopener">http://so.hiqq.com.cn/</a></p><p>4、<a href="https://d2.aigg.men/extdomains/scholar.google.com/" target="_blank" rel="noopener">https://d2.aigg.men/extdomains/scholar.google.com/</a></p><p>5、<a href="https://xs.glgoo.top/scholar/" target="_blank" rel="noopener">https://xs.glgoo.top/scholar/</a></p><p><strong>其它替代品</strong></p><p>1、<a href="https://www.qwant.com" target="_blank" rel="noopener">https://www.qwant.com</a> （qwant搜索引擎，法国的一款搜索引擎）</p><p>2、<a href="https://nova.rambler.ru" target="_blank" rel="noopener">https://nova.rambler.ru</a> （俄罗斯的一款搜索引擎，由谷歌驱动）</p><p>3、<a href="https://sg.search.yahoo.com/" target="_blank" rel="noopener">https://sg.search.yahoo.com/</a> （雅虎）</p><p>4、<a href="https://search.avira.com/" target="_blank" rel="noopener">https://search.avira.com/</a> （德国的一款搜索引擎）</p><p>5、<a href="https://www.ecosia.org/" target="_blank" rel="noopener">https://www.ecosia.org/</a> （德国的一款搜索引擎，具有公益性）</p><p>6、<a href="https://suche.gmx.net" target="_blank" rel="noopener">https://suche.gmx.net</a> （德国的一款搜索引擎）</p><p>7、<a href="https://duckduckgo.com" target="_blank" rel="noopener">https://duckduckgo.com</a> （美国的一款搜索引擎）</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>压测认识</title>
      <link href="/2019/03/02/tool/yace/"/>
      <url>/2019/03/02/tool/yace/</url>
      
        <content type="html"><![CDATA[<h3 id="一、压测定义"><a href="#一、压测定义" class="headerlink" title="一、压测定义"></a>一、压测定义</h3><p>压测，即压力测试，是确立系统稳定性的一种测试方法，通常在系统正常运作范围之外进行，以考察其功能极限和隐患；同时也是一个试图确定应用在高于正常负载的情况下稳定性的过程。</p><h3 id="二、压测类型"><a href="#二、压测类型" class="headerlink" title="二、压测类型"></a>二、压测类型</h3><ul><li>功能压测</li><li>性能压测（目前）<h3 id="三、为啥需要压测"><a href="#三、为啥需要压测" class="headerlink" title="三、为啥需要压测"></a>三、为啥需要压测</h3>举例：从09年的淘宝双十一大促导致多家合作银行后台系统接连宕机，到春运期间12306购票难，再到之前聚美优品促销活动刚开始就遭秒杀。根据Amazon统计，每慢100毫秒，交易额下降1%。这些事件和统计数据为大家敲响了警钟，也客观说明了性能压测对于企业应用的重要性。</li></ul><p>从具体的作用上讲，性能压测可以用于新系统上线支持、技术升级验证、业务峰值稳定性保障、站点容量规划以及性能瓶颈探测。</p><ol><li><p>新系统上线支持<br>在新系统上线前，通过执行性能压测能够对系统的负载能力有较为清晰的认知，从而结合预估的潜在用户数量保障系统上线后的用户体验。</p></li><li><p>技术升级验证<br>在系统重构过程中，通过性能压测验证对比，可以有效验证新技术的高效性，指导系统重构。</p></li><li><p>业务峰值稳定性保障<br>在业务峰值到来前，通过充分的性能压测，确保大促活动等峰值业务稳定性，保障峰值业务不受损。</p></li><li><p>站点容量规划<br>通过性能压测实现对站点精细化的容量规划，指导分布式系统机器资源分配。</p></li><li><p>性能瓶颈探测<br>通过性能压测探测系统中的性能瓶颈点，进行针对性优化，从而提升系统性能。</p></li></ol><p>综上所述，性能压测伴随着系统开发、重构、上线到优化的生命周期，因此有效的性能压测对系统的稳定性具有重要的指导意义，是系统生命周期中不可或缺的一部分。</p><h3 id="四、性能压测概念"><a href="#四、性能压测概念" class="headerlink" title="四、性能压测概念"></a>四、性能压测概念</h3><ul><li>性能压测是通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。</li></ul><ul><li><p>从测试目的上性能压测又可以划分为负载测试、压力测试、并发测试、配置测试以及可靠性测试。</p></li><li><p>负载测试是测试当负载逐渐增加时，系统各项性能指标的变化情况。</p></li><li><p>压力测试是通过确定一个系统的瓶颈或者不能接受的性能点，来获得系统能提供的最大服务级别的测试。</p></li><li><p>并发测试通过模拟用户并发访问，测试多用户并发访问同一个软件、同一个模块或者数据记录时是否存在死锁等性能问题。</p></li><li><p>配置测试是通过对被测系统的软/硬件环境的调整，了解各种不同方法对软件系统的性能影响的程度，从而找到系统各项资源的最优分配原则。<br>可靠性测试是在给系统加载一定业务压力的情况下，使系统运行一段时间，以此检测系统是否稳定。<br>总的来说，性能压测是在对系统性能有一定程度了解的前提下，在确定的环境下针对压测需求进行的一种测试。</p></li></ul><h4 id="性能测试包括负载测试、压力测试、基准测试等。"><a href="#性能测试包括负载测试、压力测试、基准测试等。" class="headerlink" title="性能测试包括负载测试、压力测试、基准测试等。"></a>性能测试包括负载测试、压力测试、基准测试等。</h4><ol><li><p>负载测试<br>通过测试系统在资源超负荷情况下的表现，以发现设计上的错误或验证系统的负载能力。</p></li><li><p>压力测试<br>也称为强度测试、负载测试。压力测试是模拟实际应用的软硬件环境及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等</p></li><li><p>基准测试</p></li></ol><h4 id="性能测试做什么？"><a href="#性能测试做什么？" class="headerlink" title="性能测试做什么？"></a>性能测试做什么？</h4><p>性能测试是通过使用各种工具，来模拟各种可控与不可控的请求。通过模拟生产运行的业务以及使用场景的组合形成多种性能测试点，测试系统的性能是否能够满足生产性能要求。在特定条件下运行验证系统承受能力。通过各项性能指标来判断系统是否达到生产需求，及时对系统做出风险评估。发现问题、解决问题，回馈用户高质量的体验</p><h4 id="性能测试怎么做？"><a href="#性能测试怎么做？" class="headerlink" title="性能测试怎么做？"></a>性能测试怎么做？</h4><p>我们系统的性能测试利用市面上测试工具进行性能测试。这种测试方法可以捕获部分问题，但很难模拟业务场景组合。而且测试工具五花八门，不利于搜集测试性能结果。我们现在进行的性能测试开发，利用统一的性能测试工具Jmeter做为核心。利用influxDB数据库做数据收集，Grafana做性能数据展示平台。搭建完整的性能测试平台，开放统一的性能测试通道，建立通一的性能指标收集平台。平台根据我们自己的业务要求建立性能测试计划，推出不同的业务模板。通过平台接口可进行合理的性能测试。我们可根据不同业务展示不同的性能图形。有利于测试人员及时定位问题</p><h3 id="五、如何选取性能压测工具"><a href="#五、如何选取性能压测工具" class="headerlink" title="五、如何选取性能压测工具"></a>五、如何选取性能压测工具</h3><p>在选取合适的性能压测工具之前，我们需要先先了解执行一次完整的性能压测所需要的步骤：</p><ol><li><p>确定性能压测目标：性能压测目标可能源于项目计划、业务方需求等</p></li><li><p>确定性能压测环境：为了尽可能发挥性能压测作用，性能压测环境应当尽可能同线上环境一致</p></li><li><p>确定性能压测通过标准：针对性能压测目标以及选取的性能压测环境，制定性能压测通过标准，对于不同于线上环境的性能压测环境，通过标准也应当适度放宽</p></li><li><p>设计性能压测：编排压测链路，构造性能压测数据，尽可能模拟真实的请求链路以及请求负载</p></li><li><p>执行性能压测：借助性能压测工具，按照设计执行性能压测</p></li><li><p>分析性能压测结果报告：分析解读性能压测结果报告，判定性能压测是否达到预期目标，若不满足，要基于性能压测结果报告分析原因</p></li></ol><p>由上述步骤可知，一次成功的性能压测涉及到多个环节，从场景设计到施压再到分析，缺一不可。工欲善其事，必先利其器，而一款合适的性能工具意味着我们能够在尽可能短的时间内完成一次合理的性能压测，达到事半功倍的效果。</p><p>工具选型对比<br>在论述了性能压测必要性之后，如何选取性能压测工具成为一个重要的议题？本文选取了市场上主流性能压测工具：（ab）Apache Bench、LoadRunner、JMeter、阿里云PTS，并从多个方面出发分析了各个工具的优缺点，汇总后的优缺点如下表所示：</p><table><thead><tr><th align="center">压测工具</th><th align="center">Apache Bench（ab）</th><th align="center">LoadRunner</th><th align="center">JMeter</th><th align="center">PTS</th></tr></thead><tbody><tr><td align="center">学习成本</td><td align="center">低</td><td align="center">高</td><td align="center">高</td><td align="center">低</td></tr><tr><td align="center">安装部署成本</td><td align="center">低</td><td align="center">高</td><td align="center">高</td><td align="center">低</td></tr><tr><td align="center">是否免费</td><td align="center">是</td><td align="center">否</td><td align="center">是</td><td align="center">否</td></tr><tr><td align="center">是否支持多协议</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">压测结果是否能够图形化展示</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">是否支持TPS模式</td><td align="center">否</td><td align="center">否</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">是否有链路、场景编排管理支持</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">是否支持场景录制</td><td align="center">否</td><td align="center">是</td><td align="center">是</td><td align="center">是</td></tr><tr><td align="center">生态环境强弱</td><td align="center">弱</td><td align="center">弱</td><td align="center">弱</td><td align="center">强</td></tr><tr><td align="center">监控指标是否完备</td><td align="center">否</td><td align="center">否</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">是否原生支持流量地域定制</td><td align="center">否</td><td align="center">否</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">### 总结</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">目前采用jmeter和loadrunner主导检查测试反馈。</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 压测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins代表部署</title>
      <link href="/2018/12/12/code/bushu/"/>
      <url>/2018/12/12/code/bushu/</url>
      
        <content type="html"><![CDATA[<p>系统环境：</p><p>Distributor ID: Ubuntu<br>Description:    Ubuntu 16.04.2 LTS<br>Release:        16.04<br>Codename:       xenial<br>当前 docker 版本：Docker version 18.09.0<br>当前 docker-compose 版本：docker-compose version 1.23.2</p><p>docker-compose.yml<br>version: ‘3’<br>services:<br>  docker_jenkins:<br>    restart: always<br>    image: jenkins/jenkins:lts<br>    container_name: docker_jenkins<br>    ports:<br>      - ‘8080:8080’<br>      - ‘50000:50000’<br>    volumes:<br>      - ./data/:/var/jenkins_home<br>      - /var/run/docker.sock:/var/run/docker.sock<br>      - /usr/bin/docker:/usr/bin/docker<br>      - /usr/lib/x86_64-linux-gnu/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7<br>创建 data 目录并设置权限<br>mkdir ./data<br>sudo chown -R 1000 ./data //把当前目录的拥有者赋值给uid 1000<br>若已启动则需要重建下服务<br>构建Jenkins服务<br>docker-compose up -d</p><p>…访问 <a href="http://ip:8080" target="_blank" rel="noopener">http://ip:8080</a> 进行初始化…</p><p>jenkins在docker中安装后查看登录令牌<br>使用命令 docker logs 容器名称/容器ID 查看访问日志，即可查看到登录令牌</p><p>若未设置账户，如何查看admin的密码<br>一不小心，未创建新的账户，可通过查看挂载目录下的 /secrets/initialAdminPassword 中的 Key 作为密码登录<br>账户：admin<br>密码：cat ./data/secrets/initialAdminPassword</p><p>docker build 无权限的解决办法<br>在 docker-compose.yml 已将主机 docker 映射到容器内，故使用 docker -v 已经能够查看到版本号</p><ul><li>docker -v<br>Docker version 18.09.0, build 4d60db4</li><li>docker build -t test/test.admin.vue:v3 .<br>Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Post http://%2Fvar%2Frun%2Fdocker.sock/v1.39/build?buildargs=%7B%7D&amp;cachefrom=%5B%5D&amp;cgroupparent=&amp;cpuperiod=0&amp;cpuquota=0&amp;cpusetcpus=&amp;cpusetmems=&amp;cpushares=0&amp;dockerfile=Dockerfile&amp;labels=%7B%7D&amp;memory=0&amp;memswap=0&amp;networkmode=default&amp;rm=1&amp;session=c0j8whn50ubpyukeblzkng7cq&amp;shmsize=0&amp;t=test%2Ftest.admin.vue%3Av3&amp;target=&amp;ulimits=null&amp;version=1: dial unix /var/run/docker.sock: connect: permission denied<br>Build step ‘Execute shell’ marked build as failure<br>但是当使用 docker build -t . 命令的时候依旧无法执行，提示无权限(permission denied)<br>这个问题之前将Jenkins直接装在linux主机的时候也遇到过，在shell脚本输入框顶部加上 #!/bin/bash -ilex 即可<br>如果依旧不行，可执行(赋予读写执行权限)：sudo chmod 777 /var/run/docker.sock 注：服务器重启后可能权限会失效</li></ul><p>#!/bin/bash -ilex</p><ul><li>docker -v<br>Docker version 18.09.0, build 4d60db4</li><li>export DOCKER_IMAGE_NAME=test/test.admin.vue:v3</li><li>docker build -t test/test.admin.vue:v3 .<br>关于 docker 镜像的构建<br>注册阿里云账号，并申请阿里云的容器镜像服务，创建命名空间(公/私有，可自动创建仓库)，设置下 Registry 登录密码，随便新建一个仓库，查看仓库详情可查看推送 docker 的相关信息<br>创建好账号信息后，即可在 Jenkins 中构建推送。<br>可参考以下脚本，脚本环境变量说明<br>DOCKER_IMAGE_NAME：镜像名称(命名空间/镜像名:版本号)<br>DOCKER_CLOUD_URL： 镜像源<br>ALIYUN_USERNAME：阿里云用户名<br>ALIYUN_USERPWD：阿里云 Docker Registry 密码</li></ul><p>#!/bin/bash -ilex<br>docker -v<br>echo ‘打包镜像’<br>export DOCKER_IMAGE_NAME=test/$JOB_NAME:v$BUILD_NUMBER<br>docker build -t $DOCKER_IMAGE_NAME .</p><p>echo ‘推送镜像’<br>export DOCKER_CLOUD_URL=registry.cn-hangzhou.aliyuncs.com</p><p>docker login –username=$ALIYUN_USERNAME –password=$ALIYUN_USERPWD $DOCKER_CLOUD_URL</p><p>docker tag $DOCKER_IMAGE_NAME $DOCKER_CLOUD_URL/$DOCKER_IMAGE_NAME<br>docker push $DOCKER_CLOUD_URL/$DOCKER_IMAGE_NAME</p><p>echo ‘删除镜像’<br>docker rmi $DOCKER_IMAGE_NAME<br>docker rmi $DOCKER_CLOUD_URL/$DOCKER_IMAGE_NAME<br>参考<br><a href="https://github.com/jenkinsci/docker/blob/master/README.md" target="_blank" rel="noopener">https://github.com/jenkinsci/docker/blob/master/README.md</a><br><a href="https://www.cnblogs.com/leolztang/p/6934694.html" target="_blank" rel="noopener">https://www.cnblogs.com/leolztang/p/6934694.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awk运算</title>
      <link href="/2018/11/10/linux/awk/"/>
      <url>/2018/11/10/linux/awk/</url>
      
        <content type="html"><![CDATA[<p>个人日记整理</p><p><a href="https://ee4e9571.wiz03.com/wapp/pages/view/share/s/3KjFlN2YwAp_2pD4xe1RaPKO1lLCqP2vXA-R2RU7cz06ANz5" target="_blank" rel="noopener">https://ee4e9571.wiz03.com/wapp/pages/view/share/s/3KjFlN2YwAp_2pD4xe1RaPKO1lLCqP2vXA-R2RU7cz06ANz5</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> awk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper安装教程</title>
      <link href="/2018/09/13/tool/zookeeper/"/>
      <url>/2018/09/13/tool/zookeeper/</url>
      
        <content type="html"><![CDATA[<p>前言：<br>zookeeper依赖于Java环境<br>准备工作<br>    zookeeper包，Java的jdk<br>安装步骤<br>一、java安装<br>Ubuntu 16.04下Java环境安装与配置</p><p>1、下载jdk8<br>登录网址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>选择对应jdk版本下载</p><p>2、解压<br>tar -zxvf jdk-8u144-linux-x64.tar.gz</p><p>3、然后将文件夹jdk1.8.0_144移动到目录/opt下<br>sudo mv jdk1.8.0_144 /opt/</p><p>4、修改环境变量<br>sudo vi ~/.bashrc<br>在最末尾添加如下配置：</p><p>#set Java environment<br>export JAVA_HOME=/opt/jdk1.8.0_144<br>export JRE_HOME=${JAVA_HOME}/jre<br>export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib<br>export PATH=${JAVA_HOME}/bin:$PATH<br> 注意：不能空行</p><p>5、保存并退出，使用source命令使之生效</p><p>source ~/.bashrc</p><p>6、查看安装情况<br>java -version</p><p>配置环境变量<br><a href="https://blog.csdn.net/gaoanchen/article/details/77692451" target="_blank" rel="noopener">https://blog.csdn.net/gaoanchen/article/details/77692451</a><br>二、zookeeper<br>环境搭建<br>Ubuntu 14.04.5 LTS<br>zookeeper-3.4.6<br>jdk1.7.0_76<br>安装<br>下载zookeeper包，由于apache官方网络慢，我们选择从华科大的镜像地址进行下载<br>wget <a href="http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz</a><br>1<br>解压zookeeper到/usr/local<br>tar -xzvf zookeeper-3.4.6.tar.gz -C /usr/local<br>cd /usr/local/zookeeper-3.4.6<br>1<br>2<br>拷贝一份zookeeper的配置文件，zoo_sample.cfg =&gt; zoo.cfg<br>cd conf<br>cp zoo_sample.cfg zoo.cfg<br>1<br>2<br>变更zoo.cfg配置<br>vi zoo.cfg<br>1<br>主要更改zookeeper的数据存放地址和日志地址</p><p>dataDir=/HD/logs/zookeeper<br>dataLogDir=/HD/logs/zookeeper<br>1<br>2</p><h1 id="The-number-of-milliseconds-of-each-tick"><a href="#The-number-of-milliseconds-of-each-tick" class="headerlink" title="The number of milliseconds of each tick"></a>The number of milliseconds of each tick</h1><p>tickTime=2000</p><h1 id="The-number-of-ticks-that-the-initial"><a href="#The-number-of-ticks-that-the-initial" class="headerlink" title="The number of ticks that the initial"></a>The number of ticks that the initial</h1><h1 id="synchronization-phase-can-take"><a href="#synchronization-phase-can-take" class="headerlink" title="synchronization phase can take"></a>synchronization phase can take</h1><p>initLimit=10</p><h1 id="The-number-of-ticks-that-can-pass-between"><a href="#The-number-of-ticks-that-can-pass-between" class="headerlink" title="The number of ticks that can pass between"></a>The number of ticks that can pass between</h1><h1 id="sending-a-request-and-getting-an-acknowledgement"><a href="#sending-a-request-and-getting-an-acknowledgement" class="headerlink" title="sending a request and getting an acknowledgement"></a>sending a request and getting an acknowledgement</h1><p>syncLimit=5</p><h1 id="the-directory-where-the-snapshot-is-stored"><a href="#the-directory-where-the-snapshot-is-stored" class="headerlink" title="the directory where the snapshot is stored."></a>the directory where the snapshot is stored.</h1><h1 id="do-not-use-tmp-for-storage-tmp-here-is-just"><a href="#do-not-use-tmp-for-storage-tmp-here-is-just" class="headerlink" title="do not use /tmp for storage, /tmp here is just"></a>do not use /tmp for storage, /tmp here is just</h1><h1 id="example-sakes"><a href="#example-sakes" class="headerlink" title="example sakes."></a>example sakes.</h1><p>dataDir=/HD/logs/zookeeper<br>dataLogDir=/HD/logs/zookeeper</p><h1 id="the-port-at-which-the-clients-will-connect"><a href="#the-port-at-which-the-clients-will-connect" class="headerlink" title="the port at which the clients will connect"></a>the port at which the clients will connect</h1><p>clientPort=2181</p><h1 id="the-maximum-number-of-client-connections"><a href="#the-maximum-number-of-client-connections" class="headerlink" title="the maximum number of client connections."></a>the maximum number of client connections.</h1><h1 id="increase-this-if-you-need-to-handle-more-clients"><a href="#increase-this-if-you-need-to-handle-more-clients" class="headerlink" title="increase this if you need to handle more clients"></a>increase this if you need to handle more clients</h1><p>#maxClientCnxns=60<br>#</p><h1 id="Be-sure-to-read-the-maintenance-section-of-the"><a href="#Be-sure-to-read-the-maintenance-section-of-the" class="headerlink" title="Be sure to read the maintenance section of the"></a>Be sure to read the maintenance section of the</h1><h1 id="administrator-guide-before-turning-on-autopurge"><a href="#administrator-guide-before-turning-on-autopurge" class="headerlink" title="administrator guide before turning on autopurge."></a>administrator guide before turning on autopurge.</h1><p>#</p><h1 id="http-zookeeper-apache-org-doc-current-zookeeperAdmin-html-sc-maintenance"><a href="#http-zookeeper-apache-org-doc-current-zookeeperAdmin-html-sc-maintenance" class="headerlink" title="http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance"></a><a href="http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance" target="_blank" rel="noopener">http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</a></h1><p>#</p><h1 id="The-number-of-snapshots-to-retain-in-dataDir"><a href="#The-number-of-snapshots-to-retain-in-dataDir" class="headerlink" title="The number of snapshots to retain in dataDir"></a>The number of snapshots to retain in dataDir</h1><p>#autopurge.snapRetainCount=3</p><h1 id="Purge-task-interval-in-hours"><a href="#Purge-task-interval-in-hours" class="headerlink" title="Purge task interval in hours"></a>Purge task interval in hours</h1><h1 id="Set-to-“0”-to-disable-auto-purge-feature"><a href="#Set-to-“0”-to-disable-auto-purge-feature" class="headerlink" title="Set to “0” to disable auto purge feature"></a>Set to “0” to disable auto purge feature</h1><p>#autopurge.purgeInterval=1</p><p>启动zookeeper<br>cd ../bin</p><p>sh zkServer.sh start //启动<br>sh zkServer.sh status //检查状态<br>sh zkServer.sh stop //停止</p><p>检查zookeeper启动状态<br>ps -ef|grep zookeeper<br>1<br>遇到的问题<br><a href="mailto:root@127.0.0.1">root@127.0.0.1</a>:/usr/local/zookeeper-3.4.6# sh bin/zkServer.sh start<br>JMX enabled by default<br>bin/zkServer.sh: 95: /usr/local/zookeeper-3.4.6/bin/zkEnv.sh: Syntax error: “(“ unexpected (expecting “fi”)</p><p>百度得到的答案是Ubuntu的默认shell有问题，把dash改成bash就可以了</p><p><a href="mailto:root@127.0.0.1">root@127.0.0.1</a>:~# cd /bin/<br><a href="mailto:root@127.0.0.1">root@127.0.0.1</a>:/bin# ls -l /bin/sh<br>lrwxrwxrwx 1 root root 4 Dec 23 22:30 /bin/sh -&gt; dash(默认)<br><a href="mailto:root@127.0.0.1">root@127.0.0.1</a>:/bin# ln -sf bash /bin/sh<br><a href="mailto:root@127.0.0.1">root@127.0.0.1</a>:/bin# ls -l /bin/sh<br>lrwxrwxrwx 1 root root 4 Dec 23 22:37 /bin/sh -&gt; bash</p><p>重启解决</p><p>三、root权限更新</p><p>一、Ubuntu的<br>默认root密码是随机的，即每次开机都有一个新的root密码。我们可以在终端输入命令 sudo passwd，然后输入当前用户的密码，enter，</p><p>二、终端会提示我们输入新的密码并确认，此时的密码就是root新密码。修改成功后，输入命令 su root，再输入新的密码就ok了</p><p>三 、分析没有默认的，因为你还没给root设置密码，第一个 user 是在 admin 组 ，所以他可以给 root 设置密码 , so<br>sudo passwd root<br>[sudo] password for you ：—&gt; 输入你的密码，不会显示 </p><p>Enter new UNIX password: </p><p>— &gt; 设置root 密码<br>Retype new UNIX password: </p><h1 id="–-gt-重复"><a href="#–-gt-重复" class="headerlink" title="–&gt; 重复"></a>–&gt; 重复</h1><p>用安装时建立的用户登陆后在Shell执行<br>sudo passwd root回车Password:</p><p>后输入刚建立的用户密码回车<br>Enter new UNIX password:</p><p>这时输入要设置的root密码两次就会看到 </p><h1 id="password-updated-successfully了！"><a href="#password-updated-successfully了！" class="headerlink" title="password updated successfully了！"></a>password updated successfully了！</h1><p>安装后可以到用户和组里面去改，随便改的。要在登录时用root的话，可以在“登录界面”里改，让管理员登录系统的选项就可以了</p><p>来源： <a href="https://blog.csdn.net/zrxx01/article/details/80521256" target="_blank" rel="noopener">https://blog.csdn.net/zrxx01/article/details/80521256</a></p><p><a href="https://www.cnblogs.com/freescience/p/7272070.html" target="_blank" rel="noopener">https://www.cnblogs.com/freescience/p/7272070.html</a></p><p><a href="http://rayfuxk.iteye.com/blog/2279596" target="_blank" rel="noopener">http://rayfuxk.iteye.com/blog/2279596</a></p><p><a href="http://www.mamicode.com/info-detail-2243059.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-2243059.html</a></p><p><a href="https://blog.csdn.net/u011404265/article/details/72869920" target="_blank" rel="noopener">https://blog.csdn.net/u011404265/article/details/72869920</a><br><a href="https://blog.csdn.net/sunxiaoju/article/details/51994559" target="_blank" rel="noopener">https://blog.csdn.net/sunxiaoju/article/details/51994559</a><br><a href="https://www.linuxidc.com/Linux/2017-02/140908.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2017-02/140908.htm</a><br><a href="https://www.linuxidc.com/Linux/2017-02/140138.htm" target="_blank" rel="noopener">https://www.linuxidc.com/Linux/2017-02/140138.htm</a><br><a href="http://www.mamicode.com/info-detail-2243059.html" target="_blank" rel="noopener">http://www.mamicode.com/info-detail-2243059.html</a><br><a href="https://blog.csdn.net/wangyonglin1123/article/details/44959585" target="_blank" rel="noopener">https://blog.csdn.net/wangyonglin1123/article/details/44959585</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac中Composer的安装和使用</title>
      <link href="/2018/08/10/Mac/composer/"/>
      <url>/2018/08/10/Mac/composer/</url>
      
        <content type="html"><![CDATA[<p>Composer 是 PHP5.3以上 的一个依赖管理工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会安装这些依赖的库文件。它仅仅是一个依赖关系的管理，如同在iOS开发中Swift 和 Objective-C工程中使用的CocoaPods一样。</p><p>安装composer<br>安装前需确保系统PHP版本在5.3以上,在终端中执行以下命令下载Composer可执行文件：</p><p>curl -sS <a href="https://getcomposer.org/installer|" target="_blank" rel="noopener">https://getcomposer.org/installer|</a> php<br>此操作会下载最新版本到当前的工作目录中。然后在当前路径下就可以操作了，如查看Composer版本：</p><p>php composer.phar –version //Composer version 1.4.2 2017-05-17 08:17:52</p><p>如果下载失败也不用纠结了，直接去手动下载合适的版本<a href="https://getcomposer.org/download/，结果的一样的。" target="_blank" rel="noopener">https://getcomposer.org/download/，结果的一样的。</a></p><p>这应该算是局部安装了，当跳出当前目录还是无法正常使用，这肯定不是我们所期望的。如果要想全局生效需把composer.phar移到系统/usr/local/bin/目录下：</p><p>mv composer.phar /usr/local/bin/composer<br>然后在全部就可以使用composer,再也不用每次都输入长长的php composer.phar了。至此算是安装完毕。</p><p>//版本更新，如果有则更新到最新版本<br>composer selfupdate<br>更新完后会提示<br>Use composer self-update –rollback to return to version 1.4.1可以回退到上一版本。</p><p>使用composer<br>在我们的项目目录下创建文件composer.json添加所需要的依赖库的信息，例如需要”monolog/monolog”，”phpmailer/phpmailer”这两个库，json格式如下：</p><p>{<br>    “require”: {<br>        “monolog/monolog”: “1.0.*”,<br>        “phpmailer/phpmailer”: “~5.2”<br>    }<br>}</p><p>然后在终端执行：</p><p>composer install<br>composer根据json配置开始下载所依赖的库文件，安装完毕后（若无）会生成一个composer.lock文件，如果你熟悉cocoapods的话应该知道也有个文件Podfile.lock。</p><p>composer.lock作用锁定当前的配置文件，如果已存在，在下次执行install操作时会自动读取composer.lock中的信息，即使你已经修该了composer.json文件此时也不会生效。</p><p>composer update<br>此操作会直接从composer.json文件读取信息，下载库文件，然后同步更新composer.lock。此时这个操作可以看作先删除composer.lock文件，然后在执行install命令操作。</p><p>composer update monolog/monolog<br>指定某一个库的更新，其他的没有影响。</p><p>以上为compose的简单使用，有了它再使用第三方库操作起来是不是感觉很简单、很方便。</p><p>关于composer.json文件<br>以上我们使用的.json文件就一个require属性，其实composer还支持其他很多属性供我们添加一些其他配置信息。部分属性如下：</p><p>name<br>description<br>version<br>type<br>keywords<br>homepage<br>time<br>license<br>authors<br>…</p><p>具体属性代表的意义及支持的全部属性参看<a href="https://getcomposer.org/doc/04-schema.md" target="_blank" rel="noopener">https://getcomposer.org/doc/04-schema.md</a></p><p>一般情况下我们的项目工程中一个require属性就可以了，这里这个composer.json文件为了便于区分暂且称之为A.json。当我们下载了其他第三方库时可发现其目录下也有个composer.json(称之为B.json)或composer.lock。<br>B.json以monolog/monolog为例composer.json文件配置如下：</p><p>{<br>  “name”: “monolog/monolog”,<br>  “description”: “Logging for PHP 5.3”,<br>  “keywords”: [“log”,”logging”],<br>  “homepage”: “<a href="http://github.com/Seldaek/monolog&quot;" target="_blank" rel="noopener">http://github.com/Seldaek/monolog&quot;</a>,<br>  “type”: “library”,<br>  “license”: “MIT”,<br>  “authors”: [<br>    {<br>      “name”: “Jordi Boggiano”,<br>      “email”: “<a href="mailto:j.boggiano@seld.be">j.boggiano@seld.be</a>“,<br>      “homepage”: “<a href="http://seld.be&quot;" target="_blank" rel="noopener">http://seld.be&quot;</a><br>    }<br>  ],<br>  “require”: {<br>    “php”: “&gt;=5.3.0”<br>  },<br>  “autoload”: {<br>    “psr-0”: {“Monolog”: “src/“}<br>  }<br>}</p><p>这两个json文件肯定是不同的，在我们执行操作的时候都是用的A.json。B.json 属于第三方库本身的配置文件，和项目的配置依赖没有关系，B.json在我们要制作自己的库文件然后发布供别人下载使用时是必须的，通过它别人才能找到我们发布的库，这里暂且不谈。只需要记住只有根目录下的composer.json才是真正的项目依赖配置文件。</p><p>关于镜像<br>Composer在安装或更新的时候可能会出现失败或无法访问的情况，这是由于访问的外部网络可能被墙了。所以为Composer配置了一个国内提供的镜像，终端中执行:</p><p>composer config -g repo.packagist composer <a href="https://packagist.phpcomposer.com" target="_blank" rel="noopener">https://packagist.phpcomposer.com</a><br>以后每次的下载或更新都是访问的国内服务器了，具体Packagist / Composer 镜像参看phpcomposer</p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vi编辑</title>
      <link href="/2018/07/20/tool/vi/"/>
      <url>/2018/07/20/tool/vi/</url>
      
        <content type="html"><![CDATA[<ol><li><p>命名模式—–&gt;编辑模式<br> a：光标向后移动一位<br> i：光标、内容没有变化<br> o：向下起新行进入编辑模式<br> s：删除光标当前的字符进入编辑模式</p></li><li><p>尾行模式操作<br> :q      退出编辑<br> :w      对修改后的文档进行保存<br> :wq     保存并退出<br> :q!     强制退出，不保存修改<br> :w!     强制保存(对文件没有写权限，要进行修改保存的措施)<br> :wq!    强制保存并退出</p><p> :set number 或 nu       //设置行号<br> :set nonumber 或 nonu  //取消行号</p></li><li><p>命令模式操作<br> 1) 光标移动</p><pre><code>① 字符级移动    &quot;上下左右&quot;键移动    h左  j下   k上   l右② 单词级移动    w: 下个单词的首字母    b: 上个(本)单词的首字母    e: 下个(本)单词的尾字母③ 行级    $:  行尾    0:  行首④ 段落    {：上个(本)段落首部    }：下个(本)段落尾部⑤ 屏幕级(不翻屏)    H: 屏幕首部    L: 屏幕尾部⑥ 文档级    G:      文档尾部    1G:     文档首部    n+G:    文档的第n行</code></pre><p> 2) 内容删除</p><pre><code>dd:     删除光标所在行n+dd:   当前行算在内，向下删除n行x:      删除光标所在的当前字符c+w     从当前位置删除至单词尾部，并“进入编辑模式”d+光标移动区域： 删除光标经过的内容    d+e   //从当前位置删除至单词的结尾    d+$   //从当前位置删除至当前行的结尾    d+}   //从当前位置删除到当前段落的结尾    d+nG   //从当前行删除到第n行</code></pre><p> 3) 内容复制</p><pre><code>yy:     复制光标所在行n+yy:   当前行算在内，向下复制n行p       对“复制、删除”的内容进行粘贴操作y+光标移动区域： 复制光标经过的内容    y+e    //从当前位置复制至单词的结尾    y+$    //从当前位置复制至当前行的结尾    y+}    //从当前位置复制到当前段落的结尾    y+nG   //从当前行复制到第n行</code></pre><p> 4) 快捷操作</p><pre><code>r+字符      快速替换单个字符u           撤销undo.           点，重复执行上一次命令J           大写J，合并两行</code></pre><p>备注：可以关注博客持续更新其他新技术：<a href="https://chaofavip.github.io">hechaofa</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法课堂1</title>
      <link href="/2018/03/20/suanfa/suanfa01/"/>
      <url>/2018/03/20/suanfa/suanfa01/</url>
      
        <content type="html"><![CDATA[<p><strong>1、冒泡排序</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$len = count($arr);</span><br><span class="line">$n = count($arr) <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>($i = <span class="number">0</span>; $i &lt; $len; $i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>($j = <span class="number">0</span>;$j &lt; $n; $j++;)&#123;</span><br><span class="line">        <span class="keyword">if</span>($arr[$j] &gt; $arr[$j+ <span class="number">1</span> ])&#123;</span><br><span class="line">            $tmp = $arr[$j];</span><br><span class="line">            $arr[$j] = $arr[$j +<span class="number">1</span>];</span><br><span class="line">            $arr[$j + <span class="number">1</span>] = $tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2、插入排序</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_sort</span><span class="params">($arr)</span></span>&#123;</span><br><span class="line">    $len = count($arr);</span><br><span class="line">    <span class="keyword">for</span>($i = <span class="number">0</span>;$i &lt; $len;$i++)&#123;</span><br><span class="line">        $temp = $arr[$i];</span><br><span class="line">           <span class="keyword">for</span>($j = $i - <span class="number">1</span>; $j &gt;= <span class="number">0</span>; $j--)&#123;</span><br><span class="line">                <span class="keyword">if</span>($temp &lt; $arr[$j])&#123;</span><br><span class="line">                $arr[$j + <span class="number">1</span>] =$arr[$j];</span><br><span class="line">                $arr[$j] = $temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>递归：程序调用自身的编程技巧称为递归</em></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jq</title>
      <link href="/2017/11/09/jq/tu/"/>
      <url>/2017/11/09/jq/tu/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20191224000044442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基础操作</title>
      <link href="/2017/10/09/redis/jichu/"/>
      <url>/2017/10/09/redis/jichu/</url>
      
        <content type="html"><![CDATA[<p>1.1key键操作<br>1：exists key 　　　　　　     测试指定key是否存在</p><p>2：del key1 key2 —keyN      删除给定的key</p><p>3：type  key 　　　　　　　　返回给定key的value类型</p><p>4：keys　pattern　　　　　　返回匹配指定模式的所有key</p><p>5：rename oldkey newkey 　 改名字</p><p>6：dbsize　　　　　　　　　　返回当前数据库的key数量</p><p>7：expire key seconds 　　    为key指定过期时间</p><p>8：ttl key 　　　　　　　　　  返回key的剩余过期秒数</p><p>9：select db-index　　　　　　选择数据库</p><p>10 move key db-index            将key从当前数据库移动到指定的数据库</p><p>11：flushdb 　　　　　　　　　 删除当前数据库中所有的key</p><p>12：flushall　　　　　　　　　　删除所有数据库中的所有key</p><p>1.2：string类型操作<br>string是redis最基本的类型，一般我们可以用来保存序列化的对象或者一些图片的二进制字符串</p><p>1：set key value　　　　　　　　　　设置key对应的值为string类型的value</p><p>2：mset key1 value1 key2 value2　 一次性设置多个key的值</p><p>3：mget key1 key2 —-keyN           一次获取多个key的值</p><p>4：incr key 　　　　　　　　　　　　对key的值做加加操作，并返回新的值</p><p>5：decr key 　　　　　　　　　　　　同上，但是做的是减减操作</p><p>6：incrby key integer　　　　　　　　同incr，加指定值</p><p>7：decrby key integer　　　　　　　　同decr，减指定值</p><p>8：append key value 　　　　　　　　给指定key的字符串值追加value</p><p>9：substr key　start  end                 内容截取，内容下标从0开始，截取的内容包括start和end位置</p><p>1.3： List链表类型操作<br>list类型其实是一个双向的链表，通过push，pop操作从链表的头部或者尾部添加删除元素，这使得list既可以用作栈，也可以用作队列。一般我们使用它来获取最新的信息，可以存储n条，如果有新纪录加进来，就删除旧的信息</p><p>lpush key string 　　　　　　　　在key对应的list的头部添加字符串元素</p><p>rpop key　　　　　　　　　　　　从list的尾部删除元素，并返回删除元素</p><p>llen key 　　　　　　　　　　　　对应list的长度，key不存在返回0，如果key对应类型不是list返回错误</p><p>lrange key start end　　　　　　返回指定区间内的元素，下标从0开始</p><p>rpush key string                       同上，在尾部添加</p><p>lpop key  　　　　　　　　　　　 从list的头部删除元素，并返回删除元素</p><p>ltrin key start end 　　　　　　　截取list，保留指定区间内元素</p><p>1.4： set集合类型操作<br>set其实相当于string类型的无序集合</p><p>关于set集合类型除了基本的添加，删除操作，其他有用的操作还包含集合的并集，交集，差集，一般可以用来实现好友推荐功能</p><p>1：sadd key member 　　　　　 添加一个string元素到key对应的set集合中，成功就返回1,如果元素已经在集合中，返回0，key对应的set不存在返回错误</p><p>2：srem key member [member]  从key对应set中移除给定元素，成功就返回1</p><p>3：scard key 　　　　　　　　　　 返回set的元素个数</p><p>4：sismember key member 　　　判断member是否在set中</p><p>5：sinter key1 key2 key3 —keyN  返回所有给定key的交集</p><p>6：sunion key1 key2 –keyN          返回所有给定key的并集</p><p>7：sdiff key1 key2 –keyN             返回所有给定key的差集</p><p>8：smembers key 　　　　　　　　返回key对应set的所有元素</p><p>1.5 sort set 排序集合类型<br>元素有排序功能，不存在多个相同的元素，和set一样，sorted set 也是string类型元素的集合，不同的每个元素都会关联一个权，通过权值来进行排序</p><p>1：zdd key 权 值                     给key的set sort排序集合的key添加元素</p><p>2：zrevrange  key start end      获取由高到低的各个元素值</p><p>3：zscore key value 　　　　　　获取元素的权信息</p><p>4：zrank key value　　　　　　　　　　 获取元素的排名序号</p><p>5：zcard key 　　　　　　　　　　获取集合的个数</p><p>6：zremrangebyrank key 0 0    删除一个权最小的旧元素</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 版本管理</title>
      <link href="/2017/09/17/git/guanli/"/>
      <url>/2017/09/17/git/guanli/</url>
      
        <content type="html"><![CDATA[<p>若想使用好版本管理，得须明白什么是版本，版本的基础概念请前往文章: <a href="http://blog.linghit.com/blog/3" target="_blank" rel="noopener">软件开发中的”版本”</a>。</p><p><strong>版本发布后，严禁在生产服务器修改文件及代码，如有发现，会记录在案。</strong></p><h4 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h4><p>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt="flow"></p><p>下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Workspace：工作区</span><br><span class="line">Index &#x2F; Stage：暂存区</span><br><span class="line">Repository：仓库区（或本地仓库）</span><br><span class="line">Remote：远程仓库</span><br></pre></td></tr></table></figure><h4 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"># 新建一个目录，将其初始化为Git代码库</span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line">$ git clone [url]</span><br></pre></td></tr></table></figure><h4 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h4><p>Git的设置文件为 <code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示当前的Git配置</span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"># 编辑Git配置文件</span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"># 设置提交代码时的用户信息</span><br><span class="line">$ git config [--global] user.name &quot;[name]&quot;</span><br><span class="line">$ git config [--global] user.email &quot;[email address]&quot;</span><br></pre></td></tr></table></figure><h4 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 添加每个变化前，都会要求确认</span><br><span class="line"># 对于同一个文件的多处变化，可以实现分次提交</span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"># 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h4 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h4 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 切换到指定分支，并更新工作区</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"># 切换到上一个分支</span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure><h4 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有tag</span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"># 新建一个tag在当前commit</span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"># 新建一个tag在指定commit</span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"># 删除本地tag</span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"># 删除远程tag</span><br><span class="line">$ git push origin :refs&#x2F;tags&#x2F;[tagName]</span><br><span class="line"></span><br><span class="line"># 查看tag信息</span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"># 提交指定tag</span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"># 提交所有tag</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向某个tag</span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h4 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"># 显示有变更的文件</span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"># 显示当前分支的版本历史</span><br><span class="line">$ git log</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat</span><br><span class="line"></span><br><span class="line"># 搜索提交历史，根据关键词</span><br><span class="line">$ git log -S [keyword]</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="line">$ git log [tag] HEAD --pretty&#x3D;format:%s</span><br><span class="line"></span><br><span class="line"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span><br><span class="line">$ git log [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"># 显示某个文件的版本历史，包括文件改名</span><br><span class="line">$ git log --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"># 显示指定文件相关的每一次diff</span><br><span class="line">$ git log -p [file]</span><br><span class="line"></span><br><span class="line"># 显示过去5次提交</span><br><span class="line">$ git log -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"># 显示所有提交过的用户，按提交次数排序</span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"># 显示指定文件是什么人在什么时间修改过</span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"># 显示暂存区和工作区的差异</span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"># 显示暂存区和上一个commit的差异</span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"># 显示工作区与当前分支最新commit之间的差异</span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"># 显示两次提交之间的差异</span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"># 显示今天你写了多少行代码</span><br><span class="line">$ git diff --shortstat &quot;@&#123;0 day ago&#125;&quot;</span><br><span class="line"></span><br><span class="line"># 显示某次提交的元数据和内容变化</span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交发生变化的文件</span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"># 显示某次提交时，某个文件的内容</span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"># 显示当前分支的最近几次提交</span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h4 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 下载远程仓库的所有变动</span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"># 显示所有远程仓库</span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"># 显示某个远程仓库的信息</span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"># 增加一个新的远程仓库，并命名</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"># 取回远程仓库的变化，并与本地分支合并</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 上传本地指定分支到远程仓库</span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"># 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"># 推送所有分支到远程仓库</span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h4 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2017/07/20/design/design/"/>
      <url>/2017/07/20/design/design/</url>
      
        <content type="html"><![CDATA[<h2 id="单例模式（重点！）"><a href="#单例模式（重点！）" class="headerlink" title="单例模式（重点！）"></a><strong>单例模式（重点！）</strong></h2><p>单例：单个实例。</p><p>如果一个类的一个对象，可以完成全部功能。（例如MySQLDB数据库操作类）。</p><p>此时，如果实例化多个对象，就会造成额外的浪费资源。</p><p>如何设计，才能使得程序在任何地方都可以得到对象，而且是同一对象呢？</p><p>单例的设计思路：<strong>私有化构造方法</strong><br>如何限制用户来得到类的对象？</p><p>私有化构造方法后，类外的实例化工作，就不能调用构造方法，从而导致new的操作失败！</p><p> <img src="https://img-blog.csdnimg.cn/20191221224614674.png" alt="在这里插入图片描述"></p><p>公共的静态的获得对象的方法<br>如何实例化对象？</p><p>私有的构造方法，不能在类外调用，但是可以在类内调用。</p><p>“可见在类内实例化是可行的”</p><p>如何在类内执行实例化呢？</p><p>提供一个公共的静态方法，通过类调用进入到类内，从而执行实例化操作得到对象。</p><p><img src="https://img-blog.csdnimg.cn/20191221224646256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>私有的静态属性</strong><br>实现getInstance的单例逻辑，先判断，再决定是否实例化对象。</p><p>如何实现判断当前是否已经有对象？</p><p>将实例化好的对象存于该类的静态属性中，判断是否已经存了。</p><p> <img src="https://img-blog.csdnimg.cn/20191221224724544.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>私有化克隆__clone方法<br>对象还可以通过克隆的形式来得到，如何防止克隆？</p><p> <img src="https://img-blog.csdnimg.cn/20191221224744765.png" alt="在这里插入图片描述"></p><p>架构上的单例<br>项目设计上实现单例效果！</p><p> <img src="https://img-blog.csdnimg.cn/2019122122481995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>针对其他类：</p><p> <img src="https://img-blog.csdnimg.cn/20191221224828732.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>优点：</strong></p><ol><li>灵活，通用，没有限制死。</li><li>缺点：没有完全限制单例效果。</li></ol><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a><strong>工厂模式</strong></h2><p>功能上：如果一个类的主要功能，是用于生产特定的对象。那么该类可以称之为一个工厂，或者依据工厂模式设计的类。</p><p>典型的实现是：工厂模式中的方法几乎都是静态方法。</p><p> <img src="https://img-blog.csdnimg.cn/20191221224855766.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>上面方法括号里的$class_name是一个参数，代表“类名”。</p><p>Tip：不是必须是静态的，而是由于类的主要作用不是实例化本类的对象，而是用于执行生成其他类的对象。</p><p>工厂模式何时用？？？</p><p>直接实例化不能达到要求，需要额外的代码来配合，才能得到想要的对象。此时需要工厂代码。</p><p>例如：</p><p>单例效果。</p><p>需要在运行时才能确定实例化哪个类。</p><p>使用地方1：处理日志系统：</p><p>存在下列的类：Log_DB（用来将日志存于数据库）, Log_File(用来将日志存于文件的类), Log_Memory（用来将日志存于内存）</p><p> <img src="https://img-blog.csdnimg.cn/20191221224911193.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>实际中，上面的相关功能类：</p><p>需要使用接口（抽象类）技术，限定要存在一致的操作才可以：</p><p><img src="https://img-blog.csdnimg.cn/2019122122492227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 备注：可以关注博客持续更新其他新技术：<a href="https://chaofavip.github.io">hechaofa</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2017/05/20/linux/mingling/"/>
      <url>/2017/05/20/linux/mingling/</url>
      
        <content type="html"><![CDATA[<p>1.查看当前目录下对应的文件信息<br>    &gt; ls       //list列出当前目录下的文件信息<br>    &gt; ls -l  或 ll //list list以详细信息形式 列出当前目录下的文件信息<br>    &gt; ls -a    //list all 列出当前目录的全部文件(包括隐藏文件)<br>    &gt; ls -al   //以详细信息形式 列出当前目录的”全部”文件(包括隐藏文件)</p><pre><code>&gt; ls  目录 //查看指定目录的文件信息&gt; ls -li   //显示当前目录详细的文件信息，并显示“索引编号”</code></pre><ol start="2"><li><p>查看当前操作位置</p><blockquote><p>pwd    //查看当前操作位置</p></blockquote></li><li><p>目录切换</p><blockquote><p>cd 目录<br>cd ..   //向上级目录切换<br>cd etc  //切换到etc目录</p></blockquote><blockquote><p>cd      //切换到当前操作用户的家目录<br>cd ~    //效果同上指令</p></blockquote></li><li><p>用户切换</p><blockquote><p>su -       //切换为超级管理员root用户(账号和权限都是root)<br>su - root  //与上边指令效果一直<br>su root    //账号是root，权限是普通权限<br>exit    //退回到之前的账号<br>su  普通用户 //切到账号为具体普通用户</p></blockquote><blockquote><p>$  普通用户操作</p><h1 id="root用户操作"><a href="#root用户操作" class="headerlink" title="root用户操作"></a>root用户操作</h1></blockquote><p> //多次使用su指令会使得用户出现叠加效果<br> //需要输入多次exit指令退回到之前的用户<br> shuhua—&gt;root—&gt;shuhua—&gt;root</p></li><li><p>查看当前用户是谁</p><blockquote><p>whoami    //查看正在操作用户信息<br>who am i  //查看登录系统用户信息</p></blockquote></li><li><p>操作窗口切换</p><blockquote><h1 id="init-3-桌面模式切换到命名模式"><a href="#init-3-桌面模式切换到命名模式" class="headerlink" title="init 3    //桌面模式切换到命名模式"></a>init 3    //桌面模式切换到命名模式</h1><h1 id="init-5-命名模式切换到桌面模式"><a href="#init-5-命名模式切换到桌面模式" class="headerlink" title="init 5    //命名模式切换到桌面模式"></a>init 5    //命名模式切换到桌面模式</h1></blockquote></li><li><p>目录操作<br> ① 创建目录 make directory</p><blockquote><p>mkdir  目录名称<br>mkdir -p  newdir/newdir/newdir  (-p)  //递归方式创建多级目录<br> mkdir dir/dir/newdir  无需-p参数<br> mkdir -p dir/newdir/newdir  需要-p参数<br> 规律：新的目录超过两个或以上就需要-p参数</p></blockquote><p> ② 移动目录 move</p><blockquote><p>mv  dir1  dir2   //把dir1移动到dir2目录下<br>mv  dir1/dir2  dir3  //dir2移动到dir3的下边</p></blockquote><p> ③ 改名字 </p><blockquote><p>mv  dir1  dir2  //把dir1的名字改为dir2<br>mv  dir1/dir2  dir3/newdir  //dir2移动到dir3下并改名字为newdir</p></blockquote><p> mv  dir1  dir2<br> dir2是存在的目录—-&gt;就是移动操作</p><pre><code>不存在的目录----&gt;就是改名字操作</code></pre><p> 本质：mv是“移动、改名字”的合并指令</p><blockquote><p>mv dir1  dir2         //dir1移动到dir2下并改名字为原名<br>mv dir1  dir2/newdir  //dir1移动到dir2下并改名字为newdir<br>mv dir1/dir2  dir3/dir4  //dir2移动到dir4下并改名字为原名</p></blockquote><p> ④. 复制目录copy</p><blockquote><p>cp  file  dir      //把file文件复制到dir目录里边<br>cp  dir1  dir2 -R  //recursive递归复制，复制目录设置统一参数-R<br>cp  dir1/dir2  dir3  -R //dir2复制到dir3下一份<br>cp (-R) filename  dir/newname  //filename文件复制到dir下并改名字为newname</p></blockquote><p> ⑤ 删除文件 remove directory/file</p><blockquote><p>rm  filename  //删除文件<br>rm  -r  dir   //recursive通过递归方式删除一个目录<br>rm  -rf  filename  //force 递归、强制删除任何文件<br>rm  -rf  /    //kill you by yourself<br>rmdir  dir    //删除目录,删除单级目录</p></blockquote></li><li><p>文件操作<br> ① 查看内容</p><blockquote><p>cat  file    //输出文件内容到终端<br>more file    //逐行向下查看文件内容，q退出，不支持回看<br>less file    //上下左右 键查看文档的各个部分内容，支持回看 q退出<br>head -n file  //查看文件的前n行内容<br>tail -n file  //查看文件的最末尾n行内容<br>wc  file      //计算文件行数<br> ② 创建文件<br>touch  file   //创建一个新文件<br>touch  dir/file  //给指定目录创建一个新文件</p></blockquote><p> ③ 给文件追加内容</p><blockquote><p>echo 内容 &gt;  file   //把内容追加到指定文件file里边</p><pre><code>//覆盖写方式追加</code></pre><p>echo 内容 &gt;&gt; file   //把内容追加到指定文件file里边</p><pre><code>//纯内容追加，原内容保留</code></pre><p> 文件不存在会自动创建</p></blockquote></li><li><p>用户user操作(创建add、修改mod、删除del)<br> 对应文件：/etc/passwd<br> ① 创建用户</p><blockquote><h1 id="useradd-username"><a href="#useradd-username" class="headerlink" title="useradd  username"></a>useradd  username</h1><h1 id="useradd-g-组编号-username-指定编号创建用户信息"><a href="#useradd-g-组编号-username-指定编号创建用户信息" class="headerlink" title="useradd  -g 组编号 username   //指定编号创建用户信息"></a>useradd  -g 组编号 username   //指定编号创建用户信息</h1><h1 id="useradd-g-组编号-u-用户编号-d-家目录-username"><a href="#useradd-g-组编号-u-用户编号-d-家目录-username" class="headerlink" title="useradd  -g 组编号  -u 用户编号   -d 家目录  username"></a>useradd  -g 组编号  -u 用户编号   -d 家目录  username</h1><p> //家目录 会自动创建<br> ② 修改用户</p><h1 id="usermod-g-组编号-username-修改用户组编号"><a href="#usermod-g-组编号-username-修改用户组编号" class="headerlink" title="usermod  -g 组编号  username   //修改用户组编号"></a>usermod  -g 组编号  username   //修改用户组编号</h1><h1 id="usermod-g-组编号-u-用户编号-d-家目录-l-newname-username"><a href="#usermod-g-组编号-u-用户编号-d-家目录-l-newname-username" class="headerlink" title="usermod  -g 组编号 -u  用户编号  -d 家目录  -l newname  username"></a>usermod  -g 组编号 -u  用户编号  -d 家目录  -l newname  username</h1><p> //如果修改 家目录，需要手动创建之<br> ③ 删除用户</p><h1 id="userdel-username-只删除用户信息"><a href="#userdel-username-只删除用户信息" class="headerlink" title="userdel  username      //只删除用户信息"></a>userdel  username      //只删除用户信息</h1><h1 id="userdel-r-username-用户信息-和-家目录都删除"><a href="#userdel-r-username-用户信息-和-家目录都删除" class="headerlink" title="userdel -r  username   //用户信息 和 家目录都删除"></a>userdel -r  username   //用户信息 和 家目录都删除</h1></blockquote></li></ol><ol start="10"><li><p>组group操作(创建、修改、删除)<br>对应文件：/etc/group<br>① 创建组</p><blockquote><p>groupadd  groupname<br>② 修改组<br>groupmod -n  newname  groupname<br>③ 删除组(该组下没有对应的用户信息才允许删除)<br>groupdel groupname</p></blockquote></li><li><p>查看指令的使用参数</p><blockquote><p>man 指令</p></blockquote></li><li><p>权限设置<br>① 字母相对方式设置权限<br>u主人权限，g同组权限，o其他组权限<br>+:增加权限<br>-:减少权限</p><blockquote><p>chmod u+rwx  filename  //给文件主人增加读、写、执行权限<br>chmod u+x  filename  //给文件主人增加执行权限<br>chmod u+rw  filename  //给文件主人增加读、写权限<br>chmod u+r,g+wx,o+w  filename  //同时给文件的主人、同组用户、其他组用户增加权限<br>chmod u+r,o+w  filename  //同时给文件的主人、其他组用户增加权限</p></blockquote><blockquote><p>chmod u-wx  filename   //给文件主人删除写、执行权限<br>chmod u-wx,o-rx  filename   //同时删除文件主人、其他组用户权限</p></blockquote><blockquote><p>chmod u+rw,u-x,o+wx,g-x,g+w  filename  //增加、删除权限可以同时操作</p></blockquote><p>② 数字绝对方式设置权限<br>read:4<br>write:2<br>execute:1</p><p>0:没有权限<br>1：执行<br>2：写<br>3：写、执行<br>4：读<br>5：读、执行<br>6：读、写<br>7：读、写、执行</p><p>chmod ABC filename      //A(user)B(group)C(other)代表三个数字</p><blockquote><p>chmod 764  filename   //主人(rwx)同组(rw)其他(r)</p></blockquote><p>字母相对、数字绝对设置权限的选取：<br>① 权限变动较少，使用字母相对方式<br>② 权限变动较多，使用数字绝对方式</p></li><li><p>管道使用</p><blockquote><p>cat passwd | head -5   //利用管道查看passwd文件的前5行内容<br>ls -l | wc     //查看当前目录全部的文件数目<br>ls -l | head -6  //查看当前目录前5个文件信息<br>管道可以使用多个<br>ls -l | head -6 | tail -5   //查看当前目录前5个文件信息,去除第一个文件<br>ls -l | head -21 | tail -5  //查看当前目录第16-20个文件信息<br>grep var passwd | head -3 //只显示有var字样的前3行内容<br>grep var passwd | wc      //计算passwd文件里边有“多少行”出现var字样</p></blockquote></li><li><p>查找内容<br>grep  内容  文件<br>在指定的文件里边查找需要的内容，会把内容所在行的信息都输出出来</p><blockquote><p>grep  login  ./passwd    //在passwd里边搜索login字样。会输出login所在行信息</p></blockquote></li><li><p>文件查找指令<br>find  查找目录  选项 选项值 [ 选项 选项值 选项 选项值 ]</p><blockquote><p>find  /  -name  passwd   //在根目录下查找名字为passwd的文件</p><pre><code>(遍历系统的全部目录查找，效率极低)</code></pre><p>find  ./ -maxdepth 1 -name “<em>y</em>“    //查找名字里边有y字样的文件,查找深度为1层<br>find  / -maxdepth 4 -mindepth 3 -name  passwd  //在3-4个目录层次之间 查找名字为passwd文件</p></blockquote><blockquote><p>find  ./  -size 10c     //在当前目录查找文件大小为10字节<br>find  ./  -size +4k     //查找大于4k大小的文件<br>find  ./  -size -100c     //查找小于100字节大小的文件</p></blockquote><p>选项：</p><pre><code>-name  通过文件名字查找-maxdepth n  限制查找目录的最深层级-mindepth n  限制查找目录的最浅层级-size  通过文件大小查找    单位：       默认512字节       数字c 字节       数字k 千字节    范围：        + 大于某范围        - 小于某范围-perm  通过文件权限查找    &gt; find  ./  -perm 765-type  通过文件类型(f文件/d目录)查找    &gt; find  ./  -type f    &gt; find  ./  -type d-user   通过文件主人查找-nouser 找到没有主人的文件 -group  通过文件组别查找-nogroup  找到没有组别的文件 </code></pre></li><li><p>修改文件主人、组别<br>change owner</p><blockquote><p>chown 主人.组别  filename<br>chown  主人  filename<br>chown  .组别  filename<br>chown -R 主人.组别 dir  //递归修改当前目录全部的文件的属组<br>chmod -R 777  dirname   //递归方式设置文件权限</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04 swoole扩展安装注意！！！</title>
      <link href="/2017/03/27/linux/ubuntu_swoole/"/>
      <url>/2017/03/27/linux/ubuntu_swoole/</url>
      
        <content type="html"><![CDATA[<p>前言：目前很多项目估计常常会用到swoole扩展，如个人使用Ubuntu虚拟机安装扩展，这里总结一下遇到的问题；</p><p>一、先保证服务器时间同步当前地区时间，如北京时间；</p><p>1、设定时区</p><p>如：设定时区：dpkg-reconfigure tzdata；</p><p>选择Asia -&gt; 再选择Shanghai -&gt; OK</p><p>2、检查是否同步</p><p>如：date   //执行命令  下面是效果显示</p><p>二、安装swoole  扩展</p><p>1、php  -m  查看当前是否已经安装过；</p><p>2、安装步骤；</p><p>1.1、下载swoole扩展包，解压，并cd  到解压后的目录;</p><p>1.2、根据目前个人使用的php 版本  执行：如phpize7.1（注意这个目录所在位置）；</p><p>1.3、再次执行：./configure –with-php-config=/usr/bin/php-config7.1    (这步操作比较重要，如果不指定，估计安装会失败)；</p><p>1.4、执行安装 ：make &amp;&amp; make install;</p><p>1.5、打开php.ini 增加swoole扩展 (注意php版本)；</p><p>1.6、php.ini里面添加：extension=swoole.so;</p><p>1.7、重启一下php  执行php -m   查看是否安装成功。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu16.04安装并搭建定时脚本cron</title>
      <link href="/2017/03/20/linux/ubuntu_cron/"/>
      <url>/2017/03/20/linux/ubuntu_cron/</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu16-04安装并搭建定时脚本cron"><a href="#Ubuntu16-04安装并搭建定时脚本cron" class="headerlink" title="Ubuntu16.04安装并搭建定时脚本cron"></a>Ubuntu16.04安装并搭建定时脚本cron</h2><p>一 、安装使用</p><p>1.安装cron</p><p>sudo apt-get install cron</p><p>2.启动cron</p><p>sudo service cron start</p><p>3.创建一个文件：</p><p>例如： 用户名(test)+cron</p><p>文件测试内容：*/1 * * * * date &gt;&gt; /home/www/time.log</p><p>然后crontab testcron，testcron为文件名   </p><p>重启命令： service cron restart</p><p>查看目录下 的/home/www/time.log 是否在打印时间，有打印说明配置成功</p><p>到此已经成功啦！！</p><p>.列出crontab文件</p><p>为了列出crontab文件，可以用：</p><p>$ crontab -l</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swoole安装（centos7）</title>
      <link href="/2017/03/02/linux/swoole_set/"/>
      <url>/2017/03/02/linux/swoole_set/</url>
      
        <content type="html"><![CDATA[<h2 id="swool安装（centos7）"><a href="#swool安装（centos7）" class="headerlink" title="swool安装（centos7）"></a>swool安装（centos7）</h2><p>1：获取swoole</p><p><a href="https://github.com/swoole/swoole-src/releases" target="_blank" rel="noopener">https://github.com/swoole/swoole-src/releases</a><br><a href="http://pecl.php.net/package/swoole" target="_blank" rel="noopener">http://pecl.php.net/package/swoole</a><br><a href="http://git.oschina.net/swoole/swoole" target="_blank" rel="noopener">http://git.oschina.net/swoole/swoole</a><br>2：解包并用phpize编译扩展<br>/usr/local/webserver/php7/bin/phpize</p><p>红色字体部分是你的php安装路径</p><p>3：编译</p><p>/usr/local/php/bin/phpize<br>./configure –with-php-config=/usr/local/php/bin/php-config<br>+++++++++++++++++++++++++<br>ubuntu 16.04</p><p>phpize7.1<br>./configure –with-php-config=/usr/bin/php-config7.1</p><p>++++++++++++++++++++++</p><p>./configure –with-php-config=/usr/local/webserver/php7/bin/php-config(例子)</p><p>红色字体部分为你的php安装路径</p><p>4：安装</p><p>make &amp;&amp; make install</p><p>5：打开php.ini增加swoole扩展</p><p>extension=swoole.so</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你购买使用Vultr服务器</title>
      <link href="/2017/02/20/tool/tizi/"/>
      <url>/2017/02/20/tool/tizi/</url>
      
        <content type="html"><![CDATA[<p>摘要：Vultr是一家美国的服务器厂商,这个VPS服务商是按小时收费的。这意味着,架设一台VPS的成本几乎为零。不想用美国的了,关机销毁然后再换到全球任何一个地区无压力。新手入门强烈推荐,点击这里打开注册,点击右上角的注册按钮即可注册。注册好账号来到你的登录界面:1).第一步开启VPS1.png2).选择一个你喜欢的服务器地区,推荐日本,毕竟离得近嘛2.png3).选择服务器系统3.png4).选择套餐,最便宜的2.5刀一个月的没了,选第二个。4.png5).点击deploynow</p><p>Vultr是一家美国的服务器厂商,这个VPS服务商是按小时收费的。这意味着,架设一台VPS的成本几乎为零。不想用美国的了,关机销毁然后再换到全球任何一个地区无压力。新手入门强烈推荐,点击这里打开注册,点击右上角的注册按钮即可注册。<br>注册好账号来到你的登录界面:</p><p>1).第一步开启VPS</p><p>1.<img src="https://img-blog.csdnimg.cn/20191221082841561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2).选择一个你喜欢的服务器地区,推荐日本,毕竟离得近嘛</p><p><img src="https://img-blog.csdnimg.cn/20191221082918611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="手把手教你购买使用Vultr服务器2.png"> </p><p>3).选择服务器系统 </p><p><img src="https://img-blog.csdnimg.cn/20191221082930716.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="手把手教你购买使用Vultr服务器3.png"> </p><p>4).选择套餐,最便宜的2.5刀一个月的没了,选第二个。</p><p><img src="https://img-blog.csdnimg.cn/20191221082955523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="手把手教你购买使用Vultr服务器4.png"> </p><p>5).点击deploy now<br><img src="https://img-blog.csdnimg.cn/20191221083037532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="手把手教你购买使用Vultr服务器5.png"> </p><p>6).看到他正在安装系统</p><p><img src="https://img-blog.csdnimg.cn/20191221083051222.png" alt="手把手教你购买使用Vultr服务器6.png"><br>7).安装完了,正在启动</p><p><img src="https://img-blog.csdnimg.cn/20191221083104836.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="手把手教你购买使用Vultr服务器7.png"> </p><p>8).开启成功</p><p><img src="https://img-blog.csdnimg.cn/20191221083122434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="手把手教你购买使用Vultr服务器8.png"><br>9).黄色字体忽略,是告诉你现在服务器刚开启成功~</p><p><img src="https://img-blog.csdnimg.cn/20191221083219479.png" alt="手把手教你购买使用Vultr服务器9.png"><br>接下来 ?<br>记住你的服务器IP,拷贝密码,开始服务器的基础配置,参考这里服务器的基础配置</p><p>手把手教你购买使用Vultr服务器</p><p>创建完成后,开始ssh连接服务器.CentOs自带ssh,默认端口号为22<br>a. 有一点需要注意,如果端口号被限制,则无法访问,默认的22端口是开放的.(不需要修改端口号请略过)<br> b. 点击新建的实例,如下界面,如果配置了防火墙(策略组),则需要把端口号放开,允许访问!!!</p><p><img src="https://img-blog.csdnimg.cn/20191221083347951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> c. 关于防火墙,点击servers - firewall,进入</p><p><img src="https://img-blog.csdnimg.cn/20191221083359478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> d. 选择一个防火墙组,没有的话点击 Add Firewall Group</p><p><img src="https://img-blog.csdnimg.cn/20191221083416665.png" alt="在这里插入图片描述"><br>f. 选择一个防火墙组<br>            按步骤,1-2-3- 4 点击加号确定</p><p><img src="https://img-blog.csdnimg.cn/20191221083429186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 最后回到b步骤选择刚刚创建的策略组.</p><p>备注：以上操作供参考，实际上操作下来也会深有感触！</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码优化技巧大盘点</title>
      <link href="/2016/09/30/php/change/youhua/"/>
      <url>/2016/09/30/php/change/youhua/</url>
      
        <content type="html"><![CDATA[<p>PHP优化的目的是花最少的代价换来最快的运行速度与最容易维护的代码。本文给大家提供全面的优化技巧。</p><p>　　1、echo比print快。</p><p>　　2、使用echo的多重参数代替字符串连接。</p><p>　　3、在执行for循环之前确定最大循环数，不要每循环一次都计算最大值，最好运用foreach代替。</p><p>　　4、对global变量，应该用完就unset()掉。</p><p>　　5、用单引号代替双引号来包含字符串，这样做会更快一些。因为PHP会在双引号包围的字符串中搜寻变量，单引号则不会。</p><p>　　6、函数代替正则表达式完成相同功能。</p><p>　　7、当执行变量$i的递增或递减时，$i++会比++$i慢一些。这种差异是PHP特有的，并不适用于其他语言，++$i更快是因为它只需要3条指令(opcodes)，$i++则需要4条指令。后置递增实际上会产生一个临时变量，这个临时变量随后被递增。而前置递增直接在原值上递增。</p><p>　　8、使用选择分支语句（switch case）好于使用多个if，else if语句。</p><p>　　9、利用var_dump进行PHP代码调试。如果你在寻找php调试技术，我必须说var_dump应该是你要找的目标，在显示php信息方面这个命令可以满足你的所有需要，而调试代码的多数情况与得到PHP中的数值有关。</p><p>　　10、在包含文件时使用完整路径，解析操作系统路径所需的时间会更少。</p><p>　　11、动辄创建全局数值是一种糟糕的做法，不过有时候实际情况的确又需要这么做。对于数据库表或数据库连接信息使用全局数值是一个不错的想法，但不要在你的PHP代码中频繁使用全局数值。另外，更好的一种做法是把你的全局变量存放在一个config.php文件中。</p><p>　　12、如果你想知道脚本开始执行的时刻，使用$_SERVER[‘REQUEST_TIME’]要好于time()。</p><p>　　13、打开apache的mod_deflate模块。</p><p>　　14、用@屏蔽错误消息的做法非常低效。</p><p>　　15、尽量采用大量的PHP内置函数。</p><p>　　16、递增一个未预定义的局部变量要比递增一个预定义的局部变量慢9至10倍。</p><p>　　17、派生类中的方法运行起来要快于在基类中定义的同样的方法。</p><p>　　18、仅定义一个局部变量而没在函数中调用它，同样会减慢速度（其程度相当于递增一个局部变量）</p><p>　　19、Apache解析一个PHP脚本的时间要比解析一个静态HTML页面慢2至10倍。尽量多用静态HTML页面，少用脚本。</p><p>　　20、正如之前提到的，任何php网站中最重要的部分有99%的可能是数据库。因此，你需要非常熟悉如何正确的使用sql，学会关联表和更多高级的数据库技术。</p><p>　　21、调用带有一个参数的空函数，其花费的时间相当于执行7至8次的局部变量递增操作。</p><p>　　22、当操作字符串并需要检验其长度是否满足某种要求时，你想当然地会使用strlen()函数。此函数执行起来相当快，因为它不做任何计算，只返回zval结构（C的内置数据结构，用于存储PHP变量）中存储的已知字符串长度。</p><p>　　23、并不是所有情况都必须使用面向对象开发，面向对象往往开销很大，每个方法和对象调用都会消耗很多内存。</p><p>　　24、除非脚本可以缓存，否则每次调用时都会重新编译一次。引入一套PHP缓存机制通常可以提升25%至100%的性能，以免除编译开销。</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php核心</title>
      <link href="/2016/06/13/php/study/study/"/>
      <url>/2016/06/13/php/study/study/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20191224000825149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象</title>
      <link href="/2016/06/13/php/base/duixiang/"/>
      <url>/2016/06/13/php/base/duixiang/</url>
      
        <content type="html"><![CDATA[<p>学习开发过程中，大概总结如下<br><img src="https://img-blog.csdnimg.cn/20191224000406351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoYW9mYXZpcA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计原则</title>
      <link href="/2016/04/29/php/design/phpdesign/"/>
      <url>/2016/04/29/php/design/phpdesign/</url>
      
        <content type="html"><![CDATA[<p><strong>1、开闭原则</strong><br>里面包含得特征：<br>a、开：可扩展性强；b、闭：封装得类和方法公用性强<br><strong>2、里氏代换原则</strong><br>子类可以扩展父类的功能，但不能改变父类原有的功能<br>它包含以下4层含义：<br>1、子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。<br>2、子类中可以增加自己特有的方法。<br>3、当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。<br>4、当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。<br><strong>3、接口隔离原则</strong><br>一个类对另外一个类的依赖性应当是建立在最小的接口上的</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php单词整理</title>
      <link href="/2016/04/05/php/base/word/"/>
      <url>/2016/04/05/php/base/word/</url>
      
        <content type="html"><![CDATA[<p>————————————–html单词————————————</p><p>html超文本标记语言<br>head 头部<br>font 字体 字形<br>i(italic) 倾斜，斜体字<br>big 大的，字体加大<br>hr 水平线<br>Pre（predefined）预定义<br>h5标题5<br>Div（division）区隔标记<br>circle 空心圆，圈<br>dt(Define title定义的标题<br>dl(Definition list)定义清单<br>dd(definition description)定义内容<br>table 表格<br>background 背景<br>Cellpadding补白，是指单元格内文字与边框的距离<br>Href (hypertext reference) 链接地址，超文本引用<br>a (anchor)锚; 链接<br>http 服务程序所用的协议;<br>(hypertext transfer protoco)<br>description描述<br>Get地址栏传递 得到; 抓住<br>Maxlength最大长度<br>radio 单选按钮<br>无线电; 收音机<br>Selected选择<br>Submit提交<br>Xhtml<br>可扩展超文本标记语言<br>strict严格<br>frame框架<br>iframe浮动框架<br>aside侧边栏 到旁边<br>week周类型<br>Url统一资源定义器<br>uniform resource location<br>controls控制<br>hyper超<br>title标题<br>Color 颜色<br>Sub (subscript)下标 脚注<br>Small 小的，字体缩细<br>align对齐 水平对齐，排列<br>P（paragraph）段落<br>h1 标题1<br>h6标题6<br>ul (unordered list)无序列表<br>ol( ordered list)有序列表<br>marquee 滚动<br>scrollamount<br>Src 图片路径<br>(sample return container)<br>tr  行<br>cellspacing 单元格间距<br>rules 规则 合并单元格边框线<br>target 目标<br>mailto 邮件地址<br>content内容<br>author作者<br>Post 邮政 邮件<br>Readonly只读<br>Checked被选中 核对<br>textarea文本区域<br>reset重置 复位<br>DTD 文档类型定义<br>(document type definition)<br>object对象<br>poly多变型<br>borderframe框架的边框<br>footer页脚 网页的尾部<br>month月类型<br>list列表<br>source源<br>text文本<br>body 主体， 身体<br>face 字体，面容<br>em 倾斜，全身<br>left 左对齐 左边<br>Center 居中<br>Divide 划分 分离<br>h2标题2<br>nbsp 空格<br>Li 清单项目<br>disc 实心圆 圆盘<br>Height 高度<br>Loop 循环<br>Img （image）图片<br>td 单元格<br>rowspan合并行<br>all所有<br>self 自身<br>name 名字<br>charset字符集<br>form表单 形式<br>input输入<br>Disabled禁用<br>checkbox复选框<br>cols列<br>button按钮<br>embed嵌入<br>transitional过渡<br>coords坐标<br>href<br>email邮箱<br>time 时间类型<br>datalist数据列表<br>video视频<br>markup标记<br>b（bold）粗体，黑体字<br>size<br>u(underline)下划线<br>br（barter rabbet）换行<br>Right 右对齐<br>noshade 无阴影<br>h3标题3<br>span 跨度<br>Type 类型<br>Start 开始，起点<br>Direction 方向<br>Down 向下<br>Border 边框<br>bordercolor 边框的颜色<br>valign 垂直对齐方式<br>blank 空白，新的窗口打开<br>parent 父亲<br>meta 元数据<br>refresh刷新<br>action功能 行动<br>text文本<br>password密码<br>select选择<br>rows行<br>image图像<br>noframes 元素可为那些不支持框架的<br>frameset框架集<br>map地图<br>Scrolling滚动<br>article定义文章的内容<br>number数值<br>audio音频<br>language语言<br>Strong 粗体，强壮<br>Sup(superscript)上标<br>Width 宽度<br>times 乘，乘以<br>division除法<br>h4标题4<br>Square 方形，平方<br>Up 向上 在上面<br>Alt 说明<br>bcolor 背景颜色<br>colspan合并单元格<br>top 顶<br>middle中间<br>equiv 相等的等价物;<br>keywords关键词<br>method方法<br>Value价值<br>Name名称<br>option选项<br>hidden隐藏<br>file文件<br>shape形状<br>rect矩形<br>frameset框架集<br>section部分<br>date日期类型<br>range滑动条<br>autoplay自动播放</p><p>—————————-css部分———————————–</p><p>Css(cascading  style sheet)  （级联样式表）<br>a:active 单击鼠标左键<br>italic（倾斜）<br>word-spacing  单词和单词之间的距离<br>underline下划线<br>Font-size文字的大小<br>Background-color:背景颜色<br>Background-attachment :背景附件<br>attachment附件，附属物<br>Border-top-style:上边框的线型<br>Border-top-color:上边框的颜色<br>clear清除浮动，明白的; 清晰的<br>overflow溢出<br>normal正常<br>id标识符<br>Font-family字体<br>letter-spacing 字母和字母之间的距离<br>Line-through (删除线)<br>text-indent:首行缩进<br>Background-image：背景图片<br>scroll滚动<br>List-style-type:列表样式<br>solid实线 实心的<br>border-collapse:collapse; 合并表格的边框<br>float浮动 （使）漂浮; 自由浮动<br>static静态 静止的<br>Import 输入; 进口<br>Class 类<br>Font-style:文字是否倾斜<br>overline(上划线)<br>line-height:行高<br>Background-repeat:背景图片是否平铺<br>Repeat 重复; 复述<br>List列表<br>dashed虚线<br>collapse折叠<br>display显示<br>fixed固定 不变的<br>Link 链接<br>A:Visited 访问过的<br>Font-weight:文字加粗方式<br>none(无)<br>text-align:文本的水平对齐方法<br>Background背景; 底色<br>Background-position:背景图片的定位<br>position位置，方位;<br>none无  没有一个<br>padding填充<br>inline内联<br>absolute绝对的<br>stylesheet<br>A:hover 鼠标移上链接上<br>repeat-x横向平铺<br>Text-decoration:文本修饰线<br>bold加粗<br>repeat-y纵向平铺<br>no-repeat不平铺<br>Border-top-width:上边框的宽度<br>dotted点状线<br>margin外边距 边缘，范围<br>block块<br>relative相对</p><p>———————————js部分——————————–</p><p>javascript：<br>var：定义变量<br>if：如果<br>else：否则<br>switch：切换<br>for：<br>while：当…的时候<br>do：做<br>break：中断<br>continue：继续<br>function：函数，功能<br>return：返回<br>number：数字<br>int：整数<br>float：浮点数<br>string：字符串<br>bool：布尔<br>boolean：布尔<br>typeof：类型<br>null：空，空值<br>array：数组<br>length：长度<br>concat：连接<br>join：串联<br>pop：弹出<br>push：压入<br>reverse：反转<br>sort：排序<br>slice：切片，划分<br>splice：铰接，粘接<br>charAt：获取某位置字符<br>indexOf：判断某字符的首次位置<br>lastIndexOf：判断某字符的最后一次位置<br>replace：替换<br>split：分割<br>substr：截取字符串<br>substring：截取字符串<br>toLowerCase：转换为小写<br>toUpperCase：转换为大写<br>random：随机<br>round：取整<br>ceil：向上取整<br>floor：向下取整<br>abs：取绝对值<br>max：最大值<br>min：最小值<br>pow：幂运算<br>sqrt：取开方<br>new：新建<br>date：日期<br>time：时间<br>year：年<br>month：月<br>hour：时<br>minute：分<br>second：秒<br>millisecond：毫秒<br>status：状态<br>alert：警告<br>confirm：确认<br>prompt：提示，提示符<br>open：打开<br>setInterval：设置反复性定时器<br>setTimeout：设置一次性定时器<br>clear：清除<br>close：关闭<br>replace：替换<br>back：后退<br>go：走<br>width：<br>height：高度<br>appName：程序名<br>appCodeName：程序代号<br>appVersion：程序版本<br>appAgent：程序代理<br>clientX：<br>clientY：<br>srcElement：源对象，事件源<br>cancel：取消<br>bubble：冒泡<br>keyCode：键值<br>this：这个，当前<br>onload：在装载时<br>onclick：在点击时<br>ondblclick：在双击时<br>onmouseover：在鼠标进入时<br>onmouseout：在鼠标离开时<br>onmousemove：在鼠标移动时<br>onmousedown：在鼠标按下时<br>onmouseup：在鼠标抬起时<br>onkeydown：在按键按下时<br>onkeyup在按键抬起时<br>onkeypress：在按键时<br>onsubmit：在提交时<br>onchange：在改变时<br>onfocus：在获得焦点时<br>onblur：在失去焦点时<br>document：文档<br>write：写入<br>getElementById：通过ID获取对象<br>getElementsByName<br>element：元素，对象<br>option：选项<br>attribute：属性<br>child：孩子，下级<br>parent：父母，上级<br>node：节点<br>first：第一个<br>last：最后一个<br>next：下一个<br>previous：上一个<br>create：创建<br>append：附加</p><p>———————————PHP部分——————————–</p><p>PHP：PHP is HyperText Proprocessor<br>hosts：hosts文件<br>DNS：Domain Name Server域名服务器<br>load：装载<br>Module：模块<br>LoadModule：装载模块<br>File：文件<br>Match：匹配<br>FilesMatch：文件匹配<br>AddType：添加类型<br>application：应用程序<br>Info：Information，信息<br>Ini：Initiate，初始化<br>Dir：Directory目录<br>Time：时间<br>zone：时区<br>timezone：时区<br>extension：扩展<br>Option：选项<br>Order：顺序<br>Allow：允许<br>Deny：拒绝<br>Override：覆盖<br>Index：索引，标识，首页<br>DirectoryIndex：目录默认页<br>Server：服务器<br>Alias：昵称，别名<br>ServerAlias：服务器别名<br>VirtualHost：虚拟主机<br>ServerName：服务器名<br>Root：根，根目录<br>DocumentRoot：文档根目录<br>Short_open_tag：短标记<br>isset：是否设置<br>unset：取消设置<br>echo：输出<br>get<br>post<br>request：需要，要求，请求<br>global：全球的，整体的<br>method：方式，方式<br>location：地址，网址<br>request_order：请求顺序<br>remote：远端的<br>self：自身的<br>define：定义<br>constant：常量<br>version：版本<br>dir：目录<br>file：文件<br>line：行<br>int：整数<br>float：浮点<br>string：字符串<br>bool：boolean，布尔<br>array：数组<br>object：对象<br>null：空<br>resource：资源<br>dec：decimal，十进制<br>bin：binary，二进制<br>oct：octal，八进制<br>hex：hexadecimal，十六进制<br>double：双重的，两倍的<br>real：实数<br>key：键，关键<br>value：值<br>var_dump：显示数据信息<br>gettype：获取类型<br>settype：设置类型<br>empty：空的<br>if：如果<br>else：否则<br>break：退出<br>continue：继续<br>while：当…时<br>foreach：对…的每一个（进行遍历）<br>switch：转换，切换<br>die：死，停止<br>exit：退出<br>sleep：睡觉<br>include：包含<br>require：要求<br>once：一次<br>return：返回<br>error：错误<br>warning：警告<br>notice：提示<br>strict：严格的<br>user：用户<br>trigger：触发，引发<br>display：显示<br>on：打开<br>off：关闭<br>log：日志，记录<br>report：报告<br>parameter：形参<br>argument：实参<br>function：函数<br>call：调用<br>exists：存在<br>print：打印<br>trim：修剪，调整<br>implode：崩溃，瓦解<br>explode：爆炸，爆发，激增<br>substr：截取子字符串<br>strchr：<br>strrchr：<br>replace：替换<br>strtolower：转换为小写<br>strtoupper：转换为大写<br>position：位置<br>slash：斜线，反斜杠<br>time：时间<br>microtime：微型时间<br>date：日期<br>strtotime：字符转换为时间<br>diff：different，不同的，差异的<br>max：最大<br>min：最小<br>round：圆的，完整的，使成为整数<br>rand：random，随机的<br>abs：absolute，绝对的<br>ceil：向上取整<br>floor：向下取整<br>each：每一个<br>list：列表，列出来<br>current：现在的，当前<br>key：键，键名，关键<br>next：下一个，后一个<br>prev：previous上一个，前一个<br>reset：恢复，重置<br>end：结尾，最后，终止<br>pop：popup，弹出，取出，发射<br>push：推入，挤压，压入<br>shift：移动，改变，换挡，轮班，转换<br>slice：切开，割<br>splice：接合，衔接，拼接<br>sort：排序<br>shuffle：打乱<br>count：数量，计数<br>reverse：反转<br>merge：合并，融合，兼并<br>sum：总和，求和<br>range：范围<br>new：新的，创建<br>class：类<br>public：公开的<br>protected：受保护的<br>private：私有的<br>this：自己，这个<br>static：静态的<br>self：自身，自己的<br>parent：父母的，<br>construct：构造，建造，构建<br>destruct：毁灭，摧毁<br>extend：扩展，延伸<br>final：最后的<br>abstract：抽象的<br>interface：接口<br>implement：实现，实施，执行<br>tostring：转换为字符串<br>invoke：援引，引起，求助，调用<br>instance：实例<br>Model：模型<br>View：视图<br>Controller：控制器<br>PDO：PHP Data Object，php数据对象<br>query：查询<br>exec：execute，执行<br>close：关闭<br>lastinsertid：最后的插入id<br>attribute：属性<br>errorcode：错误代号<br>errorinfo：错误信息<br>errmode：错误模式<br>exception：异常<br>rowcount：行数<br>columncount：列数<br>fetch：取出，取得<br>prepare：准备<br>execute：执行<br>session：会话<br>cookie：<br>setcookie：设置cookie<br>lifetime：生命周期<br>path：路径<br>domain：域名<br>secure：安全<br>maxlifetime：最大生命周期<br>probability：可能性<br>divisor：除数，分母<br>handler：处理器<br>save：保存，存储<br>auto_start：自动开始<br>image：图片<br>truecolor：真彩色<br>allocate：分配<br>fill：填充<br>size：尺寸<br>mime：多用途的网际邮件扩展协议<br>destroy：毁灭<br>copy：拷贝<br>resample：取样<br>mkdir：创建目录<br>opendir：打开目录<br>readdir：读取目录<br>closedir：关闭目录<br>rename：重命名<br>unlink：删除目录或文件<br>realpath：完整路径<br>BaseName：基本文件名<br>DirName：目录名<br>file_get_contents：获得文件内容<br>file_put_contents：写入文件内容<br>fopen：打开文件<br>ftell：获取文件指针位置<br>fseek：设置文件指针位置<br>fread：读取文件内容<br>fgetc：读取一个字符<br>fgets：读取一行或本行中指定长度的字符<br>fwrite：写入文件内容<br>fclose：关闭文件<br>filemtime：文件最后修改时间<br>filesize：文件大小<br>file_exists：文件是否存在<br>accept：接收，接受<br>accept-language：可接受语言<br>encoding：编码<br>user-agent：用户代理（信息）<br>connection：连接<br>keep-alive：保持活动状态<br>found：已发现，已找到<br>forbidden：禁止<br>internal：内部的<br>content-type：内容类型<br>socket：套接字</p><p>——————————-MYSQL部分—————————–</p><p>sql: struct query language<br>mysql:<br>host：主机<br>user：用户<br>password:密码<br>data：数据<br>database：数据库<br>table：表<br>column：列<br>field：列<br>row：行<br>port：端口<br>quit：取消，退出<br>exit：退出<br>charset：字符集，字符编码<br>collate：排序规则<br>collation：排序规则<br>delimiter：分隔符<br>create：创建<br>drop：落下，放弃，停止<br>exists：存在<br>int类型<br>tinyint类型<br>smallint类型<br>mediumnint类型<br>biging类型<br>unsigned无符号的<br>zerofill 填充0<br>float：单精度浮点类型<br>double：双精度浮点类型<br>decimal：十进位类型，小数类型<br>numeric：数字<br>fixed：固定类型<br>char：定长字符类型<br>varchar：变长字符类型<br>binary：二进制类型<br>enum：列举类型<br>set：多选类型<br>bit：比特类型<br>primary key：主键<br>unique key：唯一键<br>auto_increment：自增长<br>default：默认值<br>comment：评论，说明<br>index：索引<br>key：索引<br>foreign key：外键<br>fulltext key 全文索引<br>constraint约束<br>engine 存储引擎<br>alter 改变<br>show 显示<br>describe 描述<br>rename 重命名<br>view 视图<br>insert 插入<br>value 值<br>replace 替换<br>select 选择<br>load 装载<br>delete 删除<br>from 从…<br>order 顺序<br>limit 限制<br>truncate<br>query 查询<br>distinct 区分的<br>where 哪里<br>group 组<br>as 作为<br>in 在…里面<br>like 像…一样<br>count 数量，计数<br>avg 平均<br>max 最大<br>min 最小<br>sum 总和<br>asc 升序的<br>desc 降序的<br>join 连接<br>inner 内部的<br>cross 交叉的<br>left：左边<br>right：右边<br>outer 外面的<br>in：在…里面<br>any：任意一个<br>all：全部<br>some：其中一部分<br>union：联合的<br>identify：确认，识别<br>grant：授予<br>revoke：撤销，取消，废除<br>privilege：权限<br>start：开始<br>transaction：事务<br>autocommit：自动提交<br>begin：开始<br>end：结束<br>commit：托付，承诺，保证<br>rollback：回滚<br>case：在…情形<br>loop：循环<br>while：当…的时候<br>repeat：重复<br>leave：离开<br>declare：声明<br>call：调用<br>procedure：存储过程<br>trigger：触发器</p><p>——————————ThinkPHP———————————–</p><p>controller    控制器<br>model        模型<br>view        视图<br>namespace    命名空间<br>use        使用<br>route        路由<br>rule        规则<br>assign        分配<br>display        显示<br>convention    惯例<br>common        共有的<br>config        配置<br>role        角色<br>base        基础的，基于<br>access        访问<br>control        控制<br>authority    权限</p><p>——————————JavaScript巩固加强—————————-<br>document    文档<br>object        对象<br>undefined    未定义<br>number        数字<br>boolean        布尔<br>string        字符串<br>null        空<br>true        真<br>false        假<br>console        控制台<br>array        数组<br>integer        整形<br>float        浮点数<br>function    函数<br>if        如果<br>else        其他<br>switch        开关<br>case        事件<br>length        长度<br>sort        排序<br>push        推<br>callee        被召唤<br>element        元素<br>sibling        堂兄弟，表兄弟<br>node        节点<br>parent        父亲<br>attribute    属性<br>append        追加<br>clone        克隆<br>event        事件<br>listener    侦听<br>attach        贴上、附上<br>detach        分离，拆开<br>offset        位移<br>propagation    传播，传输<br>bubble        水泡，冒泡<br>prevent        阻止<br>call        调用<br>apply        应用<br>prototype    原型<br>match        匹配<br>pattern        模式</p><p>——————————AJAX技术—————————-</p><p>asynchronous    异步的<br>ajax        一门异步传输数据的技术<br>open        打开<br>send        发送<br>state        状态<br>json        一种数据格式<br>progress    进展<br>[Jquery]<br>jQuery        一个开源的js脚本库<br>first        第一个<br>last        最后一个<br>even        偶数<br>odd        奇数<br>equal        相等<br>contains    包含<br>empty        空<br>parent        父级<br>toggle        交替<br>width        宽度<br>height        高度<br>text        文本<br>each        每一个，用来遍历数组和对象<br>filter        过滤<br>find        发现<br>next        下一个<br>bind        绑定<br>show        显示<br>hide        隐藏<br>animate        动画</p><p>——————————linux(LAMP)——————————</p><p>clear        清除<br>exit        退出<br>more        更多<br>less        更少<br>tail        尾巴<br>kill        杀死<br>service        服务<br>make        制作<br>install        安装</p><p>Redis       内存缓存数据库<br>exists      测试指定 key 是否存在<br>del         删除给定 key<br>type        返回给定 key 的 value 类型<br>keys        返回匹配指定模式的所有 key<br>randomkey   返回从当前数据库中随机选择的一个 key<br>rename      改名字<br>dbsize      返回当前数据库的 key 数量<br>expire      为 key 指定过期时间<br>ttl         返回 key 的剩余过期秒数<br>select      选择数据库<br>move        将 key 从当前数据库移动到指定数据库<br>flushdb     删除当前数据库中所有 key<br>flushall    删除所有数据库中的所有 key</p><p>set         设置 key 对应的值为 string 类型的 value<br>mset        一次设置多个 key 的值<br>mget        一次获取多个 key 的值<br>incr        对 key 的值做加加操作,并返回新的值<br>decr        同上，但是做的是减减操作<br>incrby      同 incr，加指定值<br>decrby      同 decr，减指定值<br>append      给指定 key 的字符串值追加 value<br>substr      返回截取过的 key 的字符串值</p><p>lpush       在 key 对应 list 的头部添加字符串元素<br>rpush       同上，在尾部添加<br>llen        对应 list 的长度<br>lrange      返回指定区间内的元素<br>ltrim       截取 list<br>lset        设置 list 中指定下标的元素值<br>lrem        从 key 对应 list 中删除 count 个和 value 相同的元素<br>lpop        从 list 的头部删除元素，并返回删除元素<br>rpop        从 list 的尾部删除元素，并返回删除元素</p><p>sadd        添加一个 string 元素到 key 对应的 set 集合中<br>srem         从 key 对应 set 中移除给定元素，成功返回 1<br>smove       从 p1 对应 set 中移除 member 并添加到 p2 对应 set 中<br>scard       返回 set 的元素个数<br>sismember   判断 member 是否在 set 中<br>sinter      返回所有给定 key 的交集<br>sinterstore 同 sinter，但是会同时将交集存到 p1 下<br>sunion      返回所有给定 key 的并集<br>sunionstore 同 sunion，并同时保存并集到 p1 下<br>sdiff       返回所有给定 key 的差集<br>sdiffstore  同 sdiff，并同时保存差集到 dstkey 下<br>smembers     返回 key 对应 set 的所有元素，结果是无序的</p><p>zadd        添加元素到集合，元素在集合中存在则更新对应 score<br>zrem        删除指定元素，1 表示成功，如果元素不存在返回 0<br>zincrby     按照 incr 幅度增加对应 member 的 score 值，返回 score 值<br>zrank       返回指定元素在集合中的排名（下标）,集合中元素是按 score 从小到大排序的<br>zrevrank    同上,但是集合中元素是按 score 从大到小排序<br>zrange      类似 lrange 操作从集合中去指定区间的元素。返回的是有序结果<br>zrevrange   同上，返回结果是按 score 逆序的<br>zrangebyscore    返回集合中 score 在给定区间的元素<br>zcount           返回集合中 score 在给定区间的数量<br>zcard            返回集合中元素个数<br>zscore           返回给定元素对应的 score<br>zremrangebyrank  删除集合中排名在给定区间的元素<br>zremrangebyscore 删除集合中 score 在给定区间的元素</p><p>——————————SVN科目——————————</p><p>SVN         subversion  子级版本(子级源代码版本控制管理软件)<br>commit      提交<br>update      更新<br>checkout    检出<br>revision    修订版本<br>create      创建<br>delete      删除</p><p>[memcache]<br>memcache    内存缓存技术<br>start       开始<br>stop        停止<br>restart     重启<br>install     安装<br>uninstall   卸载<br>set         设置<br>del         删除<br>get         获取<br>serialize   序列化<br>unserialize   反序列化<br>connect     连接<br>decrement   减少<br>increment   增加<br>delete      删除<br>telnet      远程连接协议</p><p>——————————mysql优化——————————<br>myisam      存储引擎的一种<br>innodb      存储引擎的一种<br>engine      引擎<br>myisampack  压缩工具名称<br>myisamchk   重建索引工具名称<br>unpack      解压缩<br>select      查询<br>alter       修改数据表<br>unique      唯一<br>fulltext    全文<br>explain     阐述说明，执行计划<br>substring   字符串截取函数<br>variable    可变的<br>partition   分区<br>key         分区的一种<br>hash        分区的一种<br>range       分区的一种<br>list        分区的一种</p><p>——————————纯静态——————————<br>ob_start    开启缓冲区<br>ob_get_contents();  获取<br>ob_get_clean();     获取后清空<br>ob_get_flush();     获取刷新<br>ob_clean()          删除缓冲区内容<br>ob_get_clean();     获取并删除缓冲区内容<br>ob_end_clean();     清空并关闭缓冲区<br>ob_flush()          数据向下推送<br>ob_get_flush();     获取内容并推送内容<br>ob_end_flush();     推送内容并关闭缓冲区<br>ob_end_clean();     清空关闭<br>ob_end_flush();     刷新关闭<br>inlink              删除文件</p><p>[伪静态]<br>rewrite             重写<br>override            推翻、撤销<br>htaccess            伪静态规则定义文件名称</p><p>——————————终极项目——————————</p><p>layout      布局<br>ueditor     富文本编辑器<br>XSS         跨站脚本攻击技术<br>(Cross Site Scripting)<br>htmlpurifier    指定标签内容过滤器<br>verify      查证、验证<br>RBAC        role-base-access-control    基于角色的用户访问权限控制<br>cart        购物车<br>comment     评论<br>reply       回复<br>page        分页<br>sphinx      全文检索技术<br>CoreSeek    中文分词全文检索技术</p><p>nginx       网站服务器软件<br>lvs/haproxy 负载均衡<br>squid/varnish   反向代理(缓存服务器)<br>heartbeat/keepalived    高可用服务器<br>clone       复制</p><p>mongoDB     no-sql数据库产品</p><p>——————————微信——————————</p><p>QRCode (Quick Response Code) QR Code码是由日本Denso公司于1994年9月研制的一种矩阵二维码符号，它具有一维条码及其它二维条码所具有的信息容量大、可靠性高、可表示汉字及图象多种文字信息、保密防伪性强等优点。<br>access n. 入口，出口; 接近，进入; 增长; 爆发<br>token n. 代币; 象征; 记号<br>video  n. 磁带录像; 录像磁带; 录像机，电视; （指方法）录像<br>multimedia  n. 多媒体<br>recognition n. 认识，识别; 承认，认可; 褒奖; 酬劳<br>voice n. 嗓音; （动词的）语态; 呼声，发言权; 歌唱才能<br>location n. 位置，场所; 定位; 外景（拍摄地）<br>scale n. 规模; 比例（尺）; 鱼鳞; 级别<br>label n. 标签; 称标记，符号<br>title n. 标题; 头衔; [体]冠军; [影视]字幕<br>description n. 描述; 形容; 种类; 类型<br>signature  n. 签名; 署名; 识别标志<br>nonce n. 现时，目前<br>event  n. 事件，大事; 活动，经历; 结果; 运动项目<br>subscribe vt.&amp; vi. 认捐，捐赠; 签署，题词，署名; 认购; 订阅，订购<br>unsubscribe n. [医]注销，注销账户; 取消订阅<br>ticket n. 票，入场券; 标签; 传票，交通违规的通知单<br>latitude  n.  纬度; 范围; [天]黄纬<br>longitude n. 经度，经线; [天]黄经<br>precision n. 精确度，准确（性）; [语]精确<br>click n. 喀哒声; 爪，掣子; [计]（鼠标）点击; [语言学]吸气音<br>nickname n. 绰号; 诨名; 昵称<br>account n. 账，账目; 存款; 记述，报告; 理由<br>digest     vt.&amp; vi.消化; 整理<br>        vt. 吸收; 领悟; 玩味<br>        vi. 消化; 吸收食物; [化学]加热<br>        n. 文摘; 摘要; 法律汇编; 罗马法典</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归，阶乘</title>
      <link href="/2016/03/29/php/algorithm/digui/"/>
      <url>/2016/03/29/php/algorithm/digui/</url>
      
        <content type="html"><![CDATA[<p>1、以最快的速度求n的阶乘！<br>代码：</p><p>&lt;?php</p><p>//阶乘</p><p>function f($n){</p><p>if($n == 1){</p><p>return 1;</p><p>}else</p><p>return f($n-1)*$n;</p><p>}</p><p>//echo f(10);</p><p>echo f($_GET[‘n’]);</p><p>2、如何用循环的方法改写斐波那契数列！<br>代码：</p><p>&lt;?php</p><p>function f($a,$b,$n){</p><p>//前两项已知</p><p>$before1 = $a;</p><p>$before2 = $b;</p><p>if($n == 1){</p><p>return $a;</p><p>}</p><p>if($n ==2){</p><p>return $b;</p><p>}</p><p>//从第三项开始，求到第n项</p><p>for($i=3;$i&lt;=$n;$i++){</p><p>$sum = $before1 + $before2;</p><p>$before2 = $before1;</p><p>$before1 = $sum;</p><p>}</p><p>return $sum;</p><p>}</p><p>echo f(1,1,$_GET[‘n’]);</p><p>3、递归调用<br>斐波那契数列：前两项已知，从第三项开始，每一项都是前两项之和！</p><p>1    1    2    3    5    8……思考：如何求得第n项的值？</p><p>1    (n&lt;=2)</p><p>f(n)=</p><p>f(n-1) + f(n-2)   (n&gt;=3)</p><p>递归的两个要点：</p><p>1， 递归的出口：就是指什么时候停止递归调用</p><p>2， 递归点：就是指什么时候开始使用递归调用</p><p>对于上面的问题：当n=1或n=2的时候，停止调用自己，也就是递归的出口</p><p>当n&gt;=3的时候，开始使用递归</p><p>在写递归调用的时候，注意，先写递归的出口，再写递归点！</p><p>代码：</p><p>/**</p><p>*斐波拉契数列</p><p>*@param int   $n  数列的项数</p><p>*@return int $s    数列的最后一项的值</p><p>*/</p><p>function f($n){</p><p>if($n ==1 || $n ==2){</p><p>return 1;</p><p>}</p><p>$s = f($n-1)+f($n-2);</p><p>return $s;</p><p>}</p><p>//调用并输出</p><p>echo f($_GET[‘n’]);</p><p>//echo f(30);</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2016/03/22/php/algorithm/maopao/"/>
      <url>/2016/03/22/php/algorithm/maopao/</url>
      
        <content type="html"><![CDATA[<h2 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h2><p>1、基本算法思想：<br>l依次比较相邻的两个元素，消除逆序（逆序是数学上的概念，是成对出现的，比如50,30就是一对逆序，所谓的消除逆序，就是大的放后面，小的放前面）</p><p>l这样，一轮比较下来，最大的那个数一对是在最后面！</p><p>l然后，再继续新的一轮的比较，注意，刚才一轮后的最大值不再参与比较，这样，这一轮参与比较的数值就比上一轮少一个，如此反复，直到最后只剩下两个数值比较为止！</p><p>所以：应该是一个双重循环，外层控制轮数，内层控制每轮比较的次数！</p><p>2、示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo &#39;&lt;pre&gt;&#39;;</span><br><span class="line"></span><br><span class="line">function maopao($arr)&#123;</span><br><span class="line"></span><br><span class="line">for($i&#x3D;1,$len&#x3D;count($arr);$i&lt;$len;$i++)&#123;</span><br><span class="line"></span><br><span class="line">for($k&#x3D;0;$k&lt;$len-$i;$k++)&#123;</span><br><span class="line"></span><br><span class="line">if($arr[$k]&gt;$arr[$k+1])&#123;</span><br><span class="line"></span><br><span class="line">$tem &#x3D; $arr[$k];</span><br><span class="line"></span><br><span class="line">$arr[$k] &#x3D; $arr[$k+1];</span><br><span class="line"></span><br><span class="line">$arr[$k+1] &#x3D; $tem;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return $arr;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$arr1 &#x3D; array(78,90,67,45,23,12,34,54,32);</span><br><span class="line"></span><br><span class="line">var_dump(maopao($arr1));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax认知</title>
      <link href="/2016/03/10/php/study/zajax/"/>
      <url>/2016/03/10/php/study/zajax/</url>
      
        <content type="html"><![CDATA[<h2 id="一-ajax简介"><a href="#一-ajax简介" class="headerlink" title="一.ajax简介"></a>一.ajax简介</h2><h3 id="1-什么是ajax"><a href="#1-什么是ajax" class="headerlink" title="1.什么是ajax?"></a>1.什么是ajax?</h3><p>l lasynchronous    代表异步  synchronous同步</p><p>l ljavascript     核心技术</p><p>l land        </p><p>l lxml :      主要用来保存数据和传输数据</p><p>直接翻译:异步的JavaScript和xml</p><p>其实就是可以与我们的服务器进行异步或者同步交互的一门技术</p><p>同步交互:指一个时间段内只能有一个进程在执行.</p><p>异步交互:指一个时间段内可以有多个进程在执行.</p><p>最大特点:无刷新(用户体验非常好)</p><h3 id="2-ajax的发展史"><a href="#2-ajax的发展史" class="headerlink" title="2.ajax的发展史"></a>2.ajax的发展史</h3><p>1999年，微软公司发布IE5浏览器的时候嵌入的一种技术。起初名字是XMLHttp</p><p>直到2005年Ajax才开始流行使用，该年google公司发布了一个邮箱产品gmail，内部的gtalk聊天工具有使用ajax技术,同时使得向来不被人们重视的javascript语言得到的大家的青睐.</p><h3 id="3-ajax技术是许多旧技术的集合"><a href="#3-ajax技术是许多旧技术的集合" class="headerlink" title="3.ajax技术是许多旧技术的集合"></a>3.ajax技术是许多旧技术的集合</h3><p>包括html、css、javascript、xml、dom,XMLHttpRequest对象(ajax对象),</p><p>其中XMLHttpRequest是ajax的官方的名称。</p><h3 id="4-ajax对象的常用方法和属性"><a href="#4-ajax对象的常用方法和属性" class="headerlink" title="4.ajax对象的常用方法和属性"></a>4.ajax对象的常用方法和属性</h3><p>ajax请求也是走http协议</p><p>常用方法:</p><p>l open(method,url,[async]) :建立http连接</p><p>method:请求方式,get和post</p><p>url:请求的网址</p><p>[async]:是否异步,两个值一个true(异步)false(同步),  默认为true,异步        </p><p>l setRequestHeader(header,value)  :设置请求头</p><p>header:请求头</p><p>value:请求头信息</p><p>l send(content) :发送http请求</p><p> content:请求的参数,如果get请求参数直接写null,post请求需要把请求字符串写入到参数中,请求形式 键1=值1&amp; 键2=值2  name=zhangsan&amp;age=18</p><p>常用属性:</p><p>readyState : ajax对象的状态,有五个值0,1,2,3,4   </p><p>0:初始化对象,没调用open()方法</p><p>1:已调用open()方法</p><p>2:已调用send()方法</p><p>3:开始接收服务器返回来的数据,但不完整</p><p>4:数据接收完成,请求成功.  </p><p>onreadystatechange  :ajax对象状态改变的事件,可以感知1,2,3,4</p><p>status:响应状态码  200 -ok,   304-读取本地缓存, 404-服务器找不到页面   </p><p>responseText:接收服务器返回字符串的形式数据.  </p><p>responseXML :接收服务器返回来的xml数据.(后台需要组装xml数据返回 )</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php发展史和一些其他知识</title>
      <link href="/2016/03/01/php/study/develop/"/>
      <url>/2016/03/01/php/study/develop/</url>
      
        <content type="html"><![CDATA[<p>PHP发展史（了解）<br>php的原始含义：Personal Home Page！个人网页</p><p>最开始是由加拿大的一哥们自己开发了一个脚本，用户记录有多少人访问他的在线简历！很受欢迎！于是他就开始开发自己的工具集！</p><p>php现在含义：Hypertext Preprocessor  超文本预处理语言！</p><p>说明php是在服务器上预先处理好的，将结果返回给浏览器！</p><p>PHP的功能与特点<br>l php主要是用来做web服务器开发，用户实现用户的各种请求，也可以用来软件开发（不常见）</p><p>l php是开源软件，能够在所有的操作系统上稳定运行！</p><p>l php入门比较简单，语法类似于c语言！能够实现面向过程和面向对象并用！</p><p>l php运行效率高，消耗系统的资源比较少</p><p>l php支持多种主流的数据库，mssql、Oracle、mysql、sybase、DB2，但是和Mysql是“黄金搭档”</p><p>Mvc的思想：<br>所谓的mvc思想，就是在显示与逻辑相分离的基础之上，再把逻辑中所有数据处理模块提取出来，在需要的功能上进行调度即可！</p><p>M：Model，模型，项目中的数据处理单元</p><p>V：View，视图，项目中用于展示数据的单元（模板）</p><p>C：controller，控制器，项目中负责某个功能整体流程调度的单元！</p><p>此时，浏览器只需要和C控制器进行交互，而模型M和模型V都被控制器所调用！并且模型M和视图V之间不存在任何的交互！</p><p>项目流程简介<br>需求分析<br>了解客户的真实需求是什么？</p><p>另外，还往往要进行一次可信性分析！</p><p>设计<br>怎么去做，具体的算法是什么！</p><p>编码实现<br>敲代码，一般有两个方向：</p><p>二次开发<br>是指在一个成熟的产品之上，完成自己特定项目的业务逻辑，比如：</p><p>论坛：discuz，phpwind</p><p>cms：内容管理系统，dedecms（织梦），帝国，新云（asp）</p><p>社交：ThinkSNS，Ucenter Home</p><p>电商：ecshop，ecmall，shopex</p><p>二次开发的特点：前期投入的成本非常的低，如果是商业目的，需要购买授权！</p><p>基于框架的开发<br>什么是框架？</p><p>只规范了结构和基础的功能（各个项目共同的功能），比如：文件管理，数据库的操作等！</p><p>但是没有实现任何常规的业务逻辑！</p><p>比如：ZendFramework  ThinkPHP  YII  CI等</p><p>框架开发的特点：业务逻辑是从0开始，但是基础代码功能并不是从0开始，而是从框架开始，省掉了做底层代码开发的时间！</p><p>最后有一个代码的优化！</p><p>测试<br>目的是尽可能的发现已知的错误或者漏洞</p><p>发布<br>开始运营</p><p>维护升级</p><p>数据库的概念<br>简单来说，数据库就是存储数据的仓库，我们现在的笔记就是一个数据库！</p><p>但是，光有数据库还不行，当数据越来越多的时候，我们还需要对数据库进行管理，我们称之为数据库管理系统！</p><p>数据库系统 = 数据库 + 数据库管理系统 + 数据库管理员</p><p>DataBase System(DBS) = DataBase(DB) + DataBase Management System(DBMS) + DataBase Administrator(DBA)</p><p>数据库：对大量信息进行管理的有效解决方案，安装数据结构来组织、存储和管理数据的库！</p><p>通常一个web项目（网站）会使用一个数据库来存储其所有的动态数据！</p><p>SQL<br>是一种关系型数据库操作语言，也是一种数据库编程语言！</p><p>SQL：Structure Query Language！结构化查询语言！</p><p>根据对数据库不同的操作对象（或操作层次），SQL又可以分成不同的操作语言：</p><p>所以，数据库的第一种操作语言就是DDL</p><p>DDL：Data Definition Language，数据定义语言</p><p>主要是用来定义和维护数据库的各种对象（比如，库，表等），也可以说操作的层次是在数据库和表的逻辑结构和存在结构上面，并没有对表中的实际数据进行任何的操作！</p><p>DDL主要的操作关键字：create，drop，alter等</p><p>DML：Data Manipulation Language，数据操作语言</p><p>主要就是对表中的记录进行增删改查操作！</p><p>注意：其中“查询”部分，又叫作DQL：Data Query Language，数据查询语言！select</p><p>DCL：Data Control Language，数据控制语言</p><p>主要是对数据库进行统一的管理和统一的控制，比如并发控制，存取控制，安全控制等，具体的有数据库的权限管理，数据的备份与恢复等！</p><p>数据库操作<br>创建数据库<br>语法形式：</p><p>create  database  数据库名[数据库选项];</p><p>其中，数据库选项主要有两个：一个是字符集，一个是校对规则（以后学）</p><p>注意：sql语句需要语句结束符分号；来结束！</p><p>创建数据库名的命名规则<br>1， 数据库名是否区分大小写取决于当前的操作系统！（windows下不区分，linux下面就区分），我们的原则是，就认为区分大小写！而且数据库名要见名知意！推荐使用下划线方式！</p><p>2， 原则上，数据库名可以使用任意的字符，甚至是中文，但是一些特殊的符号，比如：纯数字、特殊符号、mysql内部的关键字、中文等；这些特殊的符号应该使用标识符限定符反引号来包裹，反引号就是键盘上左上角，波浪线</p><p>删除数据库<br>语法形式是：</p><p>drop  database  数据库名；</p><p>注意：删除数据库一定要慎重，因为整个数据库文件夹都会被删除，其中包括里面所有的数据表，而且过程一般不可逆！</p><p>修改数据库<br>注意：数据库的名字不可修改！只能修改数据库的库选项信息！</p><p>语法如下：</p><p>alter database 数据库名[库选项]</p><p>查看数据库<br>查看当前有哪些数据库：</p><p>语法是：</p><p>show  databases;</p><p>查看数据库的创建语句：</p><p>语法是：</p><p>show create database 数据库名；</p><p>思考：如果现在就需要修改数据的名字，应该怎么办？</p><p>有两种方法：</p><p>1， 直接修改目录下原数据库的文件夹名，但是要谨慎，因为有的时候不是所有的数据库下的表都放在同一个地方！</p><p>把当前的数据先导出，创建一个新的数据库，把以前的数据导入进来，再删除以前的数据库！</p><p>数据表操作<br>每一个数据表都属于一个具体的数据库，所以，在操作表之前，应该选择默认的数据库！</p><p>use 库名</p><p>创建数据表<br>创建表的语法：</p><p>create  table  表名（字段名1  字段1类型[，字段名2  字段2类型……]）[表选项]</p><p>需要注意的是：</p><p>1， 每个字段都必须规定数据类型，字段名和字段数据类型之间以空格分隔；</p><p>2， 字段与字段之间用逗号分隔，但最后一个字段不能有逗号，</p><p>3， 表选择其实就是规定表的字符集和存储引擎（暂时用默认，后面讲）</p><p>4， 表名的命名规则和库名基本是一样的，也就是说，如果有特殊字符做表名，一样要用反引号包裹起来！</p><p>查看数据表<br>语法是：</p><p>show tables;</p><p>查看表的创建语句：</p><p>show  create  table 表名；</p><p>当数据比较多的时候，可以使用\G来代替语句结束符；看起来更加有条理性</p><p>另外，还可以查看表的结构：</p><p>也就是表的字段的类型、属性</p><p>语法是：</p><p>describe 表名；  或</p><p>desc 表名；</p><p>删除数据表<br>语法是：</p><p>drop table 表名；</p><p>drop table if exists 表名</p><p>加上if exists之后，即使删除一个不存在的表，既不执行也不会报错！</p><p>修改数据表<br>修改表名<br>语法如下：</p><p>rename table 旧表名 to 新表名;</p><p>注意：可以为多个表进行重命名，中间以逗号隔开！</p><p>修改列定义<br>又可以分成很多种操作，常见的有：增加字段，删除字段，重命名字段，修改字段数据类型！</p><p>关键字：</p><p>增加：add</p><p>删除：drop</p><p>重命名：change</p><p>修改：modify</p><p>上面的四个关键字都是子命令，还有一个上级的命令的关键字是：alter</p><p>基本的语法形式就是：</p><p>alter  table 表名……</p><p>数据操作<br>插入数据<br>语法：</p><p>insert  into 表名（字段列表） values （值列表）;</p><p>注意：</p><p>1， 字段列表可以是该表的全部字段，也可以是部分字段（也就是只插入了部分数据，其他的默认为null，表示什么都没有）</p><p>2， 字段列表和值列表应该是一一对应的！</p><p>3， 当为全部字段插入数据的时候，字段列表可以省略！但是，插入数据的顺序必须与表中字段的顺序保持一致！为了避免出错，强烈建议写上！</p><p>4， 可以一次插入多条记录，中间以逗号隔开！</p><p>查询数据<br>语法：</p><p>select   */字段列表 from  表名[查询条件];</p><p>注意：查询条件是用where关键字，如果省略查询条件，相当于查询所有的数据，也就是相当于where 1</p><p>删除数据<br>语法：</p><p>delete  from  表名[删除条件];</p><p>注意：</p><p>在实际的应用中，删除条件往往是必须的，如果没有删除条件，相当于删除了整个数据表的全部数据！这个过程一般也是不可逆！</p><p>修改数据</p><p>update  表名  set  字段1=新值1，字段2=新值2，……[修改条件]</p><p>外键<br>删除外键的语法：</p><p>alter  table 表名 drop foreign key 外键名;</p><p>增加外键的语法：</p><p>alter  table 表名 add foreign key 外键定义;</p><p>外键定义的完整语法：</p><p>Foreign Key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]</p><p>其他数据操作<br>数据的操作也叫作crud</p><p>C：create</p><p>R：read</p><p>U：update</p><p>D：delete</p><p>插入数据<br>标准语法：</p><p>insert into 表名[字段列表] values （值列表）</p><p>蠕虫复制<br>思考：如何以最快的速度向数据表中插入200万条数据？</p><p>含义：就是在已有的数据的基础之上，将原来的数据进行复制，插入到对应的表中！</p><p>语法规则：</p><p>insert into 表名 select *|字段列表 from 表名;</p><p>蠕虫的作用：</p><p>1， 可以快速的将一个表的数据全部复制到另一个表中！</p><p>2， 短期内为表产生大量的数据，为了测试数据库的压力以及效率！</p><p>主键重复<br>方案1：如果主键冲突，就直接更新！</p><p>使用如下的语法：</p><p>insert into 表名[字段列表]  values （值列表） on duplicate key update 字段1=值1，字段2=值2……;</p><p>作用：即使主键已经存在，也要插入成功！</p><p>方案二：如果主键冲突，直接删除原纪录再插入！</p><p>语法是：</p><p>replace into 表名[字段列表] values （值列表）</p><p>作用：先判断有没有冲突，如果没有冲突就直接插入（新增），如果有冲突，就删除原纪录再次插入（更新）！</p><p>修改数据<br>标准语法：</p><p>update 表名 set 字段1=值1，字段2=值2……where 条件;</p><p>修改数据还可以加上limit子句：</p><p>update 表名 set 字段1=值1，字段2=值2……where 条件 limit数据量；</p><p>意思就是只更新前多少多少条符合条件的记录！</p><p>删除数据<br>基本语法：</p><p>delete from 表名 where 删除条件</p><p>加上limit子句：</p><p>delete from 表名 where 删除条件 limit 数据量；</p><p>但是，用delete语句不会重置自增长！</p><p>还有一个删除数据表数据的语法：</p><p>truncate 表名；</p><p>truncate的作用：</p><p>相当于先把该表给drop掉，再按以前的表结构重新create一次！</p><p>查询数据<br>查询数据是业务逻辑中使用的最多的也是最复杂的！</p><p>关于查询数据，其实才刚刚开始！</p><p>以前的语法：</p><p>select *|字段列表 from 表名 where 查询条件；</p><p>比较完整的比较：</p><p>select  [select选项]  */字段列表[as 字段别名]  from 数据源 [where 子句][group by子句][having 子句][order by子句][limit 子句];</p><p>注意：</p><p>1， from后面的子句往往称为：五子句，也叫作查询五子句，也叫作五子查询</p><p>2， 五子查询的选项可以都没有，但是，如果有的话，就必须按照上面顺序写！</p><p>select选项<br>是指系统在查询出数据后，要不要去除重复的记录！有两个选项：</p><p>all：也是默认值，保留所有的查询结果！</p><p>distinct：去重，去掉重复的记录，这里的重复是指所有的字段都相同，完全一样！</p><p>所以，在实际的运用中，这个选项基本不用，因为几乎所有的表都有一个主键！</p><p>别名<br>所谓的别名，就是给字段或其他表达式等标识符起一个名字！基本语法是：</p><p>字段|表达式|表名|子查询结果 [as] 别名</p><p>这里的as可以省略，但是为了增加可读性，强烈建议写上！</p><p>为什么要有别名？</p><p>第一， 如果出现多表查询的时候，往往不同的表会有相同的字段名，如果要使用同名的字段，就必须给其中的一个或者两个起上别名，否则不好区分！</p><p>第二， 通常都要给一个表达式起一个别名，代表该表达式的含义！</p><p>虚拟表<br>查询语句比较完整的比较：</p><p>select  [select选项]  */字段列表[as 字段别名]  from 数据源 [where 子句][group by子句][having 子句][order by子句][limit 子句];</p><p>group by子句<br>也称之为分组统计查询语句！</p><p>语法<br>group by 字段1[字段2……]</p><p>order by子句<br>根据某个字段进行排序，有升序和降序之分！</p><p>语法<br>order by 字段1 [asc|desc ]</p><p>默认为asc，也就是升序！可以省略！</p><p>当然，排序的规则要按照校对集</p><p>多字段排序</p><p>order by 字段1 [asc|desc ], 字段2 [asc|desc ]……</p><p>limit子句<br>limit就是限制的意思，所以，limit子句的作用就是限制查询记录的条数！</p><p>语法<br>limit offset,length</p><p>在项目中，如果要用到分页效果，就应该使用limit子句！</p><p>limit ($pageNum-1)* $rowPerPage,$rowPerPage</p><p>表单传值<br>web表单主要用来在网页中发送数据到服务器，比如：用户注册，用户登录等</p><p>表单传值有两种：get和post</p><p>submit不算是表单内容的一部分，可以理解为form的一部分！</p><p>有两件事情需要注意：</p><p>1， 无论是单选框还是复选框，除了要有name属性，还要有value值</p><p>2， 复选框中name属性，一定要加上中括号[]，否则，只保留最后一个被选中的值，因为前面的全部被覆盖了！</p><p>http协议<br>http：HyperText  Transfer Protocol 超文本传输协议！</p><p>http协议的特点<br>一般的协议只支持b/s模型！</p><p>1， http协议也支持c/s模型</p><p>2， 灵活，可以利用http协议传递任意类型的数据</p><p>3， 无连接请求：每次连接只能处理一个请求，浏览器向服务器发起一次请求后，只能从服务器那里得到一次响应！</p><p>4， 无状态：也叫作无记忆功能，意思是同一个浏览器向同一个服务器发起多次请求的时候，服务器不能识别该浏览器！</p><p>http协议分成了两个部分：</p><p>http请求：浏览器向服务器索要数据</p><p>http响应：服务器向浏览器反馈数据</p><p>不管是请求还是响应，其实http协议都是由一个一个的简单协议项组成的（也就是事先的一种约定）</p><p>形式如下：</p><p>协议名：协议内容（协议值）</p><p>每一个协议项都独占一行！</p><p>http请求<br>http请求包含了四个部分：</p><p>请求行</p><p>请求头</p><p>空行</p><p>请求数据</p><p>请求行<br>单独的占用一行，分为三个部分：</p><p>请求方式 请求路径 协议版本    三个部分之间用空格隔开，比如：</p><p>GET  /index.index  HTTP/1.1     协议的版本是1.1  以前是1.0</p><p>请求头<br>请求头就是所有当前需要用到的协议项的集合，每个协议项都要独占一行，比如：</p><p>host：<a href="http://www.itcast.cn" target="_blank" rel="noopener">www.itcast.cn</a></p><p>常见的协议项有：</p><p>host：当前url中所要请求的服务器的主机名（域名）</p><p>accept-encoding：是浏览器发给服务器,声明浏览器支持的压缩类型  比如gzip</p><p>accept_charset：表示，浏览器支持的字符集</p><p>referer：表示，此次请求来自哪个网址</p><p>accept-language：可以接收的语言类型，cn，en等</p><p>cookie：如果之前当前请求的服务器在浏览器端设置了数据（cookie），那么当前浏览器再次请求该服务器的时候，就会把对应的数据带过去</p><p>user-agent：用户代理，当前发起请求的浏览器的内核信息</p><p>accept：表示浏览器可以接收的数据类型，text/html，image/img</p><p>content-length（post）：只有post提交的时候才会有的请求头，显示的是当前要提交的数据的长度（字节）</p><p>if-modified-since（get）：表示，在客户端向服务器请求某个资源文件时，询问此资源文件是否被修改过</p><p>content-type（post）：用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件</p><p>空行<br>用来分离请求头和请求数据，请求头到此结束</p><p>请求数据<br>只有post提交的时候才会有请求数据</p><p>查看http协议<br>httpwatch：专业查看整个http请求和响应的过程</p><p>firefox下面的插件：firebug</p><p>http响应<br>也分成了四个部分：</p><p>状态行（响应行） </p><p>响应头</p><p>空行</p><p>响应主体</p><p>状态行<br>独占一行  分成三个部分： 协议版本  状态码  状态描述，比如：</p><p>HTTP/1.1   200  OK</p><p>响应头<br>也是名：值形式，常见的有：</p><p>server：服务器主机信息</p><p>date：响应时间</p><p>last-modified：文件最后修改时间（对应请求中：if-modified-since）</p><p>content-length：响应主体的长度（字节）</p><p>content-type：响应内容的数据类型：text/html，image/png等</p><p>location：重定向，浏览器遇到这个选项，就立马跳转（不会解析后面的内容）</p><p>refresh：重定向（刷新），浏览器遇到这个选项就会准备跳转，刷新一般有时间限制，时间到了才跳转，浏览器会继续向下解析</p><p>content-encodeing：文件编码格式</p><p>cache-control：缓存控制，no-cached不要缓存</p><p>空行<br>用来分隔响应头和响应主体</p><p>响应主体<br>html代码（内容）</p><p>状态码<br>1XX：代表http请求尚未成功</p><p>2XX：请求没有问题，同时服务器响应也没有问题</p><p>3XX：重定向，服务器要求浏览器重新发起请求</p><p>4XX：请求错误，服务器不能正常响应（一般会做一个404的友好页面！给出友好的提示！）</p><p>5XX：服务器错误，不能正常响应！</p><p>php模拟http响应<br>php模拟响应，其实就是通过header函数修改http协议，常见的有跳转，刷新和下载</p><p>跳转<br>意思就是浏览器请求到当前的文件之后，直接跳转到其他的位置</p><p>对应的http协议项：Location，具体的语法形式是：</p><p>header(‘location:新的url或uri’);</p><p>其中，如果是路径uri，浏览器会自动在前面绑定之前的域名，比如：</p><p>原来的域名是<a href="http://www.php17.com/model/show.php" target="_blank" rel="noopener">www.php17.com/model/show.php</a>   uri是：/model/register.php   相当于跳转到了：<a href="http://www.php17.com/model/register.php" target="_blank" rel="noopener">www.php17.com/model/register.php</a></p><p>也就是站内跳转</p><p>一旦遇到location就立即跳转！后面的代码不执行了！</p><p>刷新<br>刷新的本质还是跳转，不过刷新是告诉浏览器在多长时间之后进行刷新，可以刷新自己，也可以去请求其他的脚本，具体的语法是：</p><p>header(‘refresh:刷新等待的时间;url=刷新要请求的目标脚本或其他网址’);</p><p>注意：在刷新等待的时候，后面的代码会继续执行！</p><p>下载<br>下载可以通过a标签实现！</p><p>注意：使用a标签下载文件，只能下载那些浏览器无法解析的文件！</p><p>1， 告诉浏览器不要解析</p><p>content-type:application/octet-stream</p><p>2,指导浏览器如何保存文件</p><p>content-disposition:attachment;filename</p><p>字符串函数<br>strlen<br>获取字符串的长度，这里的长度指的是字节的长度！</p><p>substr<br>sub在这里是截取的意思</p><p>substr就是字符串截取函数，应该有三个参数</p><p>从指定字符串的指定起始位置开始，截取指定长度的字符串！</p><p>三个指定，应该有三个参数！</p><p>注意：字符串的起始位置是0！</p><p>如果不指定第三个参数，默认就是截取到最后！</p><p>strtolower<br>把字符串全部小写</p><p>strtoupper<br>将字符串全部大写</p><p>ucfirst<br>首字母大写</p><p>lcfirst<br>首字母小写</p><p>strrev<br>rev是reverse的意思，也就是反转</p><p>该函数的功能就是把字符串反转</p><p>strpos<br>pos是position的意思，也就是位置</p><p>所以，该函数的功能是查找并返回指定字符串中指定字符的起始位置！</p><p>所以，应该有两个参数！</p><p>strrpos<br>多出了一个r是reverse的意思，函数的功能从右往左查找并返回指定字符串的指定字符的起始位置！</p><p>注意：起始编号还是从左往右从0开始！</p><p>strchr<br>也是字符串截取函数，截取指定位置开始以后的全部字符串！</p><p>还有一个别名strstr</p><p>strrchr<br>也是字符串截取函数，截取从右往左指定位置开始以后的全部字符串！</p><p>trim<br>去除字符串的左右的空格！</p><p>数学函数<br>abs<br>取绝对值</p><p>floor<br>向下取整  </p><p>ceil<br>向上取整，得到一个比当前数值大的最小整数</p><p>round<br>四舍五入，有两个参数，第一个是数值本身，第二个精确的小数的位数，如果不写第二个参数，默认的是0，也就是得到了一个整数</p><p>rand和mt_rand<br>都是获得一个指定区间的随机整数，只是mt_rand的效率更高！</p><p>注意是闭区间！</p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
